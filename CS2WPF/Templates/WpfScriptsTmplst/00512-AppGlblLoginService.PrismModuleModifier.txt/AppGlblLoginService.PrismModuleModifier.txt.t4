<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="jsonpmm2txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string IAppGlblSettingsServiceFolder      = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName   = GetModelClassName(Model, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace   = GetModelNameSpace(Model, IAppGlblSettingsServiceFolder);

    string IBearerTokenModelFolder      = "00496-IBearerTokenModel.cs";
    string IBearerTokenModelClassName   = GetModelClassName(Model, IBearerTokenModelFolder);
    string IBearerTokenModelNameSpace   = GetModelNameSpace(Model, IBearerTokenModelFolder);

    string BearerTokenModelFolder      = "00498-BearerTokenModel.cs";
    string BearerTokenModelClassName   = GetModelClassName(Model, BearerTokenModelFolder);
    string BearerTokenModelNameSpace   = GetModelNameSpace(Model, BearerTokenModelFolder);

    string IRegisterModelFolder      = "00500-IRegisterModel.cs";
    string IRegisterModelClassName   = GetModelClassName(Model, IRegisterModelFolder);
    string IRegisterModelNameSpace   = GetModelNameSpace(Model, IRegisterModelFolder);

    string RegisterModelFolder      = "00502-RegisterModel.cs";
    string RegisterModelClassName   = GetModelClassName(Model, RegisterModelFolder);
    string RegisterModelNameSpace   = GetModelNameSpace(Model, RegisterModelFolder);


    string IChangePasswordModelFolder      = "00504-IChangePasswordModel.cs";
    string IChangePasswordModelClassName   = GetModelClassName(Model, IChangePasswordModelFolder);
    string IChangePasswordModelNameSpace   = GetModelNameSpace(Model, IChangePasswordModelFolder);

    string ChangePasswordModelFolder      = "00506-ChangePasswordModel.cs";
    string ChangePasswordModelClassName   = GetModelClassName(Model, ChangePasswordModelFolder);
    string ChangePasswordModelNameSpace   = GetModelNameSpace(Model, ChangePasswordModelFolder);


    string IAppGlblLoginServiceFolder      = "00508-IAppGlblLoginService.cs";
    string IAppGlblLoginServiceClassName   = GetModelClassName(Model, IAppGlblLoginServiceFolder);
    string IAppGlblLoginServiceNameSpace   = GetModelNameSpace(Model, IAppGlblLoginServiceFolder);
    string IAppGlblLoginServiceProject     = GetModelProjectName(Model, IAppGlblLoginServiceFolder);

    string AppGlblLoginServiceFolder      = "00510-AppGlblLoginService.cs";
    string AppGlblLoginServiceClassName   = GetModelClassName(Model, AppGlblLoginServiceFolder);
    string AppGlblLoginServiceNameSpace   = GetModelNameSpace(Model, AppGlblLoginServiceFolder);
    string AppGlblLoginServiceProject     = GetModelProjectName(Model, AppGlblLoginServiceFolder);
    
    string getAuthInfoHeaderMethodName          = "GetAuthInfoHeader";
    string ShowErrorMethodName                  = "ShowErrorMessage";

    string AppSettingServicePropertyName        = "GlblSettingsSrv";

    string LoginMethodName                      = "Login";
    string ChangePasswordMethodName             = "ChangePassword";
    string LogoutMethodName                     = "Logout";
    string RegisterMethodName                   = "Register";

    string OldPasswordPropertyName              = "OldPassword";
    string NewPasswordPropertyName              = "NewPassword";
    string ConfirmPasswordPropertyName          = "ConfirmPassword";

    string EmailPropertyName                    = "Email";
    string PasswordPropertyName                 = "Password";

    List<string> nmSpaces = new List<string>();
    if ((AppGlblLoginServiceNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((AppGlblLoginServiceNameSpace != IAppGlblLoginServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblLoginServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblLoginServiceNameSpace);
    if ((AppGlblLoginServiceNameSpace != IRegisterModelNameSpace) && (nmSpaces.IndexOf(IRegisterModelNameSpace) < 0)) 
        nmSpaces.Add(IRegisterModelNameSpace);
    if ((AppGlblLoginServiceNameSpace != RegisterModelNameSpace) && (nmSpaces.IndexOf(RegisterModelNameSpace) < 0)) 
        nmSpaces.Add(RegisterModelNameSpace);
    if ((AppGlblLoginServiceNameSpace != IChangePasswordModelNameSpace) && (nmSpaces.IndexOf(IChangePasswordModelNameSpace) < 0)) 
        nmSpaces.Add(IChangePasswordModelNameSpace);
    if ((AppGlblLoginServiceNameSpace != ChangePasswordModelNameSpace) && (nmSpaces.IndexOf(ChangePasswordModelNameSpace) < 0)) 
        nmSpaces.Add(ChangePasswordModelNameSpace);
    if ((AppGlblLoginServiceNameSpace != IBearerTokenModelNameSpace) && (nmSpaces.IndexOf(IBearerTokenModelNameSpace) < 0)) 
        nmSpaces.Add(IBearerTokenModelNameSpace);
    if ((AppGlblLoginServiceNameSpace != BearerTokenModelNameSpace) && (nmSpaces.IndexOf(BearerTokenModelNameSpace) < 0)) 
        nmSpaces.Add(BearerTokenModelNameSpace);

#>
{
"PrismMMMCallItems": [
    {
    "Description": [
    '"<#= AppGlblLoginServiceClassName #>"  is defined in the "<#= AppGlblLoginServiceProject #>"-project.',
    'In the file of IModule-class of "<#= AppGlblLoginServiceProject #>"-project the following line of code must be inserted:',
    '    public void RegisterTypes(IContainerRegistry containerRegistry)',
    '    {',
    '        ...',
    '        containerRegistry.Register<<#= IAppGlblLoginServiceClassName #>, <#= AppGlblLoginServiceClassName #>>();',
    '        ...',
    '    }',
    ],
<#  
{
    string ServiceInterfaceNameSpaceAndClassName            = IAppGlblLoginServiceNameSpace + "." + IAppGlblLoginServiceClassName;
    string ServiceNameSpaceAndClassName                     = AppGlblLoginServiceNameSpace + "." + AppGlblLoginServiceClassName;
    string destProjectName                                  = GetModelProjectUniqueName(Model, AppGlblLoginServiceFolder);
    string destImplementedInterface                         = "Prism.Modularity.IModule";
    string destMethodName                                   = "RegisterTypes";
    string[] destMethodParamTypes                           = new string[] {"Prism.Ioc.IContainerRegistry"};
    string destMethodAccessType                             = "public";
    string invocationParamType                              = "Prism.Ioc.IContainerRegistry";
    string invocationMethodName                             = "Register";
    string[] invocationGenerics                             = new string[]{ServiceInterfaceNameSpaceAndClassName, ServiceNameSpaceAndClassName};
    string[] invocationParams                               = new string[]{};
    //result = PrismModifier.UpdateMethodWithParamIdentifier(destProjectName,  destImplementedInterface, destMethodName, destMethodParamTypes, destMethodAccessType,
    //                    invocationParamType, invocationMethodName, invocationGenerics, invocationParams);
#>  
    "MethodName": 'UpdateMethodWithParamIdentifier',
    "DestProjectName": '<#= destProjectName #>',
    "DestImplementedInterface": '<#= destImplementedInterface #>',
    "DestMethodName": '<#= destMethodName #>',
    "DestMethodParamTypes": ['<#= destMethodParamTypes[0] #>'],
    "DestMethodAccessType": '<#= destMethodAccessType #>',
    "DestMethodParamTypeForVar": '',
    "InvocationVarType": '',
    "InvocationParamType": '<#= invocationParamType #>',
    "InvocationClassType": '',
    "InvocationMethodName": '<#= invocationMethodName #>',
    "InvocationGenerics": ['<#= invocationGenerics[0] #>','<#= invocationGenerics[1] #>'],
    "InvocationParams": [],
    "StepDescription": 'Insertion the line : containerRegistry.Register<<#= IAppGlblLoginServiceClassName #>, <#= AppGlblLoginServiceClassName #>>();'
    },
<#

}
#>
    ]
}




<#+
    string GetModelProjectUniqueName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        return refItem.FileProject.Replace(@"\", @"\\");
    }

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>