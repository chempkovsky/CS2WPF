<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="xaml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>

<#

    string WebServiceFilterUserControlFolder      = "00242-WebServiceFilterUserControl.xaml.cs";
    string WebServiceFilterUserControlClassName   = GetModelClassName(Model, WebServiceFilterUserControlFolder);
    string WebServiceFilterUserControlNameSpace   = GetModelNameSpace(Model, WebServiceFilterUserControlFolder);

    string WebServiceFilterItemUserControlXamlFolder      = "00234-WebServiceFilterItemUserControl.xaml";
    string WebServiceFilterItemUserControlXamlClassName   = GetModelClassName(Model, WebServiceFilterItemUserControlXamlFolder);
    string WebServiceFilterItemUserControlXamlNameSpace   = GetModelNameSpace(Model, WebServiceFilterItemUserControlXamlFolder);
    string WebServiceFilterItemUserControlXamlProject     = GetModelProjectName(Model, WebServiceFilterItemUserControlXamlFolder);

    string foregroundHelperModelFolder      = "00130-ForegroundHelper.cs";
    string foregroundHelperModelClassName   = GetModelClassName(Model, foregroundHelperModelFolder);
    string foregroundHelperModelNameSpace   = GetModelNameSpace(Model, foregroundHelperModelFolder);
    string foregroundHelperModelProject     = GetModelProjectName(Model, foregroundHelperModelFolder);

    string FillHelperModelFolder      = "00160-FillHelper.cs";
    string FillHelperModelClassName   = GetModelClassName(Model, FillHelperModelFolder);
    string FillHelperModelNameSpace   = GetModelNameSpace(Model, FillHelperModelFolder);
    string FillHelperModelProject     = GetModelProjectName(Model, FillHelperModelFolder);


    string pathHelperModelFolder      = "00120-PathHelper.cs";
    string pathHelperModelClassName   = GetModelClassName(Model, pathHelperModelFolder);
    string pathHelperModelNameSpace   = GetModelNameSpace(Model, pathHelperModelFolder);
    string pathHelperModelProject     = GetModelProjectName(Model, pathHelperModelFolder);


    string WebServiceFilterUserControlXamlFolder      = "00244-WebServiceFilterUserControl.xaml";
    string WebServiceFilterUserControlXamlClassName   = GetModelClassName(Model, WebServiceFilterUserControlXamlFolder);
    string WebServiceFilterUserControlXamlNameSpace   = GetModelNameSpace(Model, WebServiceFilterUserControlXamlFolder);
    string WebServiceFilterUserControlXamlProject     = GetModelProjectName(Model, WebServiceFilterItemUserControlXamlFolder);
    
    string FilterDefinitionsPropertyName = "FilterDefinitions";
    string FilterOperatorsPropertyName = "FilterOperators";
    string FiltersPropertyName = "Filters";
    string ModelPropertyName = "Model";
    string RemoveFilterBtnClickedCommandPropertyName = "RemoveFilterBtnClickedCommand";
    string ContainerMenuItemClickedCommandPropertyName = "ContainerMenuItemClickedCommand";
    string ContainerMenuItemClickedCommandAsEventPropertyName = "ContainerMenuItemClickedCommandAsEvent";
    string ContainerMenuItemsPropertyName = "ContainerMenuItems";
    string ApplyFilterBtnClickedCommandPropertyName = "ApplyFilterBtnClickedCommand";
    string RemoveAllFiltersBtnClickedCommandPropertyName = "RemoveAllFiltersBtnClickedCommand";
    string AddFilterBtnVisibilityPropertyName = "AddFilterBtnVisibility";
    string AddFilterBtnClickedCommandPropertyName = "AddFilterBtnClickedCommand";
    string BackBtnClickedCommandPropertyName = "BackBtnClickedCommand";
    string ShowBackBtnVisibilityPropertyName = "ShowBackBtnVisibility";
    string CaptionPropertyName = "Caption";

    string fltitmPrefix = "clr-namespace:"+ WebServiceFilterItemUserControlXamlNameSpace;
    if(WebServiceFilterItemUserControlXamlProject != WebServiceFilterUserControlXamlProject) {
        fltitmPrefix = fltitmPrefix + ";assembly=" + WebServiceFilterItemUserControlXamlProject;
    }
    string frgrndPrefix = "clr-namespace:" + foregroundHelperModelNameSpace;
    if(foregroundHelperModelProject != WebServiceFilterUserControlXamlProject) {
        frgrndPrefix = frgrndPrefix + ";assembly=" + foregroundHelperModelProject;
    }
    string pthPrefix = "clr-namespace:" + pathHelperModelNameSpace;
    if(pathHelperModelProject != WebServiceFilterUserControlXamlProject) {
        pthPrefix = pthPrefix + ";assembly=" + pathHelperModelProject;
    }
    string fllPrefix = "clr-namespace:" + FillHelperModelNameSpace;
    if(FillHelperModelProject != WebServiceFilterUserControlXamlProject) {
        fllPrefix = fllPrefix + ";assembly=" + foregroundHelperModelProject;
    }


#>

<UserControl x:Class="<#= WebServiceFilterUserControlNameSpace #>.<#= WebServiceFilterUserControlClassName #>"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="clr-namespace:Microsoft.Xaml.Behaviors;assembly=Microsoft.Xaml.Behaviors"
             xmlns:fltitm="<#= fltitmPrefix #>"
             xmlns:pth="<#= pthPrefix #>"
             xmlns:fll="<#= fllPrefix #>"

             mc:Ignorable="d" 
             d:DesignHeight="250" d:DesignWidth="600">
    <!-- <UserControl.Resources>
        <ResourceDictionary Source="pack://application:,,,/CommonWpfControlLibrary;component/Themes/BasicResourceDictionary.xaml"/>
    </UserControl.Resources> -->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Label FontWeight="Bold" Grid.Column="0" Margin="24 0 0 0" Content="{Binding <#= CaptionPropertyName #>}"/>
            <Button Grid.Column="2" Margin="0 0 24 0" BorderBrush="{x:Null}" Background="{x:Null}"
                        KeyboardNavigation.TabNavigation ="None" ToolTip="Navigate back"
                        Visibility="{Binding <#= ShowBackBtnVisibilityPropertyName #>}"
                        Command="{Binding <#= BackBtnClickedCommandPropertyName #>}">
                <Viewbox   Height="16" Width="16" FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}}" HorizontalAlignment="Center" VerticalAlignment="Center" >
                    <Canvas  Height="24" Width="24" >
                        <Path  Data="{DynamicResource ArrowLeftCircle}" Fill="{DynamicResource Primary}" />
                    </Canvas>
                </Viewbox>
            </Button>



            <StackPanel Grid.Column="3" Orientation="Horizontal" Margin="0 0 8 0">
                <Button BorderBrush="{x:Null}" Background="{x:Null}"
                        KeyboardNavigation.TabNavigation ="None" ToolTip="Add Filter Item"
                        Visibility="{Binding <#= AddFilterBtnVisibilityPropertyName #>}"
                                Command="{Binding <#= AddFilterBtnClickedCommandPropertyName #>}">
                    <Viewbox   Height="16" Width="16" FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}}" HorizontalAlignment="Center" VerticalAlignment="Center" >
                        <Canvas  Height="24" Width="24" >
                            <Path  Data="{DynamicResource FilterPlus}" Fill="{DynamicResource Primary}" />
                        </Canvas>
                    </Viewbox>
                </Button>
                <Button BorderBrush="{x:Null}" Background="{x:Null}"
                        KeyboardNavigation.TabNavigation ="None" ToolTip="Remove All Filter Items"
                        Visibility="{Binding <#= AddFilterBtnVisibilityPropertyName #>}"
                        Command="{Binding <#= RemoveAllFiltersBtnClickedCommandPropertyName #>}"
                        >
                    <Viewbox   Height="16" Width="16" FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}}" HorizontalAlignment="Center" VerticalAlignment="Center" >
                        <Canvas  Height="24" Width="24" >
                            <Path  Data="{DynamicResource FilterRemove}" Fill="{DynamicResource Danger}" />
                        </Canvas>
                    </Viewbox>
                </Button>
                <Separator Margin="0 0 8 0"/>
                <Button Margin="0 0 8 0" BorderBrush="{x:Null}" Background="{x:Null}"
                                KeyboardNavigation.TabNavigation ="None" ToolTip="Query data"
                                Command="{Binding <#= ApplyFilterBtnClickedCommandPropertyName #>}">
                    <Viewbox   Height="16" Width="16" FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}}" HorizontalAlignment="Center" VerticalAlignment="Center" >
                        <Canvas  Height="24" Width="24" >
                            <Path  Data="{DynamicResource Refresh}" Fill="{DynamicResource Primary}" />
                        </Canvas>
                    </Viewbox>
                </Button>
            </StackPanel>
            <ItemsControl Grid.Column="4" ItemsSource="{Binding <#= ContainerMenuItemsPropertyName #>}" Margin="0 0 8 0" >
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Button ToolTip="{Binding Caption}" BorderBrush="{x:Null}" Background="{x:Null}" IsEnabled="{Binding Enabled}"
                                Command="{Binding Path=DataContext.<#= ContainerMenuItemClickedCommandPropertyName #>, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                CommandParameter="{Binding}">
                            <Viewbox   Height="16" Width="16" FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}}" HorizontalAlignment="Center" VerticalAlignment="Center" >
                                <Canvas  Height="24" Width="24" >
                                    <Path  pth:<#= pathHelperModelClassName #>.DataResourceKey="{Binding IconName}" fll:FillHelper.FillResourceKey="{Binding IconColor}" />
                                </Canvas>
                            </Viewbox>
                        </Button>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

        </Grid>
        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" >
            <ItemsControl ItemsSource="{Binding <#= FiltersPropertyName #>}"  >
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <fltitm:<#= WebServiceFilterItemUserControlXamlClassName #>
                            <#= FilterOperatorsPropertyName #>="{Binding Path=DataContext.<#= FilterOperatorsPropertyName #>, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                            <#= FilterDefinitionsPropertyName #>="{Binding Path=DataContext.<#= FilterDefinitionsPropertyName #>, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                            <#= ModelPropertyName #>="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="RemoveNotification">
                                    <i:InvokeCommandAction Command="{Binding Path=DataContext.<#= RemoveFilterBtnClickedCommandPropertyName #>, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </fltitm:<#= WebServiceFilterItemUserControlXamlClassName #>>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>
    </Grid>
</UserControl>


<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>