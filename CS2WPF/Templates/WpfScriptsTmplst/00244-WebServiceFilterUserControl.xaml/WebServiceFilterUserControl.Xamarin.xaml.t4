<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="xaml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string gridFlexModelFolder      = "00100-GridFlex.cs";
    string gridFlexModelClassName   = GetModelClassName(Model, gridFlexModelFolder);
    string gridFlexModelNameSpace   = GetModelNameSpace(Model, gridFlexModelFolder);
    string gridFlexModelProject     = GetModelProjectName(Model, gridFlexModelFolder);

    string InternalContentChangedFolder     = "00102-InternalContentChanged.cs";
    string InternalContentChangedClassName  = GetModelClassName(Model, InternalContentChangedFolder);
    string InternalContentChangedNameSpace  = GetModelNameSpace(Model, InternalContentChangedFolder);
    string InternalContentChangedProject    = GetModelProjectName(Model, InternalContentChangedFolder);

    string MaxScrollViewHeightFolder        = "00104-MaxScrollViewHeight.cs";
    string MaxScrollViewHeightClassName     = GetModelClassName(Model, MaxScrollViewHeightFolder);
    string MaxScrollViewHeightNameSpace     = GetModelNameSpace(Model, MaxScrollViewHeightFolder);
    string MaxScrollViewHeightProject       = GetModelProjectName(Model, MaxScrollViewHeightFolder);

    string ButtonDestroyedFolder      = "00188-ButtonDestroyed.cs";
    string ButtonDestroyedClassName   = GetModelClassName(Model, ButtonDestroyedFolder);
    string ButtonDestroyedNameSpace   = GetModelNameSpace(Model, ButtonDestroyedFolder);
    string ButtonDestroyedProject     = GetModelProjectName(Model, ButtonDestroyedFolder);



    string WebServiceFilterItemUserControlXamlFolder      = "00234-WebServiceFilterItemUserControl.xaml";
    string WebServiceFilterItemUserControlXamlClassName   = GetModelClassName(Model, WebServiceFilterItemUserControlXamlFolder);
    string WebServiceFilterItemUserControlXamlNameSpace   = GetModelNameSpace(Model, WebServiceFilterItemUserControlXamlFolder);
    string WebServiceFilterItemUserControlXamlProject     = GetModelProjectName(Model, WebServiceFilterItemUserControlXamlFolder);

    string foregroundHelperModelFolder      = "00130-ForegroundHelper.cs";
    string foregroundHelperModelClassName   = GetModelClassName(Model, foregroundHelperModelFolder);
    string foregroundHelperModelNameSpace   = GetModelNameSpace(Model, foregroundHelperModelFolder);
    string foregroundHelperModelProject     = GetModelProjectName(Model, foregroundHelperModelFolder);

    string FillHelperModelFolder      = "00160-FillHelper.cs";
    string FillHelperModelClassName   = GetModelClassName(Model, FillHelperModelFolder);
    string FillHelperModelNameSpace   = GetModelNameSpace(Model, FillHelperModelFolder);
    string FillHelperModelProject     = GetModelProjectName(Model, FillHelperModelFolder);


    string pathHelperModelFolder      = "00120-PathHelper.cs";
    string pathHelperModelClassName   = GetModelClassName(Model, pathHelperModelFolder);
    string pathHelperModelNameSpace   = GetModelNameSpace(Model, pathHelperModelFolder);
    string pathHelperModelProject     = GetModelProjectName(Model, pathHelperModelFolder);

    string IconFontFolder      = "00178-IconFont.cs";
    string IconFontClassName   = GetModelClassName(Model, IconFontFolder);
    string IconFontNameSpace   = GetModelNameSpace(Model, IconFontFolder);
    string IconFontNameProject = GetModelProjectName(Model, IconFontFolder);


    string WebServiceFilterUserControlFolder      = "00242-WebServiceFilterUserControl.xaml.cs";
    string WebServiceFilterUserControlClassName   = GetModelClassName(Model, WebServiceFilterUserControlFolder);
    string WebServiceFilterUserControlNameSpace   = GetModelNameSpace(Model, WebServiceFilterUserControlFolder);

    string WebServiceFilterUserControlXamlFolder      = "00244-WebServiceFilterUserControl.xaml";
    string WebServiceFilterUserControlXamlClassName   = GetModelClassName(Model, WebServiceFilterUserControlXamlFolder);
    string WebServiceFilterUserControlXamlNameSpace   = GetModelNameSpace(Model, WebServiceFilterUserControlXamlFolder);
    string WebServiceFilterUserControlXamlProject     = GetModelProjectName(Model, WebServiceFilterItemUserControlXamlFolder);
    
    string CaptionPropertyName = "Caption";
    string FilterHeightPropertyName = "FilterHeight";
    string HiddenFiltersPropertyName = "HiddenFilters";
    string FiltersPropertyName = "Filters";
    string FilterOperatorsPropertyName = "FilterOperators";
    string FilterDefinitionsPropertyName = "FilterDefinitions";
    string ShowBackBtnPropertyName = "ShowBackBtn";
    string ShowAddFilterBtnPropertyName = "ShowAddFilterBtn";
    string ContainerMenuItemsPropertyName = "ContainerMenuItems";
    string CurrentContainerMenuItemsPropertyName = "CurrentContainerMenuItems";
    string ApplyFilterBtnClickedCommandPropertyName = "ApplyFilterBtnClickedCommand";
    string SelectedFilterDataTypePropertyName = "SelectedFilterDataType";
    string SelectedFilterNamePropertyName = "SelectedFilterName";
    string SelectedFilterOperatorPropertyName = "SelectedFilterOperator";
    string SelectedFilterOperatorNamePropertyName = "SelectedFilterOperatorName";
    string FilterValuePropertyName = "FilterValue";
    string FilterErrorPropertyName = "FilterError";
    string RemoveNotificationPropertyName = "RemoveNotification";
    string SelectedModelRefPropertyName = "SelectedModelRef";

    //////////////////////////////// 
    string RemoveWebServiceFilterItemCommandPropertyName = "RemoveWebServiceFilterItemCommand";
    string RemoveAllWebServiceFilterItemCommandPropertyName = "RemoveAllWebServiceFilterItemCommand";
    string NavigationBackCommandPropertyName = "NavigationBackCommand";
    string OnNavigationBackCommandPropertyName = "OnNavigationBackCommand";
    string OnFilterCommandPropertyName = "OnFilterCommand";
    string OnAddWebServiceFilterItemCommandPropertyName = "OnAddWebServiceFilterItemCommand";
    string OnRemoveAllWebServiceFilterItemCommandPropertyName = "OnRemoveAllWebServiceFilterItemCommand";
    string OnRemoveWebServiceFilterItemCommandPropertyName = "OnRemoveWebServiceFilterItemCommand";
    string OnContainerMenuItemsCommandPropertyName = "OnContainerMenuItemsCommand";
    ////////////////////////////////
    string InternalContentProperty          = "InternalContent";
    string MaxHeightProperty                = "MaxHeight";
    string IsDestroyedPropertyName          = "IsDestroyed";


    string IconFontPrefix = "clr-namespace:" + IconFontNameSpace;
    if(IconFontNameProject != WebServiceFilterItemUserControlXamlProject) {
        IconFontPrefix = IconFontPrefix + ";assembly=" + IconFontNameProject;
    }
    string fltitmPrefix = "clr-namespace:"+ WebServiceFilterItemUserControlXamlNameSpace;
    if(WebServiceFilterItemUserControlXamlProject != WebServiceFilterUserControlXamlProject) {
        fltitmPrefix = fltitmPrefix + ";assembly=" + WebServiceFilterItemUserControlXamlProject;
    }
    string frgrndPrefix = "clr-namespace:" + foregroundHelperModelNameSpace;
    if(foregroundHelperModelProject != WebServiceFilterUserControlXamlProject) {
        frgrndPrefix = frgrndPrefix + ";assembly=" + foregroundHelperModelProject;
    }
    string pthPrefix = "clr-namespace:" + pathHelperModelNameSpace;
    if(pathHelperModelProject != WebServiceFilterUserControlXamlProject) {
        pthPrefix = pthPrefix + ";assembly=" + pathHelperModelProject;
    }
    string fllPrefix = "clr-namespace:" + FillHelperModelNameSpace;
    if(FillHelperModelProject != WebServiceFilterUserControlXamlProject) {
        fllPrefix = fllPrefix + ";assembly=" + foregroundHelperModelProject;
    }
    string gridflexPrefix = "clr-namespace:" + gridFlexModelNameSpace;
    if(gridFlexModelProject != WebServiceFilterItemUserControlXamlProject) {
        gridflexPrefix = gridflexPrefix + ";assembly=" + gridFlexModelProject;
    }
    string InternalContentPrefix = "clr-namespace:" + InternalContentChangedNameSpace;
    if(InternalContentChangedProject != WebServiceFilterItemUserControlXamlProject) {
        InternalContentPrefix = InternalContentPrefix + ";assembly=" + InternalContentChangedProject;
    }
    string MaxScrollViewHeightPrefix = "clr-namespace:" + MaxScrollViewHeightNameSpace;
    if(MaxScrollViewHeightProject != WebServiceFilterItemUserControlXamlProject) {
        MaxScrollViewHeightPrefix = MaxScrollViewHeightPrefix + ";assembly=" + MaxScrollViewHeightProject;
    }
    string ButtonDestroyedPrefix = "clr-namespace:" + ButtonDestroyedNameSpace;
    if(ButtonDestroyedProject != WebServiceFilterItemUserControlXamlProject) {
        ButtonDestroyedPrefix = ButtonDestroyedPrefix + ";assembly=" + ButtonDestroyedProject;
    }


    
#>
<?xml version="1.0" encoding="UTF-8"?>
<ContentView x:Class="<#= WebServiceFilterUserControlNameSpace #>.<#= WebServiceFilterUserControlClassName #>"
             xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:fltitm="<#= fltitmPrefix #>"
             xmlns:gridflex="<#= gridflexPrefix #>"
             xmlns:fontIcons="<#= IconFontPrefix #>"
             xmlns:intcntxt="<#= InternalContentPrefix #>"
             xmlns:maxscrlvw="<#= MaxScrollViewHeightPrefix #>"
             xmlns:btnDstr="<#= ButtonDestroyedPrefix #>"
             x:Name="fltrUsrCntrlRootNode">
    <StackLayout Orientation="Vertical">
        <Grid gridflex:<#= gridFlexModelClassName #>.HorizontalFlex="true"
            RowDefinitions="Auto,Auto" ColumnDefinitions="*" >
            <Label Grid.Row="0" Grid.Column="0"
                Margin="8, 0, 0, 0"  Text="{Binding Path=<#= CaptionPropertyName #>, Source={x:Reference fltrUsrCntrlRootNode}}" FontAttributes="Bold"/>
            <ScrollView Grid.Row="1" Grid.Column="0"
                Orientation="Horizontal" VerticalScrollBarVisibility="Never" HorizontalScrollBarVisibility="Default" HorizontalOptions="End">
                <StackLayout Orientation="Horizontal">
                    <btnDstr:<#= ButtonDestroyedClassName #> WidthRequest="40" 
                            <#= IsDestroyedPropertyName #>="{Binding <#= IsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference fltrUsrCntrlRootNode}}"
                            IsVisible="{Binding Path=<#= ShowBackBtnPropertyName #>, Mode=OneWay, Source={x:Reference fltrUsrCntrlRootNode}}"
                            Command="{Binding Path=<#= OnNavigationBackCommandPropertyName #>, Mode=OneTime, Source={x:Reference fltrUsrCntrlRootNode}}"
                            Text="{x:Static fontIcons:IconFont.Arrow_back}" FontFamily="CustomIconFontAlias" BackgroundColor="{DynamicResource IconButtonBackgroundColor}" 
                            TextColor="{DynamicResource IconButtonPrimaryColor}" 
                            FontSize="{OnPlatform iOS=Large, Android=Medium, UWP=Medium}"/>
                    <btnDstr:<#= ButtonDestroyedClassName #> WidthRequest="40"
                        <#= IsDestroyedPropertyName #>="{Binding <#= IsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference fltrUsrCntrlRootNode}}"
                        IsVisible="{Binding Path=<#= ShowAddFilterBtnPropertyName #>, Mode=OneWay, Source={x:Reference fltrUsrCntrlRootNode}}"
                        Command="{Binding Path=<#= OnAddWebServiceFilterItemCommandPropertyName #>, Mode=OneTime, Source={x:Reference fltrUsrCntrlRootNode}}"
                        Text="{x:Static fontIcons:IconFont.Filter_9_plus}" FontFamily="CustomIconFontAlias" BackgroundColor="{DynamicResource IconButtonBackgroundColor}" 
                        TextColor="{DynamicResource IconButtonPrimaryColor}" 
                        FontSize="{OnPlatform iOS=Large, Android=Medium, UWP=Medium}"/>
                    <btnDstr:<#= ButtonDestroyedClassName #> WidthRequest="40"
                        <#= IsDestroyedPropertyName #>="{Binding <#= IsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference fltrUsrCntrlRootNode}}"
                        IsVisible="{Binding Path=<#= ShowAddFilterBtnPropertyName #>, Mode=OneWay, Source={x:Reference fltrUsrCntrlRootNode}}"
                        Command="{Binding Path=<#= OnRemoveAllWebServiceFilterItemCommandPropertyName #>, Mode=OneTime, Source={x:Reference fltrUsrCntrlRootNode}}"
                        Text="{x:Static fontIcons:IconFont.Filter_none}" FontFamily="CustomIconFontAlias" BackgroundColor="{DynamicResource IconButtonBackgroundColor}" 
                        TextColor="{DynamicResource IconButtonDangerColor}" 
                        FontSize="{OnPlatform iOS=Large, Android=Medium, UWP=Medium}"/>
                    <btnDstr:<#= ButtonDestroyedClassName #> WidthRequest="40"
                        <#= IsDestroyedPropertyName #>="{Binding <#= IsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference fltrUsrCntrlRootNode}}"
                        Command="{Binding Path=<#= OnFilterCommandPropertyName #>, Mode=OneTime, Source={x:Reference fltrUsrCntrlRootNode}}"
                        Text="{x:Static fontIcons:IconFont.Refresh}" FontFamily="CustomIconFontAlias" BackgroundColor="{DynamicResource IconButtonBackgroundColor}" 
                        TextColor="{DynamicResource IconButtonPrimaryColor}" 
                        FontSize="{OnPlatform iOS=Large, Android=Large, UWP=Medium}"/>
                    <StackLayout Orientation="Horizontal" 
                                 BindableLayout.ItemsSource="{Binding <#= CurrentContainerMenuItemsPropertyName #>, Source={x:Reference fltrUsrCntrlRootNode}}">
                        <BindableLayout.ItemTemplate>
                            <DataTemplate>
                                <btnDstr:<#= ButtonDestroyedClassName #> WidthRequest="40"
                                    <#= IsDestroyedPropertyName #>="{Binding <#= IsDestroyedPropertyName #>, Mode=OneWay}"
                                    Command="{Binding <#= OnContainerMenuItemsCommandPropertyName #>, Mode=OneTime, Source={x:Reference fltrUsrCntrlRootNode}}"
                                    CommandParameter="{Binding ., Mode=OneTime}"
                                    IsEnabled="{Binding Enabled}"
                                    Text="{Binding IconName}" 
                                    FontFamily="CustomIconFontAlias" 
                                    BackgroundColor="{DynamicResource IconButtonBackgroundColor}" 
                                    TextColor="{Binding IconColor}" 
                                    FontSize="{OnPlatform iOS=Large, Android=Medium, UWP=Medium }"/>
                            </DataTemplate>
                        </BindableLayout.ItemTemplate>
                    </StackLayout>
                </StackLayout>
            </ScrollView>
        </Grid>
        <ScrollView Orientation="Vertical" VerticalScrollBarVisibility="Default" 
                    intcntxt:<#= InternalContentChangedClassName #>.<#= InternalContentProperty #>="{Binding <#= InternalContentProperty #>, Source={x:Reference fltrUsrCntrlRootNode}}"
                    maxscrlvw:<#= MaxScrollViewHeightClassName #>.<#= MaxHeightProperty #>="{Binding FilterHeight, Source={x:Reference fltrUsrCntrlRootNode}}">
            <StackLayout BindableLayout.ItemsSource="{Binding <#= FiltersPropertyName #>, Source={x:Reference fltrUsrCntrlRootNode}}" >
                <BindableLayout.ItemTemplate>
                    <DataTemplate>
<!-- <#= IsDestroyedPropertyName #> must be the first -->
                        <fltitm:WebServiceFilterItemUserControl
                            <#= IsDestroyedPropertyName #>="{Binding <#= IsDestroyedPropertyName #>, Mode=OneWay}"
                            <#= FilterOperatorsPropertyName #>="{Binding <#= FilterOperatorsPropertyName #>, Source={x:Reference fltrUsrCntrlRootNode}}" 
                            <#= FilterDefinitionsPropertyName #>="{Binding <#= FilterDefinitionsPropertyName #>, Source={x:Reference fltrUsrCntrlRootNode}}"
                            <#= FilterErrorPropertyName #>="{Binding fltrError, Mode=OneWayToSource}"
                            <#= FilterValuePropertyName #>="{Binding fltrValue, Mode=OneWayToSource}"
                            <#= SelectedFilterOperatorNamePropertyName #>="{Binding fltrOperator, Mode=OneWayToSource}"
                            <#= SelectedFilterDataTypePropertyName #>="{Binding fltrDataType, Mode=OneWayToSource}"
                            <#= SelectedFilterNamePropertyName #>="{Binding fltrName, Mode=OneWayToSource}"
                            <#= RemoveWebServiceFilterItemCommandPropertyName #>="{Binding <#= OnRemoveWebServiceFilterItemCommandPropertyName #>, Source={x:Reference fltrUsrCntrlRootNode}}"
                            SelectedModelRef="{Binding}" />
                    </DataTemplate>
                </BindableLayout.ItemTemplate>
            </StackLayout>
        </ScrollView>
    </StackLayout>
</ContentView>


<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>