<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="xaml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#



    string ColumnSelectorUserControlFolder            = "00264-ColumnSelectorUserControl.xaml.cs";
    string ColumnSelectorUserControlClassName         = GetModelClassName(Model, ColumnSelectorUserControlFolder);
    string ColumnSelectorUserControlNameSpace         = GetModelNameSpace(Model, ColumnSelectorUserControlFolder);


    string ColumnSelectorUserControlXamlFolder      = "00265-ColumnSelectorUserControl.xaml";
    string ColumnSelectorUserControlXamlClassName   = GetModelClassName(Model, ColumnSelectorUserControlXamlFolder);
    string ColumnSelectorUserControlXamlNameSpace   = GetModelNameSpace(Model, ColumnSelectorUserControlXamlFolder);
    string ColumnSelectorUserControlXamlProject     = GetModelProjectName(Model, ColumnSelectorUserControlXamlFolder);
    
    string ColumnsPropertyName = "Columns";
    string IsCheckedPropertyName = "IsChecked";
    string CaptionPropertyName = "Caption";

#>
<ContentView x:Class="<#= ColumnSelectorUserControlNameSpace #>.<#= ColumnSelectorUserControlClassName #>"
             xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Name="clmnSlctUsrCntrlRootNode">
    <ScrollView  Orientation="Vertical" VerticalScrollBarVisibility="Default"  Margin="8, 0, 8, 0">
        <StackLayout BindableLayout.ItemsSource="{Binding <#= ColumnsPropertyName #>, Source={x:Reference clmnSlctUsrCntrlRootNode}}" Orientation="Vertical">
            <BindableLayout.ItemTemplate>
                <DataTemplate>
                    <FlexLayout Direction="Row" Wrap="Wrap" JustifyContent="Start" >
                        <CheckBox IsChecked="{Binding <#= IsCheckedPropertyName #>, Mode=TwoWay}"/>
                        <Label Text="{Binding <#= CaptionPropertyName #>}"/>
                    </FlexLayout>
                </DataTemplate>
            </BindableLayout.ItemTemplate>
        </StackLayout>
    </ScrollView>
</ContentView>


<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>