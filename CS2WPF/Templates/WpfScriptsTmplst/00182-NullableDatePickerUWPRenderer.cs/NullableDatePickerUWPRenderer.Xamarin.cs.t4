<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System.ComponentModel;
using Windows.UI.Xaml.Controls;
using Xamarin.Forms;
using Xamarin.Forms.Platform.UWP;
<#

    string NullableDatePickerFolder      = "00180-NullableDatePicker.cs";
    string NullableDatePickerClassName   = GetModelClassName(Model, NullableDatePickerFolder);
    string NullableDatePickerNameSpace   = GetModelNameSpace(Model, NullableDatePickerFolder);

    string NullableDatePickerUWPRendererFolder      = "00182-NullableDatePickerUWPRenderer.cs";
    string NullableDatePickerUWPRendererClassName   = GetModelClassName(Model, NullableDatePickerUWPRendererFolder);
    string NullableDatePickerUWPRendererNameSpace   = GetModelNameSpace(Model, NullableDatePickerUWPRendererFolder);
    
#>
using <#= NullableDatePickerNameSpace #>;
using <#= NullableDatePickerUWPRendererNameSpace #>;

[assembly: ExportRenderer(typeof(<#= NullableDatePickerClassName #>), typeof(<#= NullableDatePickerUWPRendererClassName #>))]
namespace <#= NullableDatePickerUWPRendererNameSpace #> {
    public class <#= NullableDatePickerUWPRendererClassName #>: ViewRenderer<<#= NullableDatePickerClassName #>, Windows.UI.Xaml.Controls.Grid>
    {
        private CalendarDatePicker datePicker;
        private Windows.UI.Xaml.Controls.Button cancelButton;
        private Windows.UI.Xaml.Controls.Grid calendarView;

        protected override void OnElementChanged(ElementChangedEventArgs<<#= NullableDatePickerClassName #>> e)
        {
            base.OnElementChanged(e);
            if (e.NewElement != null && Control == null)
            {
                this.datePicker = new CalendarDatePicker();
                this.datePicker.MinDate = this.Element.MinimumDate;
                this.datePicker.MaxDate = this.Element.MaximumDate;
                this.datePicker.Date = this.Element.NullableDate;
                this.datePicker.HorizontalAlignment = Windows.UI.Xaml.HorizontalAlignment.Stretch;
                this.datePicker.DateChanged += DatePicker_DateChanged;
                this.cancelButton = new Windows.UI.Xaml.Controls.Button()
                {
                    Content = new SymbolIcon(Symbol.Cancel),
                    Margin = new Windows.UI.Xaml.Thickness(0),
                    Background = new Windows.UI.Xaml.Media.SolidColorBrush(Windows.UI.Colors.Transparent),
                    Command = new Command(
                        () => this.datePicker.Date = null,
                        () => this.datePicker.Date != null)
                };
                this.calendarView = new Windows.UI.Xaml.Controls.Grid() 
                { 
                    ColumnSpacing=0
                };
                this.calendarView.SizeChanged += CalendarView_SizeChanged;
                this.calendarView.ColumnDefinitions.Add(new Windows.UI.Xaml.Controls.ColumnDefinition()
                {
                    Width = new Windows.UI.Xaml.GridLength(1, Windows.UI.Xaml.GridUnitType.Star)
                });
                this.calendarView.ColumnDefinitions.Add(new Windows.UI.Xaml.Controls.ColumnDefinition()
                {
                    Width = new Windows.UI.Xaml.GridLength(0, Windows.UI.Xaml.GridUnitType.Auto)
                });
                this.calendarView.Children.Add(this.cancelButton);
                Windows.UI.Xaml.Controls.Grid.SetColumn(this.cancelButton, 1);
                this.calendarView.Children.Add(this.datePicker);
                Windows.UI.Xaml.Controls.Grid.SetColumn(this.datePicker, 0);
                this.SetNativeControl(this.calendarView);
            }
        }

        protected override void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == <#= NullableDatePickerClassName #>.NullableDateProperty.PropertyName) {
                var entry = (<#= NullableDatePickerClassName #>)this.Element;
                if (entry != null)
                {
                    this.datePicker.Date = entry.NullableDate;
                }

            }
            if (e.PropertyName == Xamarin.Forms.DatePicker.FormatProperty.PropertyName)
            {
                var entry = (<#= NullableDatePickerClassName #>)this.Element;
                ((Command)cancelButton.Command).ChangeCanExecute();

                if (this.Element.Format == entry.PlaceHolder)
                {
                    this.datePicker.PlaceholderText = entry.PlaceHolder;
                    return;
                }
            }

            base.OnElementPropertyChanged(sender, e);
        }

        private void DatePicker_DateChanged(CalendarDatePicker sender, CalendarDatePickerDateChangedEventArgs args)
        {
            if (this.Element != null)
            {
                this.Element.NullableDate = args.NewDate?.Date;
            }
        }

        private void CalendarView_SizeChanged(object sender, Windows.UI.Xaml.SizeChangedEventArgs e)
        {
            if (this.Element != null)
            {
                // NOTE: Depending on the placeholder text, the width needed for the calendar view may be different
                this.Element.WidthRequest = e.NewSize.Width;
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (Control != null)
            {
                this.datePicker.DateChanged -= DatePicker_DateChanged;
                this.datePicker = null;
                this.cancelButton = null;
                this.calendarView = null;
            }

            base.Dispose(disposing);
        }
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>