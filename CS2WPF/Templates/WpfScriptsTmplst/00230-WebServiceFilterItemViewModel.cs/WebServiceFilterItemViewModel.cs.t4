<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;
<#

    string convertHelperModelFolder                 = "00150-ConvertHelper.cs";
    string convertHelperModelClassName              = GetModelClassName(Model, convertHelperModelFolder);
    string convertHelperModelNameSpace              = GetModelNameSpace(Model, convertHelperModelFolder);

    string IWebServiceFilterDefInterfaceFolder      = "00200-IWebServiceFilterDefInterface.cs";
    string IWebServiceFilterDefInterfaceClassName   = GetModelClassName(Model, IWebServiceFilterDefInterfaceFolder);
    string IWebServiceFilterDefInterfaceNameSpace   = GetModelNameSpace(Model, IWebServiceFilterDefInterfaceFolder);

    string IWebServiceFilterOperatorInterfaceFolder      = "00202-IWebServiceFilterOperatorInterface.cs";
    string IWebServiceFilterOperatorInterfaceClassName   = GetModelClassName(Model, IWebServiceFilterOperatorInterfaceFolder);
    string IWebServiceFilterOperatorInterfaceNameSpace   = GetModelNameSpace(Model, IWebServiceFilterOperatorInterfaceFolder);

    string IWebServiceFilterRsltInterfaceFolder      = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName   = GetModelClassName(Model, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace   = GetModelNameSpace(Model, IWebServiceFilterRsltInterfaceFolder);

    string NotificationEventArgsFolder      = "00228-NotificationEventArgs.cs";
    string NotificationEventArgsClassName   = GetModelClassName(Model, NotificationEventArgsFolder);
    string NotificationEventArgsNameSpace   = GetModelNameSpace(Model, NotificationEventArgsFolder);

    string commandHelperModelFolder      = "00140-CommandHelper.cs";
    string commandHelperModelClassName   = GetModelClassName(Model, commandHelperModelFolder);
    string commandHelperModelNameSpace   = GetModelNameSpace(Model, commandHelperModelFolder);
    
    string IWebServiceFilterItemViewModelInterfaceFolder      = "00229-IWebServiceFilterItemViewModelInterface.cs";
    string IWebServiceFilterItemViewModelInterfaceClassName   = GetModelClassName(Model, IWebServiceFilterItemViewModelInterfaceFolder);
    string IWebServiceFilterItemViewModelInterfaceNameSpace   = GetModelNameSpace(Model, IWebServiceFilterItemViewModelInterfaceFolder);


    string WebServiceFilterItemViewModelFolder      = "00230-WebServiceFilterItemViewModel.cs";
    string WebServiceFilterItemViewModelClassName   = GetModelClassName(Model, WebServiceFilterItemViewModelFolder);
    string WebServiceFilterItemViewModelNameSpace   = GetModelNameSpace(Model, WebServiceFilterItemViewModelFolder);

    string SelectedFilterOperatorPropertyName = "SelectedFilterOperator";
    string SelectedFilterDefinitionPropertyName = "SelectedFilterDefinition";
    string IsReadOnlyPropertyName = "IsReadOnly";
    string IsEditablePropertyName = "IsEditable";
    string IsDateInputPropertyName = "IsDateInput";
    string FilterValuePropertyName = "FilterValue";
    string FilterValuePromptPropertyName = "FilterValuePrompt";
    string FilterValuePromptForegroundPropertyName = "FilterValuePromptForeground";
    string FilterDefinitionsPropertyName = "FilterDefinitions";
    string FilterOperatorsPropertyName = "FilterOperators";
    string ModelPropertyName = "Model";
    string RemoveCommandPropertyName = "RemoveCommand";
    string RemoveCommandAsEventPropertyName = "RemoveCommandAsEvent";

    List<string> nmSpaces = new List<string>();
    if (WebServiceFilterItemViewModelNameSpace != convertHelperModelNameSpace) nmSpaces.Add(convertHelperModelNameSpace);
    if ((WebServiceFilterItemViewModelNameSpace != IWebServiceFilterDefInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterDefInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterDefInterfaceNameSpace);
    if ((WebServiceFilterItemViewModelNameSpace != IWebServiceFilterOperatorInterfaceNameSpace ) && (nmSpaces.IndexOf(IWebServiceFilterOperatorInterfaceNameSpace ) < 0)) 
        nmSpaces.Add(IWebServiceFilterOperatorInterfaceNameSpace );
    if ((WebServiceFilterItemViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace ) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace ) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace );
    if ((WebServiceFilterItemViewModelNameSpace != NotificationEventArgsNameSpace ) && (nmSpaces.IndexOf(NotificationEventArgsNameSpace ) < 0)) 
        nmSpaces.Add(NotificationEventArgsNameSpace );
    if ((WebServiceFilterItemViewModelNameSpace != commandHelperModelNameSpace ) && (nmSpaces.IndexOf(commandHelperModelNameSpace ) < 0)) 
        nmSpaces.Add(commandHelperModelNameSpace );
    if ((WebServiceFilterItemViewModelNameSpace != IWebServiceFilterItemViewModelInterfaceNameSpace ) && (nmSpaces.IndexOf(IWebServiceFilterItemViewModelInterfaceNameSpace ) < 0)) 
        nmSpaces.Add(IWebServiceFilterItemViewModelInterfaceNameSpace );

#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>


namespace <#= WebServiceFilterItemViewModelNameSpace #> {
    public class <#= WebServiceFilterItemViewModelClassName #>: <#= IWebServiceFilterItemViewModelInterfaceClassName #>, INotifyPropertyChanged, IDataErrorInfo
    {
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion
        #region IDataErrorInfo
        string _Error= string.Empty;
        public string Error
        {
            get { 
                return _Error; 
            }
            set
            {
                if(_Error != value)
                {
                    _Error = value;
                    OnPropertyChanged();
                    OnPropertyChanged("<#= FilterValuePromptPropertyName #>");
                    OnPropertyChanged("<#= FilterValuePromptForegroundPropertyName #>");
                    if (_<#=ModelPropertyName#> != null)
                    {
                        _<#=ModelPropertyName#>.fltrError = _Error;
                    }
                }
            }
        }
        public string this[string columnName]
        {
            get
            {
                if ("<#= FilterValuePropertyName #>".Equals(columnName, StringComparison.OrdinalIgnoreCase))
                {
                    if (<#= SelectedFilterDefinitionPropertyName #> == null)
                    {
                        Error = string.Empty;
                    }
                    else if (string.IsNullOrEmpty(<#= SelectedFilterDefinitionPropertyName #>.fltrDataType))
                    {
                        Error = string.Empty;
                    }
                    else
                    {
                        if (<#= FilterValuePropertyName #> == null)
                        {
                            Error = "Empty filter item will not be applied: ";
                        }
                        else if (<#= FilterValuePropertyName #> is string)
                        {
                            string tstvl = <#= FilterValuePropertyName #> as string;
                            bool tstrslt = false;
                            bool maxLn = false;
                            dynamic minVal = null;
                            dynamic maxVal = null;
                            switch (<#= SelectedFilterDefinitionPropertyName #>.fltrDataType)
                            {
                                case "int16":
                                    { Int16 i; tstrslt = Int16.TryParse(tstvl, out i); 
                                        if (tstrslt) {
                                            dynamic k = <#= convertHelperModelClassName #>.TryToConvert("int16", <#= SelectedFilterDefinitionPropertyName #>.fltrMin);
                                            if (k != null) { if (k > i) minVal = k; }
                                            k = <#= convertHelperModelClassName #>.TryToConvert("int16", <#= SelectedFilterDefinitionPropertyName #>.fltrMax);
                                            if (k != null) { if (k < i) maxVal = k; }
                                        } }
                                    break;
                                case "int32":
                                    { Int32 i; tstrslt = Int32.TryParse(tstvl, out i); 
                                        if (tstrslt)
                                        {
                                            dynamic k = <#= convertHelperModelClassName #>.TryToConvert("int32", <#= SelectedFilterDefinitionPropertyName #>.fltrMin);
                                            if (k != null) { if (k > i) minVal = k; }
                                            k = <#= convertHelperModelClassName #>.TryToConvert("int32", <#= SelectedFilterDefinitionPropertyName #>.fltrMax);
                                            if (k != null) { if (k < i) maxVal = k; }
                                        }
                                    }
                                    break;
                                case "int64":
                                    { Int64 i; tstrslt = Int64.TryParse(tstvl, out i); 
                                        if (tstrslt)
                                        {
                                            dynamic k = <#= convertHelperModelClassName #>.TryToConvert("int64", <#= SelectedFilterDefinitionPropertyName #>.fltrMin);
                                            if (k != null) { if (k > i) minVal = k; }
                                            k = <#= convertHelperModelClassName #>.TryToConvert("int64", <#= SelectedFilterDefinitionPropertyName #>.fltrMax);
                                            if (k != null) { if (k < i) maxVal = k; }
                                        }
                                    }
                                    break;
                                case "uint16":
                                    { UInt16 i; tstrslt = UInt16.TryParse(tstvl, out i); 
                                        if (tstrslt)
                                        {
                                            dynamic k = <#= convertHelperModelClassName #>.TryToConvert("uint16", <#= SelectedFilterDefinitionPropertyName #>.fltrMin);
                                            if (k != null) { if (k > i) minVal = k; }
                                            k = <#= convertHelperModelClassName #>.TryToConvert("uint16", <#= SelectedFilterDefinitionPropertyName #>.fltrMax);
                                            if (k != null) { if (k < i) maxVal = k; }
                                        }
                                    }
                                    break;
                                case "uint32":
                                    { UInt32 i; tstrslt = UInt32.TryParse(tstvl, out i); 
                                        if (tstrslt)
                                        {
                                            dynamic k = <#= convertHelperModelClassName #>.TryToConvert("uint32", <#= SelectedFilterDefinitionPropertyName #>.fltrMin);
                                            if (k != null) { if (k > i) minVal = k; }
                                            k = <#= convertHelperModelClassName #>.TryToConvert("uint32", <#= SelectedFilterDefinitionPropertyName #>.fltrMax);
                                            if (k != null) { if (k < i) maxVal = k; }
                                        }
                                    }
                                    break;
                                case "uint64":
                                    { UInt64 i; tstrslt = UInt64.TryParse(tstvl, out i); 
                                        if (tstrslt)
                                        {
                                            dynamic k = <#= convertHelperModelClassName #>.TryToConvert("uint64", <#= SelectedFilterDefinitionPropertyName #>.fltrMin);
                                            if (k != null) { if (k > i) minVal = k; }
                                            k = <#= convertHelperModelClassName #>.TryToConvert("uint64", <#= SelectedFilterDefinitionPropertyName #>.fltrMax);
                                            if (k != null) { if (k < i) maxVal = k; }
                                        }
                                    }
                                    break;
                                case "double":
                                    { double i; tstrslt = double.TryParse(tstvl, out i); 
                                        if (tstrslt)
                                        {
                                            dynamic k = <#= convertHelperModelClassName #>.TryToConvert("double", <#= SelectedFilterDefinitionPropertyName #>.fltrMin);
                                            if (k != null) { if (k > i) minVal = k; }
                                            k = <#= convertHelperModelClassName #>.TryToConvert("double", <#= SelectedFilterDefinitionPropertyName #>.fltrMax);
                                            if (k != null) { if (k < i) maxVal = k; }
                                        }
                                    }
                                    break;
                                case "decimal":
                                    { decimal i; tstrslt = decimal.TryParse(tstvl, out i); 
                                        if (tstrslt)
                                        {
                                            dynamic k = <#= convertHelperModelClassName #>.TryToConvert("decimal", <#= SelectedFilterDefinitionPropertyName #>.fltrMin);
                                            if (k != null) { if (k > i) minVal = k; }
                                            k = <#= convertHelperModelClassName #>.TryToConvert("decimal", <#= SelectedFilterDefinitionPropertyName #>.fltrMax);
                                            if (k != null) { if (k < i) maxVal = k; }
                                        }
                                    }
                                    break;
                                case "single":
                                    { Single i; tstrslt = Single.TryParse(tstvl, out i); 
                                        if (tstrslt)
                                        {
                                            dynamic k = <#= convertHelperModelClassName #>.TryToConvert("single", <#= SelectedFilterDefinitionPropertyName #>.fltrMin);
                                            if (k != null) { if (k > i) minVal = k; }
                                            k = <#= convertHelperModelClassName #>.TryToConvert("single", <#= SelectedFilterDefinitionPropertyName #>.fltrMax);
                                            if (k != null) { if (k < i) maxVal = k; }
                                        }
                                    }
                                    break;
                                case "guid":
                                    { Guid i; tstrslt = Guid.TryParse(tstvl, out i); }
                                    break;
                                case "date":
                                case "datetime":
                                    { DateTime i; tstrslt = DateTime.TryParse(tstvl, out i);
                                        //if (tstrslt)
                                        //{
                                        //    dynamic k = <#= convertHelperModelClassName #>.TryToConvert("datetime", <#= SelectedFilterDefinitionPropertyName #>.fltrMin);
                                        //    if (k != null) { if (k > i) minVal = k; }
                                        //    k = <#= convertHelperModelClassName #>.TryToConvert("datetime", <#= SelectedFilterDefinitionPropertyName #>.fltrMax);
                                        //    if (k != null) { if (k < i) maxVal = k; }
                                        //}
                                    }
                                    break;
                                default:
                                    {
                                        tstrslt = true;
                                        if (<#= SelectedFilterDefinitionPropertyName #>.fltrMaxLen.HasValue) maxLn = tstvl.Length > <#= SelectedFilterDefinitionPropertyName #>.fltrMaxLen.Value; }
                                    break;
                            }
                            if (!tstrslt)
                            {
                                Error = "Filter item will not be applied: incorrect format";
                            } 
                            else if (maxLn)
                            {
                                Error = "Filter item will not be applied: line length is greater than specified";
                            }
                            else
                            {
                                if (minVal != null)
                                    Error = "Filter item will not be applied: the value must be greater than " + minVal;
                                else if (maxVal != null)
                                    Error = "Filter item will not be applied: the value must be less than " + maxVal;
                                else Error = string.Empty;
                            }
                        }
                        else
                        {
                            bool tstrslt = false;
                            switch (<#= SelectedFilterDefinitionPropertyName #>.fltrDataType)
                            {
                                case "date":
                                case "datetime":
                                    tstrslt = <#= FilterValuePropertyName #> is DateTime;
                                    break;
                                default:
                                    tstrslt = true;
                                    break;
                            }
                            if (!tstrslt)
                            {
                                Error = "Filter item will not be applied: incorrect format";
                            }
                            else
                            {
                                Error = string.Empty;
                            }
                        }
                    }
                }
                return Error;
            }
        }
        #endregion
        #region <#= SelectedFilterOperatorPropertyName #>
        string _<#= SelectedFilterOperatorPropertyName #> = "eq";
        public string <#= SelectedFilterOperatorPropertyName #>
        {
            get
            {
                return _<#= SelectedFilterOperatorPropertyName #>;
            }
            set
            {
                if (_<#= SelectedFilterOperatorPropertyName #> != value)
                {
                    _<#= SelectedFilterOperatorPropertyName #> = value;
                    if (_<#=ModelPropertyName#> != null)
                    {
                        _<#=ModelPropertyName#>.fltrOperator = _<#= SelectedFilterOperatorPropertyName #>;
                    }
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= SelectedFilterDefinitionPropertyName #>
        <#= IWebServiceFilterDefInterfaceClassName #> _<#= SelectedFilterDefinitionPropertyName #> = null;
        public <#= IWebServiceFilterDefInterfaceClassName #> <#= SelectedFilterDefinitionPropertyName #>
        {
            get
            {
                return _<#= SelectedFilterDefinitionPropertyName #>;
            }
            set
            {
                if (_<#= SelectedFilterDefinitionPropertyName #> != value)
                {
                    _<#= SelectedFilterDefinitionPropertyName #> = value;
                    bool isRo = true;
                    if (_<#= SelectedFilterDefinitionPropertyName #> != null)
                    {
                        isRo = string.IsNullOrEmpty(_<#= SelectedFilterDefinitionPropertyName #>.fltrName);
                        if (_<#=ModelPropertyName#> != null) 
                        {
                            _<#=ModelPropertyName#>.fltrName = _<#= SelectedFilterDefinitionPropertyName #>.fltrName;
                            _<#=ModelPropertyName#>.fltrDataType = _<#= SelectedFilterDefinitionPropertyName #>.fltrDataType;
                        }

                    }

                    <#= IsReadOnlyPropertyName #> = isRo;
                    <#= FilterValuePropertyName #> = null;
                    OnPropertyChanged();
                    ResetIsDateInput();
                }
            }
        }
        #endregion
        #region <#= IsReadOnlyPropertyName #>
        bool _<#= IsReadOnlyPropertyName #> = true;
        public bool <#= IsReadOnlyPropertyName #>
        {
            get
            {
                return _<#= IsReadOnlyPropertyName #>;
            }
            set
            {
                if (_<#= IsReadOnlyPropertyName #> != value)
                {
                    _<#= IsReadOnlyPropertyName #> = value;
                    OnPropertyChanged("<#= IsReadOnlyPropertyName #>");
                    OnPropertyChanged("<#= IsEditablePropertyName #>");
                }
            }
        }
        #endregion
        #region <#= IsEditablePropertyName #>
        public bool <#= IsEditablePropertyName #>
        {
            get
            {
                return !_<#= IsReadOnlyPropertyName #>;
            }
        }
        #endregion
        #region <#= IsDateInputPropertyName #>
        protected void ResetIsDateInput()
        {
            if (_SelectedFilterDefinition != null)
            {
                <#= IsDateInputPropertyName #> = "datetime".Equals(_SelectedFilterDefinition.fltrDataType, StringComparison.OrdinalIgnoreCase) ||
                            "date".Equals(_SelectedFilterDefinition.fltrDataType, StringComparison.OrdinalIgnoreCase);
            }
            else
            {
                <#= IsDateInputPropertyName #> = false;
            }
        }
        bool _<#= IsDateInputPropertyName #> = false;
        public bool <#= IsDateInputPropertyName #>
        {
            get
            {
                return _<#= IsDateInputPropertyName #>;
            }
            set
            {
                if (_<#= IsDateInputPropertyName #> != value)
                {
                    _<#= IsDateInputPropertyName #> = value;
                    OnPropertyChanged("<#= IsDateInputPropertyName #>");
                }
            }
        }
        #endregion
        #region <#= FilterValuePropertyName #>
        dynamic _<#= FilterValuePropertyName #> = null;
        public dynamic <#= FilterValuePropertyName #>
        {
            get
            {
                return _<#= FilterValuePropertyName #>;
            }
            set
            {
                if (_<#= FilterValuePropertyName #> != value)
                {
                    _<#= FilterValuePropertyName #> = value;
                    if(_<#=ModelPropertyName#> != null)
                    {
                        _<#=ModelPropertyName#>.fltrValue = _<#= FilterValuePropertyName #>;
                    }
                    OnPropertyChanged();
                    OnPropertyChanged("<#= FilterValuePromptPropertyName #>");
                }
            }
        }
        #endregion
        #region <#= FilterValuePromptPropertyName #>
        public string <#= FilterValuePromptPropertyName #>
        {
            get
            {
                if(!string.IsNullOrEmpty(Error))
                {
                    return Error;
                }
                if(SelectedFilterDefinition != null)
                {
                    if("string".Equals(SelectedFilterDefinition.fltrDataType,StringComparison.OrdinalIgnoreCase) && SelectedFilterDefinition.fltrMaxLen.HasValue) {
                        string s = FilterValue as string;
                        if (s != null)
                        {
                            return "(" + s.Length + " of " + SelectedFilterDefinition.fltrMaxLen.Value + ")";
                        }
                    }
                }
                return "Enter filter value";
            }
        }
        #endregion
        #region <#= FilterValuePromptForegroundPropertyName #>
        public string <#= FilterValuePromptForegroundPropertyName #>
        {
            get
            {
                if (string.IsNullOrEmpty(Error)) return null;
                return "Danger";
            }
        }
        #endregion
        #region <#= FilterDefinitionsPropertyName #>
        IEnumerable<<#= IWebServiceFilterDefInterfaceClassName #>> _<#= FilterDefinitionsPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterDefInterfaceClassName #>> <#= FilterDefinitionsPropertyName #>
        {
            get
            {
                return _<#= FilterDefinitionsPropertyName #>;
            }
            set
            {
                if(_<#= FilterDefinitionsPropertyName #> != value)
                {
                    _<#= FilterDefinitionsPropertyName #> = value;
                    if (_<#= FilterDefinitionsPropertyName #> != null)
                    {
                        foreach(<#= IWebServiceFilterDefInterfaceClassName #> i in _<#= FilterDefinitionsPropertyName #>)
                        {
                            if (string.IsNullOrEmpty(i.fltrName))
                            {
                                SelectedFilterDefinition = i;
                                break;
                            }
                        }
                    }
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= FilterOperatorsPropertyName #>
        IEnumerable<<#= IWebServiceFilterOperatorInterfaceClassName #>> _<#= FilterOperatorsPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterOperatorInterfaceClassName #>> <#= FilterOperatorsPropertyName #>
        {
            get
            {
                return _<#= FilterOperatorsPropertyName #>;
            }
            set
            {
                if(_<#= FilterOperatorsPropertyName #> != value)
                {
                    _<#= FilterOperatorsPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= ModelPropertyName #>
        <#= IWebServiceFilterRsltInterfaceClassName #> _<#= ModelPropertyName #> = null;
        public <#= IWebServiceFilterRsltInterfaceClassName #> <#= ModelPropertyName #>
        {
            get
            {
                return _<#= ModelPropertyName #>;
            }
            set
            {
                if(_<#= ModelPropertyName #> != value)
                {
                    _<#= ModelPropertyName #> = value;
                    if (_<#= ModelPropertyName #> != null)
                    {
                        _<#= ModelPropertyName #>.fltrOperator = SelectedFilterOperator;
                        _<#= ModelPropertyName #>.fltrValue = _FilterValue;
                        _<#= ModelPropertyName #>.fltrError = _Error;
                        if (_SelectedFilterDefinition != null)
                        {
                            _<#= ModelPropertyName #>.fltrDataType = _SelectedFilterDefinition.fltrDataType;
                            _<#= ModelPropertyName #>.fltrName = _SelectedFilterDefinition.fltrName;
                        }
                        else
                        {
                            _<#= ModelPropertyName #>.fltrDataType = null;
                            _<#= ModelPropertyName #>.fltrName = null;
                            _<#= ModelPropertyName #>.fltrValue = null;
                        }
                    }
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= RemoveCommandPropertyName #>
        private ICommand _<#= RemoveCommandPropertyName #>;
        public ICommand <#= RemoveCommandPropertyName #>
        {
            get
            {
                return _<#= RemoveCommandPropertyName #> ?? (_<#= RemoveCommandPropertyName #> = new CommandHelper((param) => RemoveCommandAction(param), (param) => RemoveCommandCanExecute(param)));
            }
        }
        protected void RemoveCommandAction(object param)
        {
            if (<#= RemoveCommandAsEventPropertyName #> != null)
            {
                var ev = new <#= NotificationEventArgsClassName #>() { Sender = this, <#=ModelPropertyName#> = _<#=ModelPropertyName#> };
                <#= RemoveCommandAsEventPropertyName #>(this, ev);
            }
        }
        protected bool RemoveCommandCanExecute(object param)
        {
            return true;
        }

        public event Action<object, <#= NotificationEventArgsClassName #>> <#= RemoveCommandAsEventPropertyName #>;
        #endregion
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>