<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="xaml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>

<#

    string AttachedPropertiesExtFolder      = "00226-AttachedPropertiesExt.cs";
    string AttachedPropertiesExtClassName   = GetContextModelClassName(Context, AttachedPropertiesExtFolder);
    string AttachedPropertiesExtNameSpace   = GetContextModelNameSpace(Context, AttachedPropertiesExtFolder);
    string AttachedPropertiesExtProject     = GetContextModelProjectName(Context, AttachedPropertiesExtFolder);

    string ProxyUserControlFolder           = "00280-ProxyUserControl.xaml.cs";
    string ProxyUserControlClassName        = GetContextModelClassName(Context, ProxyUserControlFolder);
    string ProxyUserControlNameSpace        = GetContextModelNameSpace(Context, ProxyUserControlFolder);
    string ProxyUserControlProject          = GetContextModelProjectName(Context, ProxyUserControlFolder);

    string LformUserControlFolder           = "01596-LformUserControl.xaml.cs";
    string LformUserControlClassName        = GetModelClassName(Model, LformUserControlFolder);
    string LformUserControlNameSpace        = GetModelNameSpace(Model, LformUserControlFolder);
    string LformUserControlProject          = GetModelProjectName(Model, LformUserControlFolder);

    string RdlistUserControlFolder           = "02016-RdlistUserControl.xaml.cs";
    string RdlistUserControlClassName        = GetModelClassName(Model, RdlistUserControlFolder);
    string RdlistUserControlNameSpace        = GetModelNameSpace(Model, RdlistUserControlFolder);
    string RdlistUserControlProject          = GetModelProjectName(Model, RdlistUserControlFolder);
    
    string RdlistUserControlXamlFolder       = "02018-RdlistUserControl.xaml";
    string RdlistUserControlXamlClassName    = GetModelClassName(Model, RdlistUserControlXamlFolder);
    string RdlistUserControlXamlNameSpace    = GetModelNameSpace(Model, RdlistUserControlXamlFolder);
    string RdlistUserControlXamlProject      = GetModelProjectName(Model, RdlistUserControlXamlFolder);


    string CaptionPropertyName = "Caption";
    string FilterHeightPropertyName = "FilterHeight";
    string ShowFilterPropertyName = "ShowFilter";
    string ShowAddFilterBtnPropertyName = "ShowAddFilterBtn";
    string ShowBackBtnPropertyName = "ShowBackBtn";
    string GridHeightPropertyName = "GridHeight";
    string TableMenuItemsPropertyName = "TableMenuItems";
    string RowMenuItemsPropertyName = "RowMenuItems";
    string RowMenuItemsVMPropertyName = "RowMenuItemsVM";
    string ContainerMenuItemsPropertyName = "ContainerMenuItems";
    string HiddenFiltersPropertyName = "HiddenFilters";
    string HiddenFiltersVMPropertyName = "HiddenFiltersVM";

    string CanAddPropertyName                   = "CanAdd";
    string CanUpdPropertyName                   = "CanUpdate";
    string CanDelPropertyName                   = "CanDelete";

    string CanAddInternalPropertyName           = "CanAddInternal";
    string CanUpdInternalPropertyName           = "CanUpdateInternal";
    string CanDelInternalPropertyName           = "CanDeleteInternal";


    string RegisterRoutedCommandBindingsPropertyName = "RegisterRoutedCommandBindings";
    string RegisterRoutedEventBindingsPropertyName = "RegisterRoutedEventBindings";
    string DataGridServerSortingPropertyName = "DataGridServerSorting";
    string RoutedEventHandlersPropertyName = "RoutedEventHandlers";
    string RoutedCommandHandlersPropertyName = "RoutedCommandHandlers";


    string RegionPropertyName = "Region";
    string RdlistRegionPropertyName = "RdlistRegion";


    string proxyPrefix = "clr-namespace:" + ProxyUserControlNameSpace;
    if(ProxyUserControlProject != RdlistUserControlProject) {
        proxyPrefix = proxyPrefix + ";assembly=" + ProxyUserControlProject;
    }
    string attachedPrefix = "clr-namespace:" + AttachedPropertiesExtNameSpace;
    if(AttachedPropertiesExtProject != RdlistUserControlProject) {
        attachedPrefix = attachedPrefix + ";assembly=" + AttachedPropertiesExtProject;
    }
    string lformPrefix = "clr-namespace:" + LformUserControlNameSpace;
    if(LformUserControlProject != RdlistUserControlProject) {
        lformPrefix = lformPrefix + ";assembly=" + LformUserControlProject;
    }

    bool IsInTheSameModule = (LformUserControlProject == RdlistUserControlProject);

    
#>

<UserControl x:Class="<#= RdlistUserControlNameSpace #>.<#= RdlistUserControlClassName #>"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 

             xmlns:prism="http://prismlibrary.com/" 
             prism:ViewModelLocator.AutoWireViewModel="True"                          

<#
    if(IsInTheSameModule) {
#>
             xmlns:lfrm="<#= lformPrefix #>" 
<#
    } else {
#>
             xmlns:prx="<#= proxyPrefix #>" 
<#
    }
#>


             xmlns:atch="<#= attachedPrefix #>" 
             atch:<#= AttachedPropertiesExtClassName #>.<#= RegisterRoutedCommandBindingsPropertyName #>="{Binding <#= RoutedCommandHandlersPropertyName #>}"
             atch:<#= AttachedPropertiesExtClassName #>.<#= RegisterRoutedEventBindingsPropertyName #>="{Binding <#= RoutedEventHandlersPropertyName #>}"



             x:Name="RdlistUsrCntrlRootNode"

             mc:Ignorable="d" 
             d:DesignHeight="150" d:DesignWidth="400" >
<#
    if(IsInTheSameModule) {
#>
        <lfrm:<#= LformUserControlClassName #>  
<#
    } else {
#>
        <prx:<#= ProxyUserControlClassName #> 
            prism:RegionManager.RegionName="<#= LformUserControlClassName #><#= RdlistRegionPropertyName #>"
<#
    }
#>
            <#= ContainerMenuItemsPropertyName #>="{Binding <#= ContainerMenuItemsPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 
            <#= CaptionPropertyName #>="{Binding DataContext.<#= CaptionPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 
            <#= FilterHeightPropertyName #>="{Binding <#= FilterHeightPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 
            <#= ShowFilterPropertyName #>="{Binding <#= ShowFilterPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 
            <#= ShowAddFilterBtnPropertyName #>="{Binding <#= ShowAddFilterBtnPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 
            <#= GridHeightPropertyName #>="{Binding <#= GridHeightPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 
            <#= ShowBackBtnPropertyName #>="{Binding DataContext.<#= ShowBackBtnPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 

            <#= HiddenFiltersPropertyName #>="{Binding DataContext.<#= HiddenFiltersVMPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 
            <#= TableMenuItemsPropertyName #>="{Binding <#= TableMenuItemsPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 
            <#= RowMenuItemsPropertyName #>="{Binding DataContext.<#= RowMenuItemsVMPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 


            <#= CanAddPropertyName #>="{Binding DataContext.<#= CanAddInternalPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 
            <#= CanUpdPropertyName #>="{Binding DataContext.<#= CanUpdInternalPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 
            <#= CanDelPropertyName #>="{Binding DataContext.<#= CanDelInternalPropertyName #>, Mode=OneWay, ElementName=RdlistUsrCntrlRootNode}" 
            />
</UserControl>


<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelProjectName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    bool IsBooleanInput(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if((prop == null) || (model == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        return"System.Boolean".Equals(sclrProp.UnderlyingTypeName) || "Boolean".Equals(sclrProp.UnderlyingTypeName) || "bool".Equals(sclrProp.UnderlyingTypeName);
    }
    bool hasSortHeader(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable, ModelViewSerializable model) {
        if ((model == null) || (modelViewUIListPropertySerializable == null)) {
            return false;
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return false;
        }
        return model.ScalarProperties.Any(s => s.ViewPropertyName == modelViewUIListPropertySerializable.ViewPropertyName && s.IsUsedBySorting);
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetModelPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetModelPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }

#>