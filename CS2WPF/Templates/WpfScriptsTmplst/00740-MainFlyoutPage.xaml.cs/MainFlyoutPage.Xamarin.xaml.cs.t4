<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using Prism.Navigation;
using Xamarin.Essentials;
<#
    string IAppGlblSettingsServiceFolder        = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName     = GetModelClassName(Model, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace     = GetModelNameSpace(Model, IAppGlblSettingsServiceFolder);

    string MainFlyoutPageFolder                 = "00740-MainFlyoutPage.xaml.cs";
    string MainFlyoutPageClassName              = GetModelClassName(Model, MainFlyoutPageFolder);
    string MainFlyoutPageNameSpace              = GetModelNameSpace(Model, MainFlyoutPageFolder);

    string OnMessageNotificationPropertyName    = "OnMessageNotification";
    string AppSettingServicePropertyName        = "GlblSettingsSrv";
    string ShowErrorMethodName                  = "ShowErrorMessage";

    List<string> nmSpaces = new List<string>();
    if ((MainFlyoutPageNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);

#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

namespace <#= MainFlyoutPageNameSpace #> {
    /// <summary>
    /// Interaction logic for <#= MainFlyoutPageClassName #>.xaml
    /// </summary>
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class <#= MainFlyoutPageClassName #>: FlyoutPage, IFlyoutPageOptions, IDestructible
    {
        // protected <#= IAppGlblSettingsServiceClassName #> _<#= AppSettingServicePropertyName #>=null;
        public <#= MainFlyoutPageClassName #>() // <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName  #>)
        {
            //_<#= AppSettingServicePropertyName #> = <#= AppSettingServicePropertyName  #>;
            InitializeComponent();
        }
        public static readonly BindableProperty IsPresentedAfterNavigationProperty =
                    BindableProperty.Create(nameof(IsPresentedAfterNavigation), typeof(bool), typeof(<#= MainFlyoutPageClassName #>), false);
        public bool IsPresentedAfterNavigation
        {
            get => (bool)GetValue(IsPresentedAfterNavigationProperty);
            set => SetValue(IsPresentedAfterNavigationProperty, value);
        }
        public void Destroy()
        {
            //_<#= AppSettingServicePropertyName #> = null;
            BindingContext = null;
        }
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>