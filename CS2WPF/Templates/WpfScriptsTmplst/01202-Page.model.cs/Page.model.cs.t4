<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
<#

    string modelInterfaceFolder         = "01100-.interface.cs";
    string modelInterfaceClassName      = GetInterfaceName(Model);
    string modelInterfaceNameSpace      = GetModelNameSpace(Model, modelInterfaceFolder);

    string modelFolder                  = "01102-.model.cs";
    string modelClassName               = GetModelName(Model);
    string modelNameSpace               = GetModelNameSpace(Model, modelFolder);

    string modelPageInterfaceFolder      = "01200-Page.interface.cs";
    string modelPageInterfaceClassName   = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace   = GetModelNameSpace(Model, modelPageInterfaceFolder);
    
    string modelPageFolder               = "01202-Page.model.cs";
    string modelPageClassName            = GetModelPageName(Model);
    string modelPageNameSpace            = GetModelNameSpace(Model, modelPageFolder);

    List<string> nmSpaces = new List<string>();
    if (modelPageNameSpace != modelInterfaceNameSpace) nmSpaces.Add(modelInterfaceNameSpace);
    if ((modelPageNameSpace != modelPageInterfaceNameSpace) && (nmSpaces.IndexOf(modelPageInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelPageInterfaceNameSpace);
    if ((modelPageNameSpace != modelNameSpace) && (nmSpaces.IndexOf(modelNameSpace) < 0)) 
        nmSpaces.Add(modelNameSpace);


#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

namespace <#= modelPageNameSpace #> {
    public class <#= modelPageClassName #>: <#= modelPageInterfaceClassName #>
    {
        public <#= modelPageClassName #>() {}

        [JsonConstructorAttribute]
        public <#= modelPageClassName #>(IList<<#= modelClassName #>> items) 
        {
            this.items = new List<<#= modelInterfaceClassName #>>(items);
        }

<# if(Model.GenerateJSonAttribute) { #>
        [JsonProperty(PropertyName = "page")]
<# } #>
        public int page { get; set; }

<# if(Model.GenerateJSonAttribute) { #>
        [JsonProperty(PropertyName = "pagesize")]
<# } #>
        public int pagesize { get; set; }

<# if(Model.GenerateJSonAttribute) { #>
        [JsonProperty(PropertyName = "pagecount")]
<# } #>
        public int pagecount { get; set; }

<# if(Model.GenerateJSonAttribute) { #>
        [JsonProperty(PropertyName = "total")]
<# } #>
        public int total { get; set; }

<# if(Model.GenerateJSonAttribute) { #>
        [JsonProperty(PropertyName = "items")]
<# } #>
        public IList<<#= modelInterfaceClassName #>> items { get; set; }
    }
}

<#+

    string GetPageInterfaceName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }
    string GetModelPageName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.PageViewName);
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string AttribToString(ModelViewAttributeSerializable attr) {
        if(attr == null) return "";
        string result= "[" + attr.AttrName; 
        if (attr.VaueProperties == null) {
            return result + "]";
        }
        if (attr.VaueProperties.Count < 1) {
            return result + "]";
        }
        result = result + "(";
        bool insComma= false;
        foreach(ModelViewAttributePropertySerializable valProp in attr.VaueProperties) {
            if (insComma) {
                result =  result + ",";
            } else {
                insComma = true;
            }
            if(! string.IsNullOrEmpty(valProp.PropName) ) {
                if (! valProp.PropName.Contains("...") ) {
                    result =  result + valProp.PropName + "=";
                }
            }
            result =  result + valProp.PropValue;
        }
        return result + ")]";
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }

#>