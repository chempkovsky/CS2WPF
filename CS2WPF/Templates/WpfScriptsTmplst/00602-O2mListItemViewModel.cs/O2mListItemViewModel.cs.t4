<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System.ComponentModel;
using System.Runtime.CompilerServices;

<#

    string IO2mListItemInterfaceFolder      = "00600-IO2mListItemInterface.cs";
    string IO2mListItemInterfaceClassName   = GetModelClassName(Model, IO2mListItemInterfaceFolder);
    string IO2mListItemInterfaceNameSpace   = GetModelNameSpace(Model, IO2mListItemInterfaceFolder);

    string O2mListItemViewModelFolder       = "00602-O2mListItemViewModel.cs";
    string O2mListItemViewModelClassName    = GetModelClassName(Model, O2mListItemViewModelFolder);
    string O2mListItemViewModelNameSpace    = GetModelNameSpace(Model, O2mListItemViewModelFolder);
    


    string CaptionPropertyName                  = "Caption";
    string RegionPropertyName                   = "Region";
    string ForeignKeyDetailsName                = "ForeignKeyDetails";

    List<string> nmSpaces = new List<string>();
    if ((O2mListItemViewModelNameSpace != IO2mListItemInterfaceNameSpace) && (nmSpaces.IndexOf(IO2mListItemInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IO2mListItemInterfaceNameSpace);

#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

namespace <#= O2mListItemViewModelNameSpace #> {
    public class <#= O2mListItemViewModelClassName #>: <#= IO2mListItemInterfaceClassName #>, INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

        protected string  _<#= CaptionPropertyName #> = null;
        public string  <#= CaptionPropertyName #> 
        { 
            get { return _<#= CaptionPropertyName #>; }

            set { if(_<#= CaptionPropertyName #> != value) {_<#= CaptionPropertyName #> = value; OnPropertyChanged(); } }
        }

        string  _<#= RegionPropertyName #> = null;
        public string  <#= RegionPropertyName #>
        { 
            get { return _<#= RegionPropertyName #>; }

            set { if(_<#= RegionPropertyName #> != value) {_<#= RegionPropertyName #> = value; OnPropertyChanged(); } }
        }

        string  _<#= ForeignKeyDetailsName #> = null;
        public string  <#= ForeignKeyDetailsName #>
        { 
            get { return _<#= ForeignKeyDetailsName #>; }

            set { if(_<#= ForeignKeyDetailsName #> != value) {_<#= ForeignKeyDetailsName #> = value; OnPropertyChanged(); } }
        }

    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>