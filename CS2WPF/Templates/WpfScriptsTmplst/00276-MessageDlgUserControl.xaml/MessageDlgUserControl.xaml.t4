<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="xaml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>

<#


    string MessageUserControlFolder            = "00270-MessageUserControl.xaml.cs";
    string MessageUserControlClassName         = GetModelClassName(Model, MessageUserControlFolder);
    string MessageUserControlNameSpace         = GetModelNameSpace(Model, MessageUserControlFolder);
    string MessageUserControlProject           = GetModelProjectName(Model, MessageUserControlFolder);

    string MessageDlgUserControlFolder     = "00274-MessageDlgUserControl.xaml.cs";
    string MessageDlgUserControlClassName  = GetModelClassName(Model, MessageDlgUserControlFolder);
    string MessageDlgUserControlNameSpace  = GetModelNameSpace(Model, MessageDlgUserControlFolder);


    string MessageDlgUserControlXamlFolder      = "00276-MessageDlgUserControl.xaml";
    string MessageDlgUserControlXamlClassName   = GetModelClassName(Model, MessageDlgUserControlXamlFolder);
    string MessageDlgUserControlXamlNameSpace   = GetModelNameSpace(Model, MessageDlgUserControlXamlFolder);
    string MessageDlgUserControlXamlProject     = GetModelProjectName(Model, MessageDlgUserControlXamlFolder);
    
    string TitlePropertyName = "Title";
    string MessagePropertyName = "Message";
    string MessageIconNamePropertyName = "MessageIconName";
    string MessageIconColorPropertyName = "MessageIconColor";
    string ShowOkBtnPropertyName = "ShowOkBtn";
    string ShowCancelBtnPropertyName = "ShowCancelBtn";
    string OkNotificationPropertyName = "OkNotification";
    string OkCommandPropertyName = "OkCommand";
    string CancelNotificationPropertyName = "CancelNotification";
    string CancelCommandPropertyName = "CancelCommand";

    string msgusrctrlPrefix = "clr-namespace:" + MessageUserControlNameSpace;
    if(MessageUserControlProject != MessageDlgUserControlXamlProject) {
        msgusrctrlPrefix = msgusrctrlPrefix + ";assembly=" + MessageUserControlProject;
    }

#>

<UserControl x:Class="<#= MessageDlgUserControlNameSpace #>.<#= MessageDlgUserControlClassName #>"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="clr-namespace:Microsoft.Xaml.Behaviors;assembly=Microsoft.Xaml.Behaviors"
             xmlns:msgusrctrl="<#= msgusrctrlPrefix #>"

             mc:Ignorable="d" 
             d:DesignHeight="150" d:DesignWidth="400" >
    <msgusrctrl:MessageUserControl 
        <#= TitlePropertyName #>="{Binding <#= TitlePropertyName #>}" 
        <#= MessagePropertyName #>="{Binding <#= MessagePropertyName #>}"
        <#= MessageIconNamePropertyName #>="{Binding <#= MessageIconNamePropertyName #>}"
        <#= MessageIconColorPropertyName #>="{Binding <#= MessageIconColorPropertyName #>}"
        <#= ShowOkBtnPropertyName #>="{Binding <#= ShowOkBtnPropertyName #>}"
        <#= ShowCancelBtnPropertyName #>="{Binding <#= ShowCancelBtnPropertyName #>}">
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="<#= OkNotificationPropertyName #>">
                <i:InvokeCommandAction Command="{Binding <#= OkCommandPropertyName #>}" />
            </i:EventTrigger>
            <i:EventTrigger EventName="<#= CancelNotificationPropertyName #>">
                <i:InvokeCommandAction Command="{Binding <#= CancelCommandPropertyName #>}" />
            </i:EventTrigger>
        </i:Interaction.Triggers>
    </msgusrctrl:MessageUserControl>
</UserControl>


<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>