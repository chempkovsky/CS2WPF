<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using Xamarin.Forms;
using System.Windows;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Linq;
using Prism.Mvvm;
using Prism.Services.Dialogs;
using System.Threading.Tasks;

<#
    string IAppGlblSettingsServiceFolder      = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName   = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace   = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);

    string BindingContextFeedbackFolder      = "00166-BindingContextFeedback.cs";
    string BindingContextFeedbackClassName   = GetContextModelClassName(Context, BindingContextFeedbackFolder);
    string BindingContextFeedbackNameSpace   = GetContextModelNameSpace(Context, BindingContextFeedbackFolder);


    string IconFontFolder      = "00178-IconFont.cs";
    string IconFontClassName   = GetContextModelClassName(Context, IconFontFolder);
    string IconFontNameSpace   = GetContextModelNameSpace(Context, IconFontFolder);


    string ISformViewModelInterfaceFolder      = "00198-ISformViewModelInterface.cs";
    string ISformViewModelInterfaceClassName   = GetContextModelClassName(Context, ISformViewModelInterfaceFolder);
    string ISformViewModelInterfaceNameSpace   = GetContextModelNameSpace(Context, ISformViewModelInterfaceFolder);

    string IWebServiceFilterDefInterfaceFolder      = "00200-IWebServiceFilterDefInterface.cs";
    string IWebServiceFilterDefInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterDefInterfaceFolder);
    string IWebServiceFilterDefInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterDefInterfaceFolder);

    string IWebServiceFilterRsltInterfaceFolder      = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string IWebServiceFilterMenuInterfaceFolder      = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterMenuInterfaceFolder);

    string WebServiceFilterRsltViewModelFolder      = "00215-WebServiceFilterRsltViewModel.cs";
    string WebServiceFilterRsltViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterRsltViewModelFolder);
    string WebServiceFilterRsltViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterRsltViewModelFolder);

    string WebServiceFilterDefViewModelFolder      = "00211-WebServiceFilterDefViewModel.cs";
    string WebServiceFilterDefViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterDefViewModelFolder);
    string WebServiceFilterDefViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterDefViewModelFolder);

    string WebServiceFilterMenuViewModelFolder      = "00217-WebServiceFilterMenuViewModel.cs";
    string WebServiceFilterMenuViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterMenuViewModelFolder);
    string WebServiceFilterMenuViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterMenuViewModelFolder);

    string ValueChangedCmdParamFolder               = "00218-ValueChangedCmdParam.cs";
    string ValueChangedCmdParamClassName            = GetContextModelClassName(Context, ValueChangedCmdParamFolder);
    string ValueChangedCmdParamNameSpace            = GetContextModelNameSpace(Context, ValueChangedCmdParamFolder);


    string IBindingContextChangedFolder      = "00220-IBindingContextChanged.cs";
    string IBindingContextChangedClassName   = GetContextModelClassName(Context, IBindingContextChangedFolder);
    string IBindingContextChangedNameSpace   = GetContextModelNameSpace(Context, IBindingContextChangedFolder);

    string TablePaginationUserControlFolder      = "00252-TablePaginationUserControl.xaml.cs";
    string TablePaginationUserControlClassName   = GetContextModelClassName(Context, TablePaginationUserControlFolder);
    string TablePaginationUserControlNameSpace   = GetContextModelNameSpace(Context, TablePaginationUserControlFolder);

    string IColumnSelectorItemDefInterfaceFolder      = "00258-IColumnSelectorItemDefInterface.cs";
    string IColumnSelectorItemDefInterfaceClassName   = GetContextModelClassName(Context, IColumnSelectorItemDefInterfaceFolder);
    string IColumnSelectorItemDefInterfaceNameSpace   = GetContextModelNameSpace(Context, IColumnSelectorItemDefInterfaceFolder);

    string ColumnSelectorItemDefViewModelFolder      = "00262-ColumnSelectorItemDefViewModel.cs";
    string ColumnSelectorItemDefViewModelClassName   = GetContextModelClassName(Context, ColumnSelectorItemDefViewModelFolder);
    string ColumnSelectorItemDefViewModelNameSpace   = GetContextModelNameSpace(Context, ColumnSelectorItemDefViewModelFolder);


    string modelInterfaceFolder         = "01100-Interface.cs";
    string modelInterfaceClassName      = GetInterfaceName(Model);
    string modelInterfaceNameSpace      = GetModelNameSpace(Model, modelInterfaceFolder);

    string modelPageInterfaceFolder         = "01200-Page.interface.cs";
    string modelPageInterfaceClassName      = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace      = GetModelNameSpace(Model, modelPageInterfaceFolder);

    string modelFilterInterfaceFolder       = "01300-Filter.interface.cs";
    string modelFilterInterfaceClassName    = GetFilterInterfaceName(Model);
    string modelFilterInterfaceNameSpace    = GetModelNameSpace(Model, modelFilterInterfaceFolder);

    string modelFilterFolder                = "01302-Filter.model.cs";
    string modelFilterClassName             = GetFilterName(Model);
    string modelFilterNameSpace             = GetModelNameSpace(Model, modelFilterFolder);

    string modelServiceInterfaceFolder       = "01400-Service.interface.cs";
    string modelServiceInterfaceClassName    = GetModelServiceInterfaceName(Model);
    string modelServiceInterfaceNameSpace    = GetModelNameSpace(Model, modelServiceInterfaceFolder);

    string SformUserControlFolder           = "01420-SformUserControl.xaml.cs";
    string SformUserControlClassName        = GetModelClassName(Model, SformUserControlFolder);
    string SformUserControlNameSpace        = GetModelNameSpace(Model, SformUserControlFolder);
    string SformUserControlProject          = GetModelProjectName(Model, SformUserControlFolder);

    string SformViewModelFolder      = "01422-SformViewModel.cs";
    string SformViewModelClassName   = GetModelClassName(Model, SformViewModelFolder);
    string SformViewModelNameSpace   = GetModelNameSpace(Model, SformViewModelFolder);

    string CurrentFilterPropertyName                    = "CurrentFilter";
    string FilterDefinitionsPropertyName                = "FilterDefinitions";

    string HiddenFiltersVMPropertyName                  = "HiddenFiltersVM"; // correct:  to exclude HResult=0x800703E9 System.StackOverflowException
    string OnHiddenFiltersChangedPropertyName           = "OnHiddenFiltersChanged";
    string HiddenFiltersPropertyChangedPropertyName     = "HiddenFiltersPropertyChanged";

    string TableMenuItemsVMPropertyName                 = "TableMenuItemsVM"; // correct:  to exclude HResult=0x800703E9 System.StackOverflowException
    string OnTableMenuItemsChangedPropertyName          = "OnTableMenuItemsChanged";
    string TableMenuItemsPropertyChangedPropertyName    = "TableMenuItemsPropertyChanged";
    string TableMenuItemsCommandPropertyName            = "TableMenuItemsCommand";

    string RowMenuItemsPropertyName                     = "RowMenuItemsVM";   // correct:  to exclude HResult=0x800703E9 System.StackOverflowException
    string OnRowMenuItemsChangedPropertyName            = "OnRowMenuItemsChanged";
    string RowMenuItemsPropertyChangedPropertyName      = "RowMenuItemsPropertyChanged";
    string RowMenuItemsCommandPropertyName              = "RowMenuItemsCommand";

    string ApplyFilterCommandPropertyName = "ApplyFilterCommand";

    string DataGridSortingChangedPropertyName = "DataGridSortingChanged";

    string IsInQueryPropertyName                = "IsInQuery";
    string IsOnLoadedCalledPropertyName         = "IsOnLoadedCalled";

    string RowsPerPageOptionsPropertyName = "RowsPerPageOptions";
    string TotalCountPropertyName = "TotalCount";
    string DataSourcePropertyName = "DataSource";
    string RefreshSformCommandPropertyName = "RefreshSformCommand";
    string SelectColumnsCommandPropertyName = "SelectColumnsCommand";
    string SelectedColumnsPropertyName = "SelectedColumns";
    string SformSelectionChangedPropertyName = "SformSelectionChanged";
    string RegionPropertyName = "Region";
    string SformSelectionChangedCommandPropertyName = "SformSelectionChangedCommand";
    string CopyToModelMethodName            = "CopyToModel";
    string CopyToModelNotifyMethodName      = "CopyToModelNotify";

    string CurrentSortInfoPropertyName = "CurrentSortInfo";
    string OnSortCommandPropertyName = "OnSortCommand";

    string CurrentPagePropertyName = "CurrentPage";
    string OnCurrentPageChangedCommandPropertyName="OnCurrentPageChangedCommand";

    string RowsPerPagePropertyName = "RowsPerPage";
    string RowsPerPageDefaultPropertyName = "10";
    string OnRowsPerPageChangedCommandPropertyName="OnRowsPerPageChangedCommand";

    string SelectedRowPropertyName="SelectedRow";

    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";

    string FormRootServicePropertyName      = "FrmRootSrv";
    string AppSettingServicePropertyName    = "GlblSettingsSrv";
    string FilterOperatorSuffix             = "Oprtr";
    string GetWithFilterMethodName          = "getwithfilter";
    string ColumnSelectorDlgPropertyName    = "ColumnSelectorDlg";

    string SformAfterAddItemCommandPropertyName     = "SformAfterAddItemCommand";
    string SformAfterUpdItemCommandPropertyName     = "SformAfterUpdItemCommand";
    string SformAfterDelItemCommandPropertyName     = "SformAfterDelItemCommand";
    string SformLoadedCommandPropertyName           = "SformLoadedCommand";
    string UIDispatcherInvokePropertyName           = "Application.Current.Dispatcher.Invoke";
    string BindingContextFeedbackRefPropertyName    = "BindingContextFeedbackRef";


    List<string> nmSpaces = new List<string>();
    if ((SformViewModelNameSpace != IWebServiceFilterDefInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterDefInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterDefInterfaceNameSpace);
    if ((SformViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((SformViewModelNameSpace != WebServiceFilterRsltViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterRsltViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterRsltViewModelNameSpace);
    if ((SformViewModelNameSpace != WebServiceFilterDefViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterDefViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterDefViewModelNameSpace);
    if ((SformViewModelNameSpace != modelServiceInterfaceNameSpace) && (nmSpaces.IndexOf(modelServiceInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelServiceInterfaceNameSpace);
    if ((SformViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((SformViewModelNameSpace != WebServiceFilterMenuViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterMenuViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterMenuViewModelNameSpace);
    if ((SformViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((SformViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((SformViewModelNameSpace != IColumnSelectorItemDefInterfaceNameSpace) && (nmSpaces.IndexOf(IColumnSelectorItemDefInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IColumnSelectorItemDefInterfaceNameSpace);
    if ((SformViewModelNameSpace != ColumnSelectorItemDefViewModelNameSpace) && (nmSpaces.IndexOf(ColumnSelectorItemDefViewModelNameSpace) < 0)) 
        nmSpaces.Add(ColumnSelectorItemDefViewModelNameSpace);
    if ((SformViewModelNameSpace != TablePaginationUserControlNameSpace) && (nmSpaces.IndexOf(TablePaginationUserControlNameSpace) < 0)) 
        nmSpaces.Add(TablePaginationUserControlNameSpace);
    if ((SformViewModelNameSpace != ISformViewModelInterfaceNameSpace) && (nmSpaces.IndexOf(ISformViewModelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(ISformViewModelInterfaceNameSpace);
    if ((SformViewModelNameSpace != IBindingContextChangedNameSpace) && (nmSpaces.IndexOf(IBindingContextChangedNameSpace) < 0)) 
        nmSpaces.Add(IBindingContextChangedNameSpace);
    if ((SformViewModelNameSpace != IconFontNameSpace) && (nmSpaces.IndexOf(IconFontNameSpace) < 0)) 
        nmSpaces.Add(IconFontNameSpace);
    if ((SformViewModelNameSpace != ValueChangedCmdParamNameSpace) && (nmSpaces.IndexOf(ValueChangedCmdParamNameSpace) < 0)) 
        nmSpaces.Add(ValueChangedCmdParamNameSpace);
    if ((SformViewModelNameSpace != BindingContextFeedbackNameSpace) && (nmSpaces.IndexOf(BindingContextFeedbackNameSpace) < 0)) 
        nmSpaces.Add(BindingContextFeedbackNameSpace);
    


#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>
/*

    "<#= SformUserControlClassName #>" UserControl is defined in the "<#= SformUserControlProject #>"-project.
    In the file of IModule-class of "<#= SformUserControlProject #>"-project the following line of code must be inserted:

        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            // According to requirements of the "<#= SformViewModelClassName #>.cs"-file of "<#= SformUserControlProject #>"-project. 
            ViewModelLocationProvider.Register<<#= SformUserControlClassName #>, <#= SformViewModelClassName #>>();
            // According to requirements of the "<#= SformViewModelClassName #>.cs"-file of "<#= SformUserControlProject #>"-project. 
            containerRegistry.Register<ContentView, <#= SformUserControlClassName #>>("<#= SformUserControlClassName #>");
            ...
        }

*/

namespace <#= SformViewModelNameSpace #> {
    public class <#= SformViewModelClassName #>: INotifyPropertyChanged, <#= ISformViewModelInterfaceClassName #>, <#= IBindingContextChangedClassName #>
    {
        protected <#= modelServiceInterfaceClassName #> <#= FormRootServicePropertyName #>=null;
        protected <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>=null;
        protected IDialogService _dialogService=null;
        public <#= SformViewModelClassName #>(<#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName  #>, <#= modelServiceInterfaceClassName #> <#= FormRootServicePropertyName #>, IDialogService dialogService) {
            this.<#= AppSettingServicePropertyName #> = <#= AppSettingServicePropertyName #>;
            this.<#= FormRootServicePropertyName #> = <#= FormRootServicePropertyName #>;
            this._dialogService = dialogService;
            _<#= TableMenuItemsVMPropertyName #> = GetDefault<#= TableMenuItemsVMPropertyName #>();
        }
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion


        object _<#= BindingContextFeedbackRefPropertyName #> = null;
        public object <#= BindingContextFeedbackRefPropertyName #> {
            get { return _<#= BindingContextFeedbackRefPropertyName #>; }
            set { 
                if(_<#= BindingContextFeedbackRefPropertyName #> != value) {
                    _<#= BindingContextFeedbackRefPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }


        #region <#= SelectedRowPropertyName #>
        public object _<#= SelectedRowPropertyName #> = null;
        public object <#= SelectedRowPropertyName #> {
            get { return _<#= SelectedRowPropertyName #>;}
            set { 
                if (_<#= SelectedRowPropertyName #> != value) {
                    _<#= SelectedRowPropertyName #> = value;
                    OnPropertyChanged();
                    <#= BindingContextFeedbackRefPropertyName #> = new <#= BindingContextFeedbackClassName #>() {
		                BcfName = "<#= SelectedRowPropertyName #>",
		                BcfData = _<#= SelectedRowPropertyName #>
                    };
                }
            }
        }
        #endregion


        public async Task OnLoaded(object sender)
        {
            if(!<#= IsOnLoadedCalledPropertyName #>) {
                <#= IsOnLoadedCalledPropertyName #> = true;
                await onFilter();
            }
        }
        protected bool <#= IsOnLoadedCalledPropertyName #> = false;
        protected IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> <#= CurrentFilterPropertyName #> = null;

        #region <#= DataSourcePropertyName #>
        protected IEnumerable<<#= modelInterfaceClassName #>> _<#= DataSourcePropertyName #> = new ObservableCollection<<#= modelInterfaceClassName #>>();
        public IEnumerable<<#= modelInterfaceClassName #>> <#= DataSourcePropertyName #>
        { 
            get
            {
                return _<#= DataSourcePropertyName #>;
            }
            set
            {
                if (_<#= DataSourcePropertyName #> != value)
                {
                    _<#= DataSourcePropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= ApplyFilterCommandPropertyName #>
        protected ICommand _<#= ApplyFilterCommandPropertyName #> = null;
        public ICommand <#= ApplyFilterCommandPropertyName #>
        {
            get
            {
                return _<#= ApplyFilterCommandPropertyName #> ?? (_<#= ApplyFilterCommandPropertyName #> = new Command((prm) => <#= ApplyFilterCommandPropertyName #>Execute(prm), (prm) => <#= ApplyFilterCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected async void <#= ApplyFilterCommandPropertyName #>Execute(object prm)
        {
            <#= CurrentFilterPropertyName #> = prm as IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>;
            Actual<#= CurrentPagePropertyName #> = 0;
            await onFilter();
        }
        protected bool <#= ApplyFilterCommandPropertyName #>CanExecute(object prm)
        {
            return !<#= IsInQueryPropertyName #>;
        }
        #endregion
        #region <#= RefreshSformCommandPropertyName #>
        public async void <#= RefreshSformCommandPropertyName #>() {
            await onFilter();
        }
        #endregion
        
        #region <#= SelectedColumnsPropertyName #>
        protected IEnumerable<<#= IColumnSelectorItemDefInterfaceClassName #>> _<#= SelectedColumnsPropertyName #> = new ObservableCollection<<#= IColumnSelectorItemDefInterfaceClassName #>>() {
<#      
        {
            string isCheckedVal= "true";
            foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in Model.UIListProperties) {
                if (modelViewUIListPropertySerializable.IsShownInView) {
#>
            new <#= ColumnSelectorItemDefViewModelClassName #>() {
                Name= "<#= GetModelPropertyNameEx2(modelViewUIListPropertySerializable, Model)#>", 
                Caption= "<#= GetDisplayAttributeValueString2(modelViewUIListPropertySerializable, Model, DisplayLabelProperty) #>", 
                IsChecked= <#= isCheckedVal #>
            }, 
<#
                }
                if (modelViewUIListPropertySerializable.IsNewLineAfter) {
                    isCheckedVal= "false";
                }
            }
        }
#>
        };
        public IEnumerable<<#= IColumnSelectorItemDefInterfaceClassName #>> <#= SelectedColumnsPropertyName #>
        { 
            get
            {
                return _<#= SelectedColumnsPropertyName #>;
            }
            set
            {
                if (_<#= SelectedColumnsPropertyName #> != value)
                {
                    _<#= SelectedColumnsPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= SelectColumnsCommandPropertyName #>
        protected void <#= SelectColumnsCommandPropertyName #>Callback(IDialogResult rslt)
        {
            if ((!rslt.Parameters.ContainsKey("Result")) || (!rslt.Parameters.ContainsKey("Columns"))) return;
            bool aResult =  rslt.Parameters["Result"] is bool;
            if(aResult) aResult = (bool)rslt.Parameters["Result"];
            if (!aResult) return;
            if(rslt.Parameters.ContainsKey("Columns")) {
                IEnumerable<<#= IColumnSelectorItemDefInterfaceClassName #>> clms = rslt.Parameters.GetValue<IEnumerable<<#= IColumnSelectorItemDefInterfaceClassName #>>>("Columns");
                foreach(<#= IColumnSelectorItemDefInterfaceClassName #> c in clms) {
                    <#= IColumnSelectorItemDefInterfaceClassName #> r = <#= SelectedColumnsPropertyName #>.Where(i => i.Name == c.Name).FirstOrDefault();
                    if(r != null) r.IsChecked = c.IsChecked;
                }
            }
        }
        public void <#= SelectColumnsCommandPropertyName #>() {
            ObservableCollection<<#= IColumnSelectorItemDefInterfaceClassName #>> columns = new ObservableCollection<<#= IColumnSelectorItemDefInterfaceClassName #>>();
            foreach(<#= IColumnSelectorItemDefInterfaceClassName #> sc  in <#= SelectedColumnsPropertyName #>) {
                columns.Add( new <#= ColumnSelectorItemDefViewModelClassName #>() {Name = sc.Name, Caption=sc.Caption, IsChecked=sc.IsChecked });
            }
            IDialogParameters prms = new DialogParameters();
            prms.Add("Title", "Select columns");
            prms.Add("Columns", columns);
            this._dialogService.ShowDialog("<#= ColumnSelectorDlgPropertyName #>", prms, <#= SelectColumnsCommandPropertyName #>Callback);
        }
        #endregion

        #region <#= RowMenuItemsPropertyChangedPropertyName #>
        public void <#= RowMenuItemsPropertyChangedPropertyName #>(object Sender, object OldValue, object NewValue) {
            ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> tmis = new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>();
            IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> intmis = NewValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>;
            if(intmis != null) {
                foreach(<#= IWebServiceFilterMenuInterfaceClassName #> tmi  in intmis) {
                    tmis.Add( new <#= WebServiceFilterMenuViewModelClassName #>() {Id = tmi.Id, Caption=tmi.Caption,  IconName=tmi.IconName, IconColor=tmi.IconColor, Enabled=tmi.Enabled, Data=tmi.Data });
                }
            }
            <#= RowMenuItemsPropertyName #> = tmis;
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= RowMenuItemsPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= RowMenuItemsPropertyName #>
        { 
            get
            {
                return _<#= RowMenuItemsPropertyName #>;
            }
            set
            {
                if (_<#= RowMenuItemsPropertyName #> != value)
                {
                    _<#= RowMenuItemsPropertyName #> = value;
                    OnPropertyChanged();
                    (<#= RowMenuItemsCommandPropertyName #> as Command).ChangeCanExecute();
                }
            }
        }
        #endregion
        #region <#= RowMenuItemsCommandPropertyName  #>
        protected ICommand _<#= RowMenuItemsCommandPropertyName #> = null;
        public ICommand <#= RowMenuItemsCommandPropertyName #>
        {
            get
            {
                return _<#= RowMenuItemsCommandPropertyName #> ?? (_<#= RowMenuItemsCommandPropertyName #> = new Command((prm) => <#= RowMenuItemsCommandPropertyName #>Execute(prm), (prm) => <#= RowMenuItemsCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected async void <#= RowMenuItemsCommandPropertyName #>Execute(object prm)
        {
            List<string> lst = new List<string>();
            foreach(<#= IWebServiceFilterMenuInterfaceClassName #> mi in <#= RowMenuItemsPropertyName #>) {
                lst.Add(mi.Caption);
            }
            string action = await Application.Current.MainPage.DisplayActionSheet("Row commands:", "Cancel", null, lst.ToArray());
            foreach(<#= IWebServiceFilterMenuInterfaceClassName #> mi in <#= RowMenuItemsPropertyName #>) {
                if(mi.Caption == action) {
                    <#= IWebServiceFilterMenuInterfaceClassName #> miToSend = new <#= WebServiceFilterMenuViewModelClassName #>() {Id = mi.Id, Caption = mi.Caption,  IconName = mi.IconName, IconColor = mi.IconColor, Enabled = mi.Enabled, Data = mi.Data,  FeedbackData = prm};
                    <#= BindingContextFeedbackRefPropertyName #> = new <#= BindingContextFeedbackClassName #>() {
		                BcfName = "<#= RowMenuItemsCommandPropertyName #>",
		                BcfData = miToSend
                    };
                    return;
                }
            }
        }
        protected bool <#= RowMenuItemsCommandPropertyName #>CanExecute(object prm)
        {
            bool rslt = (<#= RowMenuItemsPropertyName #> != null);
            if (rslt) rslt = <#= RowMenuItemsPropertyName #>.Any();
            return rslt;
        }

        #endregion

        #region <#= TableMenuItemsVMPropertyName #>
        protected ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> GetDefault<#= TableMenuItemsVMPropertyName #>() {
            return new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>()  {
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "TableRefreshMI", Caption="Refresh table", IconName=<#= IconFontClassName #>.Refresh, IconColor=Color.Default, Enabled=true, Data=null},
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "TableSettingsMI", Caption="Table columns", IconName=<#= IconFontClassName #>.Settings, IconColor=Color.Default, Enabled=true, Data=null},
            };
        }
        public void <#= TableMenuItemsPropertyChangedPropertyName #>(object Sender, object OldValue, object NewValue) {
            ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> tmis = GetDefault<#= TableMenuItemsVMPropertyName #>();
            IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> intmis = NewValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>;
            if(intmis != null) {
                foreach(<#= IWebServiceFilterMenuInterfaceClassName #> tmi  in intmis) {
                    tmis.Add( new <#= WebServiceFilterMenuViewModelClassName #>() {Id = tmi.Id, Caption=tmi.Caption,  IconName=tmi.IconName, IconColor=tmi.IconColor, Enabled=tmi.Enabled, Data=tmi.Data});
                }
            }
            <#= TableMenuItemsVMPropertyName #> = tmis;
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= TableMenuItemsVMPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= TableMenuItemsVMPropertyName #>
        { 
            get
            {
                return _<#= TableMenuItemsVMPropertyName #>;
            }
            set
            {
                if (_<#= TableMenuItemsVMPropertyName #> != value)
                {
                    _<#= TableMenuItemsVMPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= TableMenuItemsCommandPropertyName #>
        protected ICommand _<#= TableMenuItemsCommandPropertyName #> = null;
        public ICommand <#= TableMenuItemsCommandPropertyName #>
        {
            get
            {
                return _<#= TableMenuItemsCommandPropertyName #> ?? (_<#= TableMenuItemsCommandPropertyName #> = new Command(() => <#= TableMenuItemsCommandPropertyName #>Execute(), () => <#= TableMenuItemsCommandPropertyName #>CanExecute()));
            }
        }
        protected async void <#= TableMenuItemsCommandPropertyName #>Execute()
        {
            List<string> lst = new List<string>();
            foreach(<#= IWebServiceFilterMenuInterfaceClassName #> mi in <#= TableMenuItemsVMPropertyName #>) {
                lst.Add(mi.Caption);
            }
            string action = await Application.Current.MainPage.DisplayActionSheet("Table commands:", "Cancel", null, lst.ToArray());
            foreach(<#= IWebServiceFilterMenuInterfaceClassName #> mi in <#= TableMenuItemsVMPropertyName #>) {
                if(mi.Caption == action) {
                    if(mi.Id == "TableRefreshMI") {
                        <#= RefreshSformCommandPropertyName #>();
                    } else if(mi.Id == "TableSettingsMI") {
                        <#= SelectColumnsCommandPropertyName #>();
                    } else {
                        <#= BindingContextFeedbackRefPropertyName #> = new <#= BindingContextFeedbackClassName #>() {
		                    BcfName = "<#= TableMenuItemsCommandPropertyName #>",
		                    BcfData = mi
                        };
                    };
                    return;
                }
            }
        }
        protected bool <#= TableMenuItemsCommandPropertyName #>CanExecute()
        {
            return true;
        }
        #endregion




        #region <#= HiddenFiltersVMPropertyName #>
        public async Task <#= HiddenFiltersPropertyChangedPropertyName #>(object Sender, object OldValue, object NewValue)
        {
            IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> hfs = NewValue as IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>;
            ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> newhfs = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
            if(hfs != null) {
                foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf  in hfs) {
                    newhfs.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {fltrName=hf.fltrName, fltrDataType=hf.fltrDataType,  fltrOperator=hf.fltrOperator, fltrValue=hf.fltrValue, fltrError=hf.fltrError });
                }
            }
            <#= HiddenFiltersVMPropertyName #> = newhfs;
            <#= CurrentFilterPropertyName #> = newhfs;

            ObservableCollection<<#= IWebServiceFilterDefInterfaceClassName #>> fltDf = 
                new ObservableCollection<<#= IWebServiceFilterDefInterfaceClassName #>>() {
<#
            foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in Model.ScalarProperties) {
                if (modelViewPropertyOfVwSerializable.IsUsedByfilter &&  string.IsNullOrEmpty(modelViewPropertyOfVwSerializable.ForeignKeyNameChain)) {
#>
                    new <#= WebServiceFilterDefViewModelClassName #>() {fltrName="<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#>", fltrCaption="<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>",  fltrDataType="<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>", fltrMaxLen=<#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin=<#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax=<#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #> },
<#
                }
            }
#>
                };
<#
    {
        bool hasForeignKeys = Model.ForeignKeys != null;
        bool isNotDescl = true;
        if(hasForeignKeys) {
            hasForeignKeys = Model.ForeignKeys.Count > 0;
        }
        if (hasForeignKeys) {
            foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in Model.ForeignKeys) {
                List<ModelViewPropertyOfVwSerializable> fKprops = GetPropsByForeignKey(Model, modelViewForeignKeySerializable);
                if (fKprops.Count < 1) {
                    foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in Model.ScalarProperties) {
                        if (modelViewPropertyOfVwSerializable.IsUsedByfilter &&  (!string.IsNullOrEmpty(modelViewPropertyOfVwSerializable.ForeignKeyNameChain))) {
                            if ( modelViewPropertyOfVwSerializable.ForeignKeyNameChain.StartsWith(modelViewForeignKeySerializable.NavigationName + ".") || 
                                (modelViewPropertyOfVwSerializable.ForeignKeyNameChain == modelViewForeignKeySerializable.NavigationName) ) {
#>
            fltDf.Add(new <#= WebServiceFilterDefViewModelClassName #>() {fltrName='<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#>', fltrCaption='<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>',  fltrDataType='<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>', fltrMaxLen=<#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin=<#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax=<#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #> });
<#
                            }
                        }
                    }
                } else {
                    if(isNotDescl) {
#>
            bool isDsbl = true;
<#
                        isNotDescl = false;
                    } else {
#>
            isDsbl = true;
<#
                    }
                    foreach(ModelViewPropertyOfVwSerializable fKprop in fKprops) {
#>
            if (this.<#= HiddenFiltersVMPropertyName #> != null) {
                isDsbl = isDsbl && this.<#= HiddenFiltersVMPropertyName #>.Any(v => v.fltrName == "<#= GetModelPropertyName(fKprop, Model) #>");
            } else isDsbl = false;
<#
                    }
#>
            if(!isDsbl) {
<#
                    foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in Model.ScalarProperties) {
                        if (modelViewPropertyOfVwSerializable.IsUsedByfilter &&  (!string.IsNullOrEmpty(modelViewPropertyOfVwSerializable.ForeignKeyNameChain))) {
                            if ( modelViewPropertyOfVwSerializable.ForeignKeyNameChain.StartsWith(modelViewForeignKeySerializable.NavigationName + ".") || 
                                (modelViewPropertyOfVwSerializable.ForeignKeyNameChain == modelViewForeignKeySerializable.NavigationName) ) {
#>
                fltDf.Add(new <#= WebServiceFilterDefViewModelClassName #>() {fltrName="<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#>", fltrCaption="<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>",  fltrDataType="<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>", fltrMaxLen=<#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin=<#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax=<#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #> });
<#
                            }
                        }
                    }
#>
            }
<#
                }
            }
        } 
    }
#>
            <#= FilterDefinitionsPropertyName #> = fltDf;
            Actual<#= CurrentPagePropertyName #> = 0;
            await onFilter();
        }
        IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> _<#= HiddenFiltersVMPropertyName #> = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
        public IEnumerable<IWebServiceFilterRsltInterface> <#= HiddenFiltersVMPropertyName #>
        {
            get
            {
                return _<#= HiddenFiltersVMPropertyName #>;
            }
            set
            {
                if (_<#= HiddenFiltersVMPropertyName #> != value)
                {
                    _<#= HiddenFiltersVMPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= FilterDefinitionsPropertyName #>
        IEnumerable<<#= IWebServiceFilterDefInterfaceClassName #>> _<#= FilterDefinitionsPropertyName #> = new ObservableCollection<<#= IWebServiceFilterDefInterfaceClassName #>>()
        {
                <#
                    {
                        bool isNotFirst = false;
                        foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in Model.ScalarProperties) {
                            if (modelViewPropertyOfVwSerializable.IsUsedByfilter) {
                #>
                            new <#= WebServiceFilterDefViewModelClassName #>() {fltrName="<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#>", fltrCaption="<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>",  fltrDataType="<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>", fltrMaxLen=<#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin=<#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax=<#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #> },
                <#
                            }
                        }
                    }
                #>
        };
        public IEnumerable<<#= IWebServiceFilterDefInterfaceClassName #>> <#= FilterDefinitionsPropertyName #>
        { 
            get
            {
                return _<#= FilterDefinitionsPropertyName #>;
            }
            set
            {
                if (_<#= FilterDefinitionsPropertyName #> != value)
                {
                    _<#= FilterDefinitionsPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= IsInQueryPropertyName #>
        protected bool _<#= IsInQueryPropertyName #> = false;
        public bool <#= IsInQueryPropertyName #> {
            get { return _<#= IsInQueryPropertyName #>; }
            set { if(_<#= IsInQueryPropertyName #> != value) { _<#= IsInQueryPropertyName #> = value; OnPropertyChanged(); } }
        }
        #endregion

        #region <#= RowsPerPageOptionsPropertyName #>
        protected IEnumerable<int> _<#= RowsPerPageOptionsPropertyName #> = new ObservableCollection<int>() {10,25,50,100};
        public IEnumerable<int> <#= RowsPerPageOptionsPropertyName #> {
            get { return _<#= RowsPerPageOptionsPropertyName #>; }
            set { if(_<#= RowsPerPageOptionsPropertyName #> != value) { _<#= RowsPerPageOptionsPropertyName #> = value; OnPropertyChanged(); } }
        }
        #endregion

        #region <#= TotalCountPropertyName #>
        protected int _<#= TotalCountPropertyName #> = 0;
        public int <#= TotalCountPropertyName #> {
            get { return _<#= TotalCountPropertyName #>; }
            set { if(_<#= TotalCountPropertyName #> != value) { _<#= TotalCountPropertyName #> = value; OnPropertyChanged(); } }
        }
        #endregion

        #region <#= CurrentPagePropertyName #>
        protected int _Actual<#= CurrentPagePropertyName #> = 0;
        protected int Actual<#= CurrentPagePropertyName #>
        {
            get { return _Actual<#= CurrentPagePropertyName #>; }
            set
            {
                _Actual<#= CurrentPagePropertyName #> = value;
                <#= CurrentPagePropertyName #> = _Actual<#= CurrentPagePropertyName #>;
            }
        }
        protected int _<#= CurrentPagePropertyName #> = 0;
        public int <#= CurrentPagePropertyName #> {
            get { return _<#= CurrentPagePropertyName #>; }
            set { 
                if(_<#= CurrentPagePropertyName #> != value) { 
                    _<#= CurrentPagePropertyName #> = value; 
                    OnPropertyChanged(); 
                } 
            }
        }
        #endregion

        #region <#= RowsPerPagePropertyName #>
        protected int _Actual<#= RowsPerPagePropertyName #> = 10;
        protected int Actual<#= RowsPerPagePropertyName #>
        {
            get { return _Actual<#= RowsPerPagePropertyName #>; }
            set
            {
                if (_Actual<#= RowsPerPagePropertyName #> != value)
                {
                    _Actual<#= RowsPerPagePropertyName #> = value;
                    Actual<#= CurrentPagePropertyName #> = 0;
                }
                <#= RowsPerPagePropertyName #> = _Actual<#= RowsPerPagePropertyName #>;
            }
        }
        protected int _<#= RowsPerPagePropertyName #> = <#= RowsPerPageDefaultPropertyName #>;
        public int <#= RowsPerPagePropertyName #> {
            get { return _<#= RowsPerPagePropertyName #>; }
            set { 
                if(_<#= RowsPerPagePropertyName #> != value) { 
                    bool cpc = _<#= CurrentPagePropertyName #> != 0;
                    _<#= CurrentPagePropertyName #> = 0;
                    _<#= RowsPerPagePropertyName #> = value; 
                    OnPropertyChanged(); 
                    if(cpc) OnPropertyChanged("<#= CurrentPagePropertyName #>"); 
                } 
            }
        }
        #endregion

        #region <#= OnRowsPerPageChangedCommandPropertyName #>
        protected ICommand _<#= OnRowsPerPageChangedCommandPropertyName #> = null;
        public ICommand <#= OnRowsPerPageChangedCommandPropertyName #>
        {
            get
            {
                return _<#= OnRowsPerPageChangedCommandPropertyName #> ?? (_<#= OnRowsPerPageChangedCommandPropertyName #> = new Command((prm) => <#= OnRowsPerPageChangedCommandPropertyName #>Execute(prm), (prm) => <#= OnRowsPerPageChangedCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected async void <#= OnRowsPerPageChangedCommandPropertyName #>Execute(object prm)
        {
            <#= ValueChangedCmdParamClassName #><int> val = prm as <#= ValueChangedCmdParamClassName #><int>;
            if (val != null) {
                if (Actual<#= RowsPerPagePropertyName #> != val.NewVal)
                {
                    await onFilter();
                }
            }
        }
        protected bool <#= OnRowsPerPageChangedCommandPropertyName #>CanExecute(object prm)
        {
            return true;
        }
        #endregion

        #region <#= OnCurrentPageChangedCommandPropertyName #>
        protected ICommand _<#= OnCurrentPageChangedCommandPropertyName #> = null;
        public ICommand <#= OnCurrentPageChangedCommandPropertyName #>
        {
            get
            {
                return _<#= OnCurrentPageChangedCommandPropertyName #> ?? (_<#= OnCurrentPageChangedCommandPropertyName #> = new Command((prm) => <#= OnCurrentPageChangedCommandPropertyName #>Execute(prm), (prm) => <#= OnCurrentPageChangedCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected async void <#= OnCurrentPageChangedCommandPropertyName #>Execute(object prm)
        {
            <#= ValueChangedCmdParamClassName #><int> val = prm as <#= ValueChangedCmdParamClassName #><int>;
            if (val != null) {
                if (Actual<#= CurrentPagePropertyName #> != val.NewVal)
                {
                    await onFilter();
                }
            }
        }
        protected bool <#= OnCurrentPageChangedCommandPropertyName #>CanExecute(object prm)
        {
            return true;
        }
        #endregion


        #region Sort
        public string <#= CurrentSortInfoPropertyName #> {
            get { 
                if(string.IsNullOrEmpty(CurrentSortColumn)) return null;
                return CurrentSortColumn + " " + CurrentSortdirection;
            }
        }
        protected string CurrentSortColumn = "";
        protected string CurrentSortdirection  = "";
        protected ICommand _<#= OnSortCommandPropertyName #> = null;
        public ICommand <#= OnSortCommandPropertyName #>
        {
            get
            {
                return _<#= OnSortCommandPropertyName #> ?? (_<#= OnSortCommandPropertyName #> = new Command((prm) => <#= OnSortCommandPropertyName #>Execute(prm), (prm) => <#= OnSortCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected async void <#= OnSortCommandPropertyName #>Execute(object prm)
        {
            string val = prm as string;
            if(string.IsNullOrEmpty(val)) return;
            if (val != CurrentSortColumn) {
                CurrentSortColumn = val;
                CurrentSortdirection  = "";
            }
            if (CurrentSortdirection  == "")
                CurrentSortdirection  = "asc";
            else if (CurrentSortdirection  == "asc")
                CurrentSortdirection = "desc";
            else CurrentSortdirection = "";
            OnPropertyChanged("<#= CurrentSortInfoPropertyName #>"); 
            await onFilter();
        }
        protected bool <#= OnSortCommandPropertyName #>CanExecute(object prm)
        {
            return true;
        }
        #endregion
        #region Filter
        protected async Task onFilter() {
            if ((<#= IsInQueryPropertyName #>) || (!<#= IsOnLoadedCalledPropertyName #>)) return;
            <#= IsInQueryPropertyName #> = true;

            <#= modelFilterInterfaceClassName #> flt  = <#= FormRootServicePropertyName #>.GetFilter();
            flt.page = this.<#= CurrentPagePropertyName #>; 
            flt.pagesize = this.<#= RowsPerPagePropertyName #>;
            if(!string.IsNullOrEmpty(CurrentSortColumn)) {
                string asc = "";
                if("desc".Equals(CurrentSortdirection, System.StringComparison.OrdinalIgnoreCase)) {
                    asc = "-";
                }
                flt.orderby = new List<string>() { asc + CurrentSortColumn };
            }
            if(<#= CurrentFilterPropertyName #> != null) {
                foreach(<#= IWebServiceFilterRsltInterfaceClassName #> e in <#= CurrentFilterPropertyName #>) {
                    if((!string.IsNullOrEmpty(e.fltrError)) || string.IsNullOrEmpty(e.fltrName)) continue;
                    switch(e.fltrName) {
<#
    foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) { 
        if (prop.IsUsedByfilter) {
#>
                        case "<#= GetModelPropertyName(prop, Model) #>":
                            if (flt.<#= GetModelPropertyName(prop, Model) #> == null) flt.<#= GetModelPropertyName(prop, Model) #> = new List<<#= GetPropertyTypeName(prop) #>>();
                            flt.<#= GetModelPropertyName(prop, Model) #>.Add((<#= GetPropertyTypeName(prop) #>)e.fltrValue);
                            if (flt.<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #> == null) flt.<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #> = new List<string>();
                            flt.<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #>.Add(e.fltrOperator);
                            break;
<#
        }
    }
#>
                        default: break;
                    }
                }
            }
            <#= modelPageInterfaceClassName #> rslt = await this.<#= FormRootServicePropertyName #>.<#= GetWithFilterMethodName #>(flt);
            if(rslt != null) {
                // <#= RowsPerPagePropertyName #> resets <#= CurrentPagePropertyName #> 
                // so the order is important: Actual<#= RowsPerPagePropertyName #> must be the first one and Actual<#= CurrentPagePropertyName #> must be the second
                Actual<#= RowsPerPagePropertyName #> = rslt.pagesize;
                Actual<#= CurrentPagePropertyName #> = rslt.page;
                <#= TotalCountPropertyName #> = rslt.total; 
                ObservableCollection<<#= modelInterfaceClassName #>> ds = <#= DataSourcePropertyName #> as ObservableCollection<<#= modelInterfaceClassName #>>;
                if (ds == null) { ds = new ObservableCollection<<#= modelInterfaceClassName #>>(); } else { ds.Clear(); }
                if(rslt.items != null) {
                    foreach(<#= modelInterfaceClassName #> itm in rslt.items) {
                        ds.Add(<#= FormRootServicePropertyName #>.<#= CopyToModelNotifyMethodName #>(itm, null));
                    }
                }
                <#= DataSourcePropertyName #> = ds;
                <#= SelectedRowPropertyName #> = <#= DataSourcePropertyName #>?.FirstOrDefault();
            }
            <#= IsInQueryPropertyName #> = false;
        }
        #endregion
        #region <#= SformAfterAddItemCommandPropertyName #>
        public void <#= SformAfterAddItemCommandPropertyName #>(object sender, object item) {
            <#= modelInterfaceClassName #> prm = item as  <#= modelInterfaceClassName #>;
            if(prm == null) return;
            ObservableCollection<<#= modelInterfaceClassName #>> ds = <#= DataSourcePropertyName #> as ObservableCollection<<#= modelInterfaceClassName #>>;
            ds.Add(<#= FormRootServicePropertyName #>.<#= CopyToModelNotifyMethodName #>(prm, null));
        }
        #endregion
        #region <#= SformAfterUpdItemCommandPropertyName #>
        public void <#= SformAfterUpdItemCommandPropertyName #>(object sender, object item) {
            <#= modelInterfaceClassName #> prm = item as  <#= modelInterfaceClassName #>;
            if(prm == null) return;
            ObservableCollection<<#= modelInterfaceClassName #>> ds = <#= DataSourcePropertyName #> as ObservableCollection<<#= modelInterfaceClassName #>>;
            if (ds.IndexOf(prm) > -1) {
                return;
            }
<#
    {
        List<ModelViewPropertyOfVwSerializable> primKeyProps = GetModelPrimaryKeyProps(Model);
#>
            <#= modelInterfaceClassName #> rw = ds.Where(d => 
<#
        bool isNotFirst= false;
        foreach(ModelViewPropertyOfVwSerializable pkpModelViewPropertyOfVwSerializable in primKeyProps) {
            if(isNotFirst) {
#>
                    && (d.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #> == prm.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #>)
<#
            } else {
                isNotFirst = true;
#>
                        (d.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #> == prm.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #>)
<#
            }
        }
#>
                    ).FirstOrDefault();
<#
    }
#>
            if (rw != null) {
                <#= FormRootServicePropertyName #>.<#= CopyToModelMethodName #>(prm, rw);
            } else {
                ds.Add(<#= FormRootServicePropertyName #>.<#= CopyToModelNotifyMethodName #>(prm, null));
            }
        }
        #endregion
        #region <#= SformAfterDelItemCommandPropertyName #>
        public void <#= SformAfterDelItemCommandPropertyName #>(object sender, object item) {
            <#= modelInterfaceClassName #> prm = item as  <#= modelInterfaceClassName #>;
            if(prm == null) return;
            ObservableCollection<<#= modelInterfaceClassName #>> ds = <#= DataSourcePropertyName #> as ObservableCollection<<#= modelInterfaceClassName #>>;
            int indx = ds.IndexOf(prm);
            if (indx > -1) {
                ds.RemoveAt(indx);
                return;
            }
<#
    {
        List<ModelViewPropertyOfVwSerializable> primKeyProps = GetModelPrimaryKeyProps(Model);
#>
            <#= modelInterfaceClassName #> rw = ds.Where(d => 
<#
        bool isNotFirst= false;
        foreach(ModelViewPropertyOfVwSerializable pkpModelViewPropertyOfVwSerializable in primKeyProps) {
            if(isNotFirst) {
#>
                    && (d.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #> == prm.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #>)
<#
            } else {
                isNotFirst = true;
#>
                        (d.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #> == prm.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #>)
<#
            }
        }
#>
                    ).FirstOrDefault();
<#
    }
#>
            if (rw != null) {
                indx = ds.IndexOf(rw);
                if (indx > -1) {
                    ds.RemoveAt(indx);
                    return;
                }
            }
        }
        #endregion
    }
}

<#+
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetFilterInterfaceName(ModelViewSerializable model) {
        return "I" + GetFilterName(model);
    }
    string GetFilterName(ModelViewSerializable model) {
        return GetModelName(model) + "Filter";
    }
    string GetPageInterfaceName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }

    string GetModelServiceInterfaceName(ModelViewSerializable model) {
        return "I" + GetModelServiceName(model);
    }
    string GetModelServiceName(ModelViewSerializable model) {
        return GetModelName(model) + "Service";
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+GetModelName(model);
    }
    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetDisplayAttributeValueString(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string propName) {
            if (prop == null)
            {
                return "";
            }
            if(prop.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                prop.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }

    string GetDisplayAttributeValueStringEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetDisplayAttributeValueStringEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxLenEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMaxLenEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxVal(sclrProp, model);
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    List<ModelViewPropertyOfVwSerializable> GetPropsByForeignKey(ModelViewSerializable model, ModelViewForeignKeySerializable foreignKey) {
        List<ModelViewPropertyOfVwSerializable> result= new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (foreignKey == null)) {
            return result;
        }
        if (foreignKey.PrincipalKeyProps == null || foreignKey.ForeignKeyProps == null || model.ScalarProperties == null) {
            return result;
        }
        if ((foreignKey.PrincipalKeyProps.Count != foreignKey.ForeignKeyProps.Count) || (foreignKey.ForeignKeyProps.Count < 1)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.PrincipalKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (foreignKey.NavigationName == p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    string GetModelPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetModelPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                    if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                        prop =
                                        model.ScalarProperties.Where(p => 
                                            (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                            &&
                                            (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                        ).FirstOrDefault();
                                    }
                                }
                                if(prop != null) break;
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        result.Add(prop);
                    }
                }
            }
        }
        return result;
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>