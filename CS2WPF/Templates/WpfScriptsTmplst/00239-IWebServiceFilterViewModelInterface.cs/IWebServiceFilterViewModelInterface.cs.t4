<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Windows.Input;

<#
    string IWebServiceFilterDefInterfaceFolder      = "00200-IWebServiceFilterDefInterface.cs";
    string IWebServiceFilterDefInterfaceClassName   = GetModelClassName(Model, IWebServiceFilterDefInterfaceFolder);
    string IWebServiceFilterDefInterfaceNameSpace   = GetModelNameSpace(Model, IWebServiceFilterDefInterfaceFolder);

    string IWebServiceFilterOperatorInterfaceFolder      = "00202-IWebServiceFilterOperatorInterface.cs";
    string IWebServiceFilterOperatorInterfaceClassName   = GetModelClassName(Model, IWebServiceFilterOperatorInterfaceFolder);
    string IWebServiceFilterOperatorInterfaceNameSpace   = GetModelNameSpace(Model, IWebServiceFilterOperatorInterfaceFolder);

    string IWebServiceFilterRsltInterfaceFolder      = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName   = GetModelClassName(Model, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace   = GetModelNameSpace(Model, IWebServiceFilterRsltInterfaceFolder);

    string NotificationEventArgsFolder      = "00228-NotificationEventArgs.cs";
    string NotificationEventArgsClassName   = GetModelClassName(Model, NotificationEventArgsFolder);
    string NotificationEventArgsNameSpace   = GetModelNameSpace(Model, NotificationEventArgsFolder);

    string WebServiceFilterRsltFolder      = "00214-WebServiceFilterRslt.cs";
    string WebServiceFilterRsltClassName   = GetModelClassName(Model, WebServiceFilterRsltFolder);
    string WebServiceFilterRsltNameSpace   = GetModelNameSpace(Model, WebServiceFilterRsltFolder);

    string IWebServiceFilterMenuInterfaceFolder      = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName   = GetModelClassName(Model, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace   = GetModelNameSpace(Model, IWebServiceFilterMenuInterfaceFolder);

    string IWebServiceFilterViewModelInterfaceFolder      = "00239-IWebServiceFilterViewModelInterface.cs";
    string IWebServiceFilterViewModelInterfaceClassName   = GetModelClassName(Model, IWebServiceFilterViewModelInterfaceFolder);
    string IWebServiceFilterViewModelInterfaceNameSpace   = GetModelNameSpace(Model, IWebServiceFilterViewModelInterfaceFolder);

    string FilterDefinitionsPropertyName = "FilterDefinitions";
    string FilterOperatorsPropertyName = "FilterOperators";
    string HiddenFiltersPropertyName = "HiddenFilters";
    string FiltersPropertyName = "Filters";
    string ShowBackBtnPropertyName = "ShowBackBtn";
    string ShowBackBtnVisibilityPropertyName = "ShowBackBtnVisibility";
    string ShowAddFilterBtnPropertyName = "ShowAddFilterBtn";
    string AddFilterBtnVisibilityPropertyName = "AddFilterBtnVisibility";
    string CaptionPropertyName = "Caption";
    string BackBtnClickedCommandPropertyName = "BackBtnClickedCommand";
    string BackBtnClickedCommandAsEventPropertyName = "BackBtnClickedCommandAsEvent";
    string AddFilterBtnClickedCommandPropertyName = "AddFilterBtnClickedCommand";
    string RemoveFilterBtnClickedCommandPropertyName = "RemoveFilterBtnClickedCommand";
    string RemoveAllFiltersBtnClickedCommandPropertyName = "RemoveAllFiltersBtnClickedCommand";
    string ApplyFilterBtnClickedCommandPropertyName = "ApplyFilterBtnClickedCommand";
    string ApplyFilterBtnClickedCommandAsEventPropertyName = "ApplyFilterBtnClickedCommandAsEvent";
    string ContainerMenuItemsPropertyName = "ContainerMenuItems";
    string ContainerMenuItemClickedCommandPropertyName = "ContainerMenuItemClickedCommand";
    string ContainerMenuItemClickedCommandAsEventPropertyName = "ContainerMenuItemClickedCommandAsEvent";

    List<string> nmSpaces = new List<string>();
    if (IWebServiceFilterViewModelInterfaceNameSpace != IWebServiceFilterDefInterfaceNameSpace) nmSpaces.Add(IWebServiceFilterDefInterfaceNameSpace);
    if ((IWebServiceFilterViewModelInterfaceNameSpace != IWebServiceFilterOperatorInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterOperatorInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterOperatorInterfaceNameSpace);
    if ((IWebServiceFilterViewModelInterfaceNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((IWebServiceFilterViewModelInterfaceNameSpace != NotificationEventArgsNameSpace) && (nmSpaces.IndexOf(NotificationEventArgsNameSpace) < 0)) 
        nmSpaces.Add(NotificationEventArgsNameSpace);
    if ((IWebServiceFilterViewModelInterfaceNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);

#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>



namespace <#= IWebServiceFilterViewModelInterfaceNameSpace #> {
    public interface <#= IWebServiceFilterViewModelInterfaceClassName #>
    {
        #region <#= FilterDefinitionsPropertyName #>
        IEnumerable<<#= IWebServiceFilterDefInterfaceClassName #>> <#= FilterDefinitionsPropertyName #> { get; set; }
        #endregion
        #region <#= FilterOperatorsPropertyName #>
        IEnumerable<<#= IWebServiceFilterOperatorInterfaceClassName #>> <#= FilterOperatorsPropertyName #>  { get; set; }
        #endregion
        #region <#= HiddenFiltersPropertyName #>
        IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> <#= HiddenFiltersPropertyName #>  { get; set; }
        #endregion
        #region <#= FiltersPropertyName #>
        ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> <#= FiltersPropertyName #>  { get; set; }
        #endregion
        #region <#= ShowBackBtnPropertyName #>
        bool <#= ShowBackBtnPropertyName #>  { get; set; }
        #endregion
        #region  <#= ShowAddFilterBtnPropertyName #>
        bool <#= ShowAddFilterBtnPropertyName #>  { get; set; }
        #endregion
        #region <#= CaptionPropertyName #>
        string <#= CaptionPropertyName #>  { get; set; }
        #endregion
        #region <#= BackBtnClickedCommandPropertyName #>
        ICommand <#= BackBtnClickedCommandPropertyName #>  { get; }
        event Action<object, <#= NotificationEventArgsClassName #>> <#= BackBtnClickedCommandAsEventPropertyName #>;
        #endregion
        #region <#= AddFilterBtnClickedCommandPropertyName #>
        ICommand <#= AddFilterBtnClickedCommandPropertyName #>   { get;  }
        #endregion
        #region <#= RemoveFilterBtnClickedCommandPropertyName #>
        ICommand <#= RemoveFilterBtnClickedCommandPropertyName #>   { get;  }
        #endregion
        #region <#= RemoveAllFiltersBtnClickedCommandPropertyName #>
        ICommand <#= RemoveAllFiltersBtnClickedCommandPropertyName #>   { get;  }
        #endregion
        #region <#= ApplyFilterBtnClickedCommandPropertyName #>
        ICommand <#= ApplyFilterBtnClickedCommandPropertyName #>   { get;  }
        event Action<object, <#= NotificationEventArgsClassName #>> <#= ApplyFilterBtnClickedCommandAsEventPropertyName #>;
        #endregion
        #region <#= ContainerMenuItemsPropertyName #>
        IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= ContainerMenuItemsPropertyName #>  { get; set; }
        #endregion
        #region <#= ContainerMenuItemClickedCommandPropertyName #>
        ICommand <#= ContainerMenuItemClickedCommandPropertyName #>   { get; }
        event Action<object, <#= NotificationEventArgsClassName #>> <#= ContainerMenuItemClickedCommandAsEventPropertyName #>;
        #endregion
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>