<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Collections.ObjectModel;
using System.Windows.Input;

<#

    string EformModeEnumFolder      = "00026-EformModeEnum.cs";
    string EformModeEnumClassName   = GetContextModelClassName(Context, EformModeEnumFolder);
    string EformModeEnumNameSpace   = GetContextModelNameSpace(Context, EformModeEnumFolder);

//    string IRegionManagerReferenceInterfaceFolder      = "00196-IRegionManagerReferenceInterface.cs";
//    string IRegionManagerReferenceInterfaceClassName   = GetContextModelClassName(Context, IRegionManagerReferenceInterfaceFolder);
//    string IRegionManagerReferenceInterfaceNameSpace   = GetContextModelNameSpace(Context, IRegionManagerReferenceInterfaceFolder);

    string IWebServiceFilterRsltInterfaceFolder      = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string IWebServiceFilterMenuInterfaceFolder      = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterMenuInterfaceFolder);

    string RoutedEventExtFolder                     = "00222-RoutedEventExt.cs";
    string RoutedEventExtClassName                  = GetContextModelClassName(Context, RoutedEventExtFolder);
    string RoutedEventExtNameSpace                  = GetContextModelNameSpace(Context, RoutedEventExtFolder);


    string modelInterfaceFolder                     = "01100-Interface.cs";
    string modelInterfaceClassName                  = GetInterfaceName(Model);
    string modelInterfaceNameSpace                  = GetModelNameSpace(Model, modelInterfaceFolder);

    string SformUserControlFolder                   = "01420-SformUserControl.xaml.cs";
    string SformUserControlClassName                = GetModelClassName(Model, SformUserControlFolder);
    string SformUserControlNameSpace                = GetModelNameSpace(Model, SformUserControlFolder);
    string SformUserControlProject                  = GetModelProjectName(Model, SformUserControlFolder);


    string LformUserControlFolder                   = "01596-LformUserControl.xaml.cs";
    string LformUserControlClassName                = GetModelClassName(Model, LformUserControlFolder);
    string LformUserControlNameSpace                = GetModelNameSpace(Model, LformUserControlFolder);
    string LformUserControlProject                  = GetModelProjectName(Model, LformUserControlFolder);


    string CaptionPropertyName = "Caption";
    string ShowBackBtnPropertyName = "ShowBackBtn";
    string FilterHeightPropertyName = "FilterHeight";
    string ShowFilterPropertyName = "ShowFilter";
    string ShowAddFilterBtnPropertyName = "ShowAddFilterBtn";
    string GridHeightPropertyName = "GridHeight";
    string ContainerMenuItemsPropertyName = "ContainerMenuItems";

    string HiddenFiltersPropertyName = "HiddenFilters";
    string HiddenFiltersPropertyChangedPropertyName = "HiddenFiltersPropertyChanged";

    string TableMenuItemsPropertyName = "TableMenuItems";
    string TableMenuItemsPropertyChangedPropertyName = "TableMenuItemsPropertyChanged";

    string RowMenuItemsPropertyName = "RowMenuItems";
    string RowMenuItemsPropertyChangedPropertyName = "RowMenuItemsPropertyChanged";


    string CanAddPropertyName                   = "CanAdd";
    string CanAddPropertyChangedPropertyName    = "CanAddPropertyChanged";
    string CanUpdPropertyName                   = "CanUpdate";
    string CanUpdPropertyChangedPropertyName    = "CanUpdatePropertyChanged";
    string CanDelPropertyName                   = "CanDelete";
    string CanDelPropertyChangedPropertyName    = "CanDeletePropertyChanged";

    string RegionPropertyName = "Region";
    string LformRegionPropertyName = "LformRegion";
    string ProxyPropertyName = "Proxy";
    string CurrentRegionManagerPropertyName = "CurrentRegionManager";


    List<string> nmSpaces = new List<string>();
    if ((LformUserControlNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((LformUserControlNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((LformUserControlNameSpace != RoutedEventExtNameSpace) && (nmSpaces.IndexOf(RoutedEventExtNameSpace) < 0)) 
        nmSpaces.Add(RoutedEventExtNameSpace);
    if ((LformUserControlNameSpace != modelInterfaceNameSpace) && (nmSpaces.IndexOf(modelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelInterfaceNameSpace);
//    if ((LformUserControlNameSpace != IRegionManagerReferenceInterfaceNameSpace) && (nmSpaces.IndexOf(IRegionManagerReferenceInterfaceNameSpace) < 0)) 
//        nmSpaces.Add(IRegionManagerReferenceInterfaceNameSpace);
    
    bool IsInTheSameModule = (SformUserControlProject == LformUserControlProject);
#>
<#
    if (!IsInTheSameModule) {
#>
// using Prism.Regions;
// using Prism.Common;
// using Prism.Ioc;
<#
    }
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>


namespace <#= LformUserControlNameSpace #> {
    /// <summary>
    /// Interaction logic for <#= LformUserControlClassName #>.xaml
    /// </summary>
    public partial class <#= LformUserControlClassName #>: UserControl //, <#= IRegionManagerReferenceInterfaceClassName #>
    {
//        IContainerProvider _containerProvider;
//        public <#= LformUserControlClassName #>(IContainerProvider containerProvider)
        public <#= LformUserControlClassName #>()
        {
//            _containerProvider = containerProvider;
            InitializeComponent();
<#
    if (!IsInTheSameModule) {
#>
//            ObservableObject<IRegion> <#= SformUserControlClassName #>Observable = RegionManager.GetObservableRegion(this.<#= SformUserControlClassName #><#= ProxyPropertyName #>);
//            <#= SformUserControlClassName #>Observable.PropertyChanged += (s, a) =>
//            {
//                On<#= SformUserControlClassName #>Observable(((ObservableObject<IRegion>)s).Value);
//            };
<#
    }
#>
        }

<#
    if (!IsInTheSameModule) {
#>
//        #region On<#= SformUserControlClassName #>Observable 
//        public void On<#= SformUserControlClassName #>Observable(IRegion region) {
//            if (region != null) {
//                region.RemoveAll();
//                if (region.RegionManager != null) {
//                    UserControl userControl = _containerProvider.Resolve<UserControl>("<#= SformUserControlClassName #>");
//                    region.Add(userControl, null, true);
//                    region.Activate(userControl);
//                }
//            }
//        }
//        #endregion
<#
    }
#>
        

//        #region <#= CurrentRegionManagerPropertyName #>
//        private static void <#= CurrentRegionManagerPropertyName #>Changed(DependencyObject d, DependencyPropertyChangedEventArgs e) {
<#
    if (!IsInTheSameModule) {
#>
//            <#= LformUserControlClassName #> inst = d as <#= LformUserControlClassName #>;
//            if (inst != null)
//            {
//                IRegionManager crm = e.NewValue as IRegionManager;
//                ObservableObject<IRegion> <#= SformUserControlClassName #>Observable = RegionManager.GetObservableRegion(inst.<#= SformUserControlClassName #><#= ProxyPropertyName #>);
//                <#= SformUserControlClassName #>Observable.Value.RegionManager = crm;
//                inst.On<#= SformUserControlClassName #>Observable(<#= SformUserControlClassName #>Observable.Value);
//            }
<#
    }
#>
//        }
//        public static readonly DependencyProperty <#= CurrentRegionManagerPropertyName #>Property =
//                DependencyProperty.Register(
//                "<#= CurrentRegionManagerPropertyName #>", typeof(object),
//                typeof(<#= LformUserControlClassName #>),
//                new PropertyMetadata(null, <#= CurrentRegionManagerPropertyName #>Changed));
//        public object <#= CurrentRegionManagerPropertyName #>
//        {
//            get
//            {
//                return (object)GetValue(<#= CurrentRegionManagerPropertyName #>Property);
//            }
//            set
//            {
//                SetValue(<#= CurrentRegionManagerPropertyName #>Property, value);
//            }
//        }
//        #endregion

        #region <#= CaptionPropertyName #>
        public static readonly DependencyProperty <#= CaptionPropertyName #>Property =
                DependencyProperty.Register(
                "<#= CaptionPropertyName #>", typeof(string),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(null));
        public string <#= CaptionPropertyName #>
        {
            get
            {
                return (string)GetValue(<#= CaptionPropertyName #>Property);
            }
            set
            {
                SetValue(<#= CaptionPropertyName #>Property, value);
            }
        }
        #endregion

        #region <#= ContainerMenuItemsPropertyName #>
        public static readonly DependencyProperty <#= ContainerMenuItemsPropertyName #>Property =
                DependencyProperty.Register(
                "<#= ContainerMenuItemsPropertyName #>", typeof(IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(null));
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= ContainerMenuItemsPropertyName #>
        {
            get
            {
                return (IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>)GetValue(<#= ContainerMenuItemsPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ContainerMenuItemsPropertyName #>Property, value);
            }
        }
        #endregion


        #region <#= HiddenFiltersPropertyName #>
        private static void <#= HiddenFiltersPropertyName #>Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            <#= LformUserControlClassName #> inst = d as <#= LformUserControlClassName #>;
            if (inst != null)
            {
                RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>> eventArgs =
                    new RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>>(
                        e.OldValue as IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>,
                        e.NewValue as IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>,
                        <#= RoutedEventExtClassName #>.<#= HiddenFiltersPropertyChangedPropertyName #>Event);
                inst.RaiseEvent(eventArgs);
            }
        }
        public static readonly DependencyProperty <#= HiddenFiltersPropertyName #>Property =
                DependencyProperty.Register(
                "<#= HiddenFiltersPropertyName #>", typeof(IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(null, <#= HiddenFiltersPropertyName #>Changed));
        public IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> <#= HiddenFiltersPropertyName #>
        {
            get
            {
                return (IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>)GetValue(<#= HiddenFiltersPropertyName #>Property);
            }
            set
            {
                SetValue(<#= HiddenFiltersPropertyName #>Property, value);
            }
        }
        #endregion

        #region <#= FilterHeightPropertyName #>
        public static readonly DependencyProperty <#= FilterHeightPropertyName #>Property =
                DependencyProperty.Register(
                "<#= FilterHeightPropertyName #>", typeof(double),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(double.MaxValue));
        public double <#= FilterHeightPropertyName #>
        {
            get
            {
                return (double)GetValue(<#= FilterHeightPropertyName #>Property);
            }
            set
            {
                SetValue(<#= FilterHeightPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= ShowFilterPropertyName #>
        public static readonly DependencyProperty <#= ShowFilterPropertyName #>Property =
                DependencyProperty.Register(
                "<#= ShowFilterPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(true));
        public bool <#= ShowFilterPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= ShowFilterPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ShowFilterPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= ShowAddFilterBtnPropertyName #>
        public static readonly DependencyProperty <#= ShowAddFilterBtnPropertyName #>Property =
                DependencyProperty.Register(
                "<#= ShowAddFilterBtnPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(true));
        public bool <#= ShowAddFilterBtnPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= ShowAddFilterBtnPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ShowAddFilterBtnPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= ShowBackBtnPropertyName #>
        public static readonly DependencyProperty <#= ShowBackBtnPropertyName #>Property =
                DependencyProperty.Register(
                "<#= ShowBackBtnPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(false));
        public bool <#= ShowBackBtnPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= ShowBackBtnPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ShowBackBtnPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= GridHeightPropertyName #>
        public static readonly DependencyProperty <#= GridHeightPropertyName #>Property =
                DependencyProperty.Register(
                "<#= GridHeightPropertyName #>", typeof(double),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(double.MaxValue));
        public double <#= GridHeightPropertyName #>
        {
            get
            {
                return (double)GetValue(<#= GridHeightPropertyName #>Property);
            }
            set
            {
                SetValue(<#= GridHeightPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= TableMenuItemsPropertyName #>
        private static void <#= TableMenuItemsPropertyName #>Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            <#= LformUserControlClassName #> inst = d as <#= LformUserControlClassName #>;
            if (inst != null)
            {
                RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>> eventArgs =
                    new RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>>(
                        e.OldValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>,
                        e.NewValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>,
                        <#= RoutedEventExtClassName #>.<#= TableMenuItemsPropertyChangedPropertyName #>Event);
                inst.RaiseEvent(eventArgs);
            }
        }
        public static readonly DependencyProperty <#= TableMenuItemsPropertyName #>Property =
                DependencyProperty.Register(
                "<#= TableMenuItemsPropertyName #>", typeof(IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(null, <#= TableMenuItemsPropertyName #>Changed));
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= TableMenuItemsPropertyName #>
        {
            get
            {
                return (IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>)GetValue(<#= TableMenuItemsPropertyName #>Property);
            }
            set
            {
                SetValue(<#= TableMenuItemsPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= RowMenuItemsPropertyName #>
        private static void <#= RowMenuItemsPropertyName #>Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            <#= LformUserControlClassName #> inst = d as <#= LformUserControlClassName #>;
            if (inst != null)
            {
                RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>> eventArgs =
                    new RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>>(
                        e.OldValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>,
                        e.NewValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>,
                        <#= RoutedEventExtClassName #>.<#= RowMenuItemsPropertyChangedPropertyName #>Event);
                inst.RaiseEvent(eventArgs);
            }
        }
        public static readonly DependencyProperty <#= RowMenuItemsPropertyName #>Property =
                DependencyProperty.Register(
                "<#= RowMenuItemsPropertyName #>", typeof(IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(null, <#= RowMenuItemsPropertyName #>Changed));
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= RowMenuItemsPropertyName #>
        {
            get
            {
                return (IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>)GetValue(<#= RowMenuItemsPropertyName #>Property);
            }
            set
            {
                SetValue(<#= RowMenuItemsPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= CanAddPropertyName #>
        private static void <#= CanAddPropertyName #>Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            <#= LformUserControlClassName #> inst = d as <#= LformUserControlClassName #>;
            if (inst != null)
            {
                
                bool oldVal = false;
                if (e.OldValue is bool) oldVal = (bool)e.OldValue;
                bool newVal = false;
                if (e.NewValue is bool) newVal = (bool)e.NewValue;

                RoutedPropertyChangedEventArgs<bool> eventArgs =
                    new RoutedPropertyChangedEventArgs<bool>(
                        oldVal,
                        newVal,
                        <#= RoutedEventExtClassName #>.<#= CanAddPropertyChangedPropertyName #>Event);
                inst.RaiseEvent(eventArgs);
            }
        }
        public static readonly DependencyProperty <#= CanAddPropertyName #>Property =
                DependencyProperty.Register(
                "<#= CanAddPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(false, <#= CanAddPropertyName #>Changed));
        public bool <#= CanAddPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= CanAddPropertyName #>Property);
            }
            set
            {
                SetValue(<#= CanAddPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= CanUpdPropertyName #>
        private static void <#= CanUpdPropertyName #>Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            <#= LformUserControlClassName #> inst = d as <#= LformUserControlClassName #>;
            if (inst != null)
            {
                
                bool oldVal = false;
                if (e.OldValue is bool) oldVal = (bool)e.OldValue;
                bool newVal = false;
                if (e.NewValue is bool) newVal = (bool)e.NewValue;

                RoutedPropertyChangedEventArgs<bool> eventArgs =
                    new RoutedPropertyChangedEventArgs<bool>(
                        oldVal,
                        newVal,
                        <#= RoutedEventExtClassName #>.<#= CanUpdPropertyChangedPropertyName #>Event);
                inst.RaiseEvent(eventArgs);
            }
        }
        public static readonly DependencyProperty <#= CanUpdPropertyName #>Property =
                DependencyProperty.Register(
                "<#= CanUpdPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(false, <#= CanUpdPropertyName #>Changed));
        public bool <#= CanUpdPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= CanUpdPropertyName #>Property);
            }
            set
            {
                SetValue(<#= CanUpdPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= CanDelPropertyName #>
        private static void <#= CanDelPropertyName #>Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            <#= LformUserControlClassName #> inst = d as <#= LformUserControlClassName #>;
            if (inst != null)
            {
                
                bool oldVal = false;
                if (e.OldValue is bool) oldVal = (bool)e.OldValue;
                bool newVal = false;
                if (e.NewValue is bool) newVal = (bool)e.NewValue;

                RoutedPropertyChangedEventArgs<bool> eventArgs =
                    new RoutedPropertyChangedEventArgs<bool>(
                        oldVal,
                        newVal,
                        <#= RoutedEventExtClassName #>.<#= CanDelPropertyChangedPropertyName #>Event);
                inst.RaiseEvent(eventArgs);
            }
        }
        public static readonly DependencyProperty <#= CanDelPropertyName #>Property =
                DependencyProperty.Register(
                "<#= CanDelPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlClassName #>),
                new PropertyMetadata(false, <#= CanDelPropertyName #>Changed));
        public bool <#= CanDelPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= CanDelPropertyName #>Property);
            }
            set
            {
                SetValue(<#= CanDelPropertyName #>Property, value);
            }
        }
        #endregion







    }
}

<#+
    string GetModelPageName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.PageViewName);
    }
    string GetModelServiceInterfaceName(ModelViewSerializable model) {
        return "I" + GetModelServiceName(model);
    }
    string GetModelServiceName(ModelViewSerializable model) {
        return GetModelName(model) + "Service";
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetFilterInterfaceName(ModelViewSerializable model) {
        return "I" + GetFilterName(model);
    }
    string GetFilterName(ModelViewSerializable model) {
        return GetModelName(model) + "Filter";
    }
    string GetPageInterfaceName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+GetModelName(model);
    }
    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelProjectName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetModelPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetModelPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetDisplayAttributeValueString(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string propName) {
            if (prop == null)
            {
                return "";
            }
            if(prop.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                prop.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }

    string GetDisplayAttributeValueStringEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetDisplayAttributeValueStringEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxLenEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMaxLenEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxVal(sclrProp, model);
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    List<ModelViewPropertyOfVwSerializable> GetPropsByForeignKey(ModelViewSerializable model, ModelViewForeignKeySerializable foreignKey) {
        List<ModelViewPropertyOfVwSerializable> result= new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (foreignKey == null)) {
            return result;
        }
        if (foreignKey.PrincipalKeyProps == null || foreignKey.ForeignKeyProps == null || model.ScalarProperties == null) {
            return result;
        }
        if ((foreignKey.PrincipalKeyProps.Count != foreignKey.ForeignKeyProps.Count) || (foreignKey.ForeignKeyProps.Count < 1)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.PrincipalKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (foreignKey.NavigationName == p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }

#>