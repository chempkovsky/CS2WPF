<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="System.String" name="DefaultProjectNameSpace" #>

<#

    string aspnetrolemaskFolder         = "00440-aspnetrolemask.cs";
    string aspnetmodelFolder            = "00450-aspnetmodel.cs";
    string aspnetdashboardFolder        = "00460-aspnetdashboard.cs";

    string aspnetchckdbcontextFolder    = "00470-aspnetchckdbcontext.cs";

#>

using System;
using System.Linq;
using System.Web;
using System.Collections.Generic;
using System.Data.Entity;



namespace <#= GetNameSpaceName(Model, aspnetchckdbcontextFolder, DefaultProjectNameSpace) #>
{
    public class <#= GetEntityClassName(Model, aspnetchckdbcontextFolder) #> : DbContext
    {

        public <#= GetEntityClassName(Model, aspnetchckdbcontextFolder) #>()
          : base("name=DefaultConnection")
        {
        }

        public <#= GetEntityClassName(Model, aspnetchckdbcontextFolder) #>(string ConnectionString)
          : base("name=" + ConnectionString)
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<<#= GetEntityClassName(Model, aspnetmodelFolder) #>>().
                Property(p => p.ModelPk).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            modelBuilder.Entity<<#= GetEntityClassName(Model, aspnetdashboardFolder) #>>().
                Property(p => p.DashboardPk).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);


            modelBuilder.Entity<<#= GetEntityClassName(Model, aspnetmodelFolder) #>>().HasKey(p => p.ModelPk);
            modelBuilder.Entity<<#= GetEntityClassName(Model, aspnetdashboardFolder) #>>().HasKey(p => p.DashboardPk);
            modelBuilder.Entity<<#= GetEntityClassName(Model, aspnetrolemaskFolder) #>>().HasKey(p => p.RoleName);

        }

        public DbSet< <#= GetEntityClassName(Model, aspnetmodelFolder) #> > aspnetmodellDbSet
        {
            get;
            set;
        }

        public DbSet< <#= GetEntityClassName(Model, aspnetdashboardFolder) #> > aspnetdashboardDbSet
        {
            get;
            set;
        }

        public DbSet< <#= GetEntityClassName(Model, aspnetrolemaskFolder) #> > aspnetrolemaskDbSet
        {
            get;
            set;
        }

    }
}

<#+
    string GetEntityClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName;
    }
    string GetNameSpaceName(ModelViewSerializable model, string currFolder, string  DefaultProjectNameSpace) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if (curItem == null) {
            return result;
        }
        result = curItem.FileFolder.Replace("\\",".");
        if(string.IsNullOrEmpty(DefaultProjectNameSpace)) {
            return result;
        } 
        return DefaultProjectNameSpace + "." + result;
    }


#>