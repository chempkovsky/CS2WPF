<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System.Collections.Generic;
using System.Threading.Tasks;
<#


    string modelInterfaceFolder                         = "01100-Interface.cs";
    string modelInterfaceClassName                      = GetInterfaceName(Model);
    string modelInterfaceNameSpace                      = GetModelNameSpace(Model, modelInterfaceFolder);

    string DshPermissionInterfaceFolder         = "01120-DshPermissionInterface.cs";
    string DshPermissionInterfaceClassName      = GetModelPermissionInterfaceName(Model);
    string DshPermissionInterfaceNameSpace      = GetModelNameSpace(Model, DshPermissionInterfaceFolder);

    string DshPermissionFolder                  = "01122-DshPermission.cs";
    string DshPermissionClassName               = GetModelPermissionName(Model);
    string DshPermissionNameSpace               = GetModelNameSpace(Model, DshPermissionFolder);

    string DshPermissionNotifyInterfaceFolder      = "01124-DshPermissionNotifyInterface.cs";
    string DshPermissionNotifyInterfaceClassName   = GetModelPermissionNotifyInterfaceName(Model);
    string DshPermissionNotifyInterfaceNameSpace   = GetModelNameSpace(Model, DshPermissionNotifyInterfaceFolder);

    string DshPermissionNotifyFolder                = "01126-DshPermissionNotify.cs";
    string DshPermissionNotifyClassName             = GetModelPermissionNotifyName(Model);
    string DshPermissionNotifyNameSpace             = GetModelNameSpace(Model, DshPermissionNotifyFolder);

    string modelServiceInterfaceFolder                  = "01400-Service.interface.cs";
    string modelServiceInterfaceClassName               = GetModelServiceInterfaceName(Model);
    string modelServiceInterfaceNameSpace               = GetModelNameSpace(Model, modelServiceInterfaceFolder);

    string ServiceCopyDshPermissionInterfaceFolder       = "01412-ServiceCopyDshPermission.interface.cs";
    string ServiceCopyDshPermissionInterfaceClassName    = GetModelServiceCopyPermissionInterfaceName(Model);
    string ServiceCopyDshPermissionInterfaceNameSpace    = GetModelNameSpace(Model, ServiceCopyDshPermissionInterfaceFolder);

    string ServiceCopyDshPermissionFolder                  = "01414-ServiceCopyDshPermission.cs";
    string ServiceCopyDshPermissionClassName               = GetModelServiceCopyPermissionName(Model);
    string ServiceCopyDshPermissionNameSpace               = GetModelNameSpace(Model, ServiceCopyDshPermissionFolder);

    string CopyToModelMethodName            = "CopyToModel";
    string CopyToModelNotifyMethodName      = "CopyToModelNotify";
    string FormRootServicePropertyName      = "FrmRootSrv";

    string CopyToModelPermissionNotifyMethodName = "CopyToModelPermissionNotify";
    string CopyToModelPermissionMethodName = "CopyToModelPermission";


    List<string> nmSpaces = new List<string>();
    if ((ServiceCopyDshPermissionNameSpace != ServiceCopyDshPermissionInterfaceNameSpace) && (nmSpaces.IndexOf(ServiceCopyDshPermissionInterfaceNameSpace) < 0)) 
        nmSpaces.Add(ServiceCopyDshPermissionInterfaceNameSpace);
    if ((ServiceCopyDshPermissionNameSpace != modelInterfaceNameSpace) && (nmSpaces.IndexOf(modelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelInterfaceNameSpace);
    if ((ServiceCopyDshPermissionNameSpace != DshPermissionNotifyInterfaceNameSpace) && (nmSpaces.IndexOf(DshPermissionNotifyInterfaceNameSpace) < 0)) 
        nmSpaces.Add(DshPermissionNotifyInterfaceNameSpace);
    if ((ServiceCopyDshPermissionNameSpace != DshPermissionInterfaceNameSpace) && (nmSpaces.IndexOf(DshPermissionInterfaceNameSpace) < 0)) 
        nmSpaces.Add(DshPermissionInterfaceNameSpace);
    if ((ServiceCopyDshPermissionNameSpace != DshPermissionNameSpace) && (nmSpaces.IndexOf(DshPermissionNameSpace) < 0)) 
        nmSpaces.Add(DshPermissionNameSpace);
    if ((ServiceCopyDshPermissionNameSpace != DshPermissionNotifyNameSpace) && (nmSpaces.IndexOf(DshPermissionNotifyNameSpace) < 0)) 
        nmSpaces.Add(DshPermissionNotifyNameSpace);
    if ((ServiceCopyDshPermissionNameSpace != modelServiceInterfaceNameSpace) && (nmSpaces.IndexOf(modelServiceInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelServiceInterfaceNameSpace);




#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

/*
    In the file of IModule-class of the project for the current service the following lines of code must be inserted:

        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            containerRegistry.Register<<#= ServiceCopyDshPermissionInterfaceClassName #>, <#= ServiceCopyDshPermissionClassName #>>();
            ...
        }

*/

namespace <#= ServiceCopyDshPermissionNameSpace #> {
    public class <#= ServiceCopyDshPermissionClassName #>: <#= ServiceCopyDshPermissionInterfaceClassName #>
    {
        protected <#= modelServiceInterfaceClassName #> <#= FormRootServicePropertyName #>=null;
        
        public <#= ServiceCopyDshPermissionClassName #>(<#= modelServiceInterfaceClassName #> <#= FormRootServicePropertyName #>) {
            this.<#= FormRootServicePropertyName #> = <#= FormRootServicePropertyName #>;
        }

        public <#= DshPermissionNotifyInterfaceClassName #> <#= CopyToModelPermissionNotifyMethodName #>(<#= modelInterfaceClassName #>  src, <#= DshPermissionNotifyInterfaceClassName #> dest = null) {
            if (dest == null) dest = new <#= DshPermissionNotifyClassName #>();
            if (src != null) {
                return <#= FormRootServicePropertyName #>.<#= CopyToModelNotifyMethodName #>(src, dest) as <#= DshPermissionNotifyInterfaceClassName #>;
            }
            return dest;
        }
        public <#= DshPermissionInterfaceClassName #> <#= CopyToModelPermissionMethodName #>(<#= modelInterfaceClassName #>  src, <#= DshPermissionInterfaceClassName #> dest = null) {
            if (dest == null) dest = new <#= DshPermissionClassName #>();
            if (src != null) {
                return <#= FormRootServicePropertyName #>.<#= CopyToModelMethodName #>(src, dest) as <#= DshPermissionInterfaceClassName #>;
            }
            return dest;
        }
    }
}

<#+
    string GetModelPermissionInterfaceName(ModelViewSerializable model) {
        return "I"+ GetModelPermissionName(model);
    }
    string GetModelPermissionName(ModelViewSerializable model) {
        return GetModelName(model) + "Permission";
    }
    string GetModelPermissionNotifyInterfaceName(ModelViewSerializable model) {
        return "I"+ GetModelPermissionNotifyName(model);
    }
    string GetModelPermissionNotifyName(ModelViewSerializable model) {
        return GetModelName(model) + "PermissionNotify";
    }

    string GetModelServiceInterfaceName(ModelViewSerializable model) {
        return "I" + GetModelServiceName(model);
    }
    string GetModelServiceName(ModelViewSerializable model) {
        return GetModelName(model) + "Service";
    }
    string GetModelServiceCopyPermissionName(ModelViewSerializable model) {
        return GetModelServiceName(model) + "CopyPermission";
    }
    string GetModelServiceCopyPermissionInterfaceName(ModelViewSerializable model) {
        return "I" + GetModelServiceCopyPermissionName(model);
    }

    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetFilterInterfaceName(ModelViewSerializable model) {
        return "I" + GetFilterName(model);
    }
    string GetFilterName(ModelViewSerializable model) {
        return GetModelName(model) + "Filter";
    }
    string GetPageInterfaceName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+GetModelName(model);
    }
    string GetNotifyInterfaceName(ModelViewSerializable model) {
        return GetInterfaceName(model) + "Notify";
    }
    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string AttribToString(ModelViewAttributeSerializable attr) {
        if(attr == null) return "";
        string result= "[" + attr.AttrName; 
        if (attr.VaueProperties == null) {
            return result + "]";
        }
        if (attr.VaueProperties.Count < 1) {
            return result + "]";
        }
        result = result + "(";
        bool insComma= false;
        foreach(ModelViewAttributePropertySerializable valProp in attr.VaueProperties) {
            if (insComma) {
                result =  result + ",";
            } else {
                insComma = true;
            }
            if(! string.IsNullOrEmpty(valProp.PropName) ) {
                if (! valProp.PropName.Contains("...") ) {
                    result =  result + valProp.PropName + "=";
                }
            }
            result =  result + valProp.PropValue;
        }
        return result + ")]";
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }

#>