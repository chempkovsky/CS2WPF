<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    
    string IconFontFolder      = "00178-IconFont.cs";
    string IconFontClassName   = GetModelClassName(Model, IconFontFolder);
    string IconFontNameSpace   = GetModelNameSpace(Model, IconFontFolder);


#>

namespace <#= IconFontNameSpace #> {
    public static class  <#= IconFontClassName #>
    {

		public const string West = "\uf1e6";
		public const string East = "\uf1df";

		public const string Close = "\ue5cd";
		public const string Delete_outline = "\ue92e";

		public const string More_vert = "\ue5d4";
		public const string More_horiz = "\ue5d3";

		public const string Menu = "\ue5d2";
		public const string Settings = "\ue8b8";

		public const string Replay = "\ue042";

		public const string Arrow_back = "\ue5c4";
		public const string Filter_9_plus = "\ue3da";
		public const string Filter_none = "\ue3e0";
		public const string Refresh = "\ue5d5";
		public const string Chevron_left = "\ue5cb";
		public const string Chevron_right = "\ue5cc";
		public const string Arrow_left = "\ue5de";
		public const string Arrow_right = "\ue5df";
		public const string Arrow_forward = "\ue5c8";
        public const string Info_outline = "\ue88f";
        public const string Expand_less = "\ue5ce";
	    public const string Expand_more = "\ue5cf";
	    public const string Arrow_drop_down = "\ue5c5";
	    public const string Arrow_drop_up = "\ue5c7";
        public const string Search = "\ue8b6";
        public const string Info = "\ue88e"; // info
        public const string Home = "\ue88a"; // home
        public const string Unpublished = "\uf236"; // page not found
        public const string Pan_tool = "\ue925"; // Access Denied
        public const string Warning = "\ue002"; // Warning
		public const string Error_outline = "\ue001";
		public const string Error = "\ue000";
        public const string Remove_red_eye = "\ue417";
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>