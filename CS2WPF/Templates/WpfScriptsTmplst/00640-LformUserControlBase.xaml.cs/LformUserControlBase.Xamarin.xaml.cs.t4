<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using Xamarin.Forms;
using System.Collections.Generic;
using System.Windows.Input;

<#
    string BindingContextFeedbackFolder             = "00166-BindingContextFeedback.cs";
    string BindingContextFeedbackClassName          = GetModelClassName(Model, BindingContextFeedbackFolder);
    string BindingContextFeedbackNameSpace          = GetModelNameSpace(Model, BindingContextFeedbackFolder);

    string ContentViewWithBCFeedbackFolder          = "00168-ContentViewWithBCFeedback.cs";
    string ContentViewWithBCFeedbackClassName       = GetModelClassName(Model, ContentViewWithBCFeedbackFolder);
    string ContentViewWithBCFeedbackNameSpace       = GetModelNameSpace(Model, ContentViewWithBCFeedbackFolder);

    string ILformViewModelInterfaceFolder           = "00197-ILformViewModelInterface.cs";
    string ILformViewModelInterfaceClassName        = GetModelClassName(Model, ILformViewModelInterfaceFolder);
    string ILformViewModelInterfaceNameSpace        = GetModelNameSpace(Model, ILformViewModelInterfaceFolder);

    string IWebServiceFilterRsltInterfaceFolder     = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName  = GetModelClassName(Model, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace  = GetModelNameSpace(Model, IWebServiceFilterRsltInterfaceFolder);

    string IWebServiceFilterMenuInterfaceFolder     = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName  = GetModelClassName(Model, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace  = GetModelNameSpace(Model, IWebServiceFilterMenuInterfaceFolder);

    string IBindingContextChangedFolder             = "00220-IBindingContextChanged.cs";
    string IBindingContextChangedClassName          = GetModelClassName(Model, IBindingContextChangedFolder);
    string IBindingContextChangedNameSpace          = GetModelNameSpace(Model, IBindingContextChangedFolder);

    string LformUserControlBaseFolder               = "00640-LformUserControlBase.xaml.cs";
    string LformUserControlBaseClassName            = GetModelClassName(Model, LformUserControlBaseFolder);
    string LformUserControlBaseNameSpace            = GetModelNameSpace(Model, LformUserControlBaseFolder);
    string LformUserControlBaseProject              = GetModelProjectName(Model, LformUserControlBaseFolder);


    string CaptionPropertyName                          = "Caption";
    string FilterHeightPropertyName                     = "FilterHeight";
    string ShowFilterPropertyName                       = "ShowFilter";
    string ShowAddFilterBtnPropertyName                 = "ShowAddFilterBtn";
    string GridHeightPropertyName                       = "GridHeight";

    string HiddenFiltersPropertyName                    = "HiddenFilters";
    string HiddenFiltersPropertyChangedPropertyName     = "HiddenFiltersPropertyChanged";




    string CanAddPropertyName                   = "CanAdd";
    string CanAddPropertyChangedPropertyName    = "CanAddPropertyChanged";
    string CanUpdPropertyName                   = "CanUpdate";
    string CanUpdPropertyChangedPropertyName    = "CanUpdatePropertyChanged";
    string CanDelPropertyName                   = "CanDelete";
    string CanDelPropertyChangedPropertyName    = "CanDeletePropertyChanged";

    string RegionPropertyName                   = "Region";
    string LformRegionPropertyName              = "LformRegion";
    string ProxyPropertyName                    = "Proxy";
    string CurrentRegionManagerPropertyName     = "CurrentRegionManager";

    string ContainerMenuItemsPropertyName           = "ContainerMenuItems";
    string ContainerMenuItemsCommandPropertyName    = "ContainerMenuItemsCommand";
    string OnContainerMenuItemsCommandPropertyName  = "OnContainerMenuItemsCommand";

    string ShowBackBtnPropertyName                  = "ShowBackBtn";
    string NavigationBackCommandPropertyName        = "NavigationBackCommand";
    string OnNavigationBackCommandPropertyName      = "OnNavigationBackCommand";

    string TableMenuItemsPropertyName               = "TableMenuItems";
    string TableMenuItemsPropertyChangedPropertyName= "TableMenuItemsPropertyChanged";
    string TableMenuItemsCommandPropertyName        = "TableMenuItemsCommand";

    string RowMenuItemsPropertyName                 = "RowMenuItems";
    string RowMenuItemsPropertyChangedPropertyName  = "RowMenuItemsPropertyChanged";
    string RowMenuItemsCommandPropertyName          = "RowMenuItemsCommand";

    string SelectedRowPropertyName                  = "SelectedRow";
    string SelectedRowCommandPropertyName           = "SelectedRowCommand";


    string SformAfterAddItemCommandPropertyName     = "SformAfterAddItemCommand";
    string SformAfterUpdItemCommandPropertyName     = "SformAfterUpdItemCommand";
    string SformAfterDelItemCommandPropertyName     = "SformAfterDelItemCommand";

    string BindingContextFeedbackRefPropertyName    = "BindingContextFeedbackRef";
    string OnBindingContextChangedPropertyName      = "OnBindingContextChanged";

    string OnLoadedCommandPropertyName              = "OnLoadedCommand";
    string OnLoadedPropertyName                     = "OnLoaded";


    List<string> nmSpaces = new List<string>();
    if ((LformUserControlBaseNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((LformUserControlBaseNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((LformUserControlBaseNameSpace != ContentViewWithBCFeedbackNameSpace) && (nmSpaces.IndexOf(ContentViewWithBCFeedbackNameSpace) < 0)) 
        nmSpaces.Add(ContentViewWithBCFeedbackNameSpace);
    if ((LformUserControlBaseNameSpace != ILformViewModelInterfaceNameSpace) && (nmSpaces.IndexOf(ILformViewModelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(ILformViewModelInterfaceNameSpace);
    if ((LformUserControlBaseNameSpace != BindingContextFeedbackNameSpace) && (nmSpaces.IndexOf(BindingContextFeedbackNameSpace) < 0)) 
        nmSpaces.Add(BindingContextFeedbackNameSpace);
    
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>


namespace <#= LformUserControlBaseNameSpace #> {
    /// <summary>
    /// Interaction logic for <#= LformUserControlBaseClassName #>.xaml
    /// </summary>
    public class <#= LformUserControlBaseClassName #>: <#= ContentViewWithBCFeedbackClassName #>
    {
        //public <#= LformUserControlBaseClassName #>()
        //{
        //    InitializeComponent();
        //}

        #region On<#= BindingContextFeedbackRefPropertyName #>
        protected override void On<#= BindingContextFeedbackRefPropertyName #>(object v)
        {
            <#= BindingContextFeedbackClassName #> bcf = v as <#= BindingContextFeedbackClassName #>;
            if(bcf == null) return;
            if(string.IsNullOrEmpty(bcf.BcfName)) return;
		    if(bcf.BcfName == "<#= SelectedRowPropertyName #>") {
                ICommand cmd = <#= SelectedRowCommandPropertyName #>; 
                if(cmd != null) {
                    if(cmd.CanExecute(bcf.BcfData))
                        cmd.Execute(bcf.BcfData);
                }
            } else if(bcf.BcfName == "<#= RowMenuItemsCommandPropertyName #>") {
                ICommand cmd = <#= RowMenuItemsCommandPropertyName #>; 
                if(cmd != null) {
                    if(cmd.CanExecute(bcf.BcfData))
                        cmd.Execute(bcf.BcfData);
                }  
            } else if(bcf.BcfName == "<#= TableMenuItemsCommandPropertyName #>") {
                ICommand cmd = <#= TableMenuItemsCommandPropertyName #>; 
                if(cmd != null) {
                    if(cmd.CanExecute(bcf.BcfData))
                        cmd.Execute(bcf.BcfData);
                }
            } else if(bcf.BcfName == "<#= SformAfterAddItemCommandPropertyName #>") {
                ICommand cmd = <#= SformAfterAddItemCommandPropertyName #>; 
                if(cmd != null) {
                    if(cmd.CanExecute(bcf.BcfData))
                        cmd.Execute(bcf.BcfData);
                }
            } else if(bcf.BcfName == "<#= SformAfterUpdItemCommandPropertyName #>") {
                ICommand cmd = <#= SformAfterUpdItemCommandPropertyName #>; 
                if(cmd != null) {
                    if(cmd.CanExecute(bcf.BcfData))
                        cmd.Execute(bcf.BcfData);
                }
            } else if(bcf.BcfName == "<#= SformAfterDelItemCommandPropertyName #>") {
                ICommand cmd = <#= SformAfterDelItemCommandPropertyName #>; 
                if(cmd != null) {
                    if(cmd.CanExecute(bcf.BcfData))
                        cmd.Execute(bcf.BcfData);
                }
            }
        }
        #endregion

        #region <#= SformAfterAddItemCommandPropertyName #>
        public static readonly BindableProperty <#= SformAfterAddItemCommandPropertyName #>Property =
                BindableProperty.Create(
                "<#= SformAfterAddItemCommandPropertyName #>", typeof(ICommand),
                typeof(<#= LformUserControlBaseClassName #>),
                null);
        public ICommand <#= SformAfterAddItemCommandPropertyName #>
        {
            get
            {
                return (ICommand)GetValue(<#= SformAfterAddItemCommandPropertyName #>Property);
            }
            set
            {
                SetValue(<#= SformAfterAddItemCommandPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= SformAfterUpdItemCommandPropertyName #>
        public static readonly BindableProperty <#= SformAfterUpdItemCommandPropertyName #>Property =
                BindableProperty.Create(
                "<#= SformAfterUpdItemCommandPropertyName #>", typeof(ICommand),
                typeof(<#= LformUserControlBaseClassName #>),
                null);
        public ICommand <#= SformAfterUpdItemCommandPropertyName #>
        {
            get
            {
                return (ICommand)GetValue(<#= SformAfterUpdItemCommandPropertyName #>Property);
            }
            set
            {
                SetValue(<#= SformAfterUpdItemCommandPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= SformAfterDelItemCommandPropertyName #>
        public static readonly BindableProperty <#= SformAfterDelItemCommandPropertyName #>Property =
                BindableProperty.Create(
                "<#= SformAfterDelItemCommandPropertyName #>", typeof(ICommand),
                typeof(<#= LformUserControlBaseClassName #>),
                null);
        public ICommand <#= SformAfterDelItemCommandPropertyName #>
        {
            get
            {
                return (ICommand)GetValue(<#= SformAfterDelItemCommandPropertyName #>Property);
            }
            set
            {
                SetValue(<#= SformAfterDelItemCommandPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= TableMenuItemsCommandPropertyName #>
        public static readonly BindableProperty <#= TableMenuItemsCommandPropertyName #>Property =
                BindableProperty.Create(
                "<#= TableMenuItemsCommandPropertyName #>", typeof(ICommand),
                typeof(<#= LformUserControlBaseClassName #>),
                null);
        public ICommand <#= TableMenuItemsCommandPropertyName #>
        {
            get
            {
                return (ICommand)GetValue(<#= TableMenuItemsCommandPropertyName #>Property);
            }
            set
            {
                SetValue(<#= TableMenuItemsCommandPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= RowMenuItemsCommandPropertyName #>
        public static readonly BindableProperty <#= RowMenuItemsCommandPropertyName #>Property =
                BindableProperty.Create(
                "<#= RowMenuItemsCommandPropertyName #>", typeof(ICommand),
                typeof(<#= LformUserControlBaseClassName #>),
                null);
        public ICommand <#= RowMenuItemsCommandPropertyName #>
        {
            get
            {
                return (ICommand)GetValue(<#= RowMenuItemsCommandPropertyName #>Property);
            }
            set
            {
                SetValue(<#= RowMenuItemsCommandPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= SelectedRowCommandPropertyName #>
        public static readonly BindableProperty <#= SelectedRowCommandPropertyName #>Property =
                BindableProperty.Create(
                "<#= SelectedRowCommandPropertyName #>", typeof(ICommand),
                typeof(<#= LformUserControlBaseClassName #>),
                null);
        public ICommand <#= SelectedRowCommandPropertyName #>
        {
            get
            {
                return (ICommand)GetValue(<#= SelectedRowCommandPropertyName #>Property);
            }
            set
            {
                SetValue(<#= SelectedRowCommandPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= CaptionPropertyName #>
        public static readonly BindableProperty <#= CaptionPropertyName #>Property =
                BindableProperty.Create(
                "<#= CaptionPropertyName #>", typeof(string),
                typeof(<#= LformUserControlBaseClassName #>),
                null);
        public string <#= CaptionPropertyName #>
        {
            get
            {
                return (string)GetValue(<#= CaptionPropertyName #>Property);
            }
            set
            {
                SetValue(<#= CaptionPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= FilterHeightPropertyName #>
        public static readonly BindableProperty <#= FilterHeightPropertyName #>Property =
                BindableProperty.Create(
                "<#= FilterHeightPropertyName #>", typeof(double),
                typeof(<#= LformUserControlBaseClassName #>),
                -1d);
        public double <#= FilterHeightPropertyName #>
        {
            get
            {
                return (double)GetValue(<#= FilterHeightPropertyName #>Property);
            }
            set
            {
                SetValue(<#= FilterHeightPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= ShowFilterPropertyName #>
        public static readonly BindableProperty <#= ShowFilterPropertyName #>Property =
                BindableProperty.Create(
                "<#= ShowFilterPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlBaseClassName #>),
                true);
        public bool <#= ShowFilterPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= ShowFilterPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ShowFilterPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= ShowAddFilterBtnPropertyName #>
        public static readonly BindableProperty <#= ShowAddFilterBtnPropertyName #>Property =
                BindableProperty.Create(
                "<#= ShowAddFilterBtnPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlBaseClassName #>),
                true);
        public bool <#= ShowAddFilterBtnPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= ShowAddFilterBtnPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ShowAddFilterBtnPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= GridHeightPropertyName #>
        public static readonly BindableProperty <#= GridHeightPropertyName #>Property =
                BindableProperty.Create(
                "<#= GridHeightPropertyName #>", typeof(double),
                typeof(<#= LformUserControlBaseClassName #>),
                -1d);
        public double <#= GridHeightPropertyName #>
        {
            get
            {
                return (double)GetValue(<#= GridHeightPropertyName #>Property);
            }
            set
            {
                SetValue(<#= GridHeightPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= ShowBackBtnPropertyName #>
        public static readonly BindableProperty <#= ShowBackBtnPropertyName #>Property =
                BindableProperty.Create(
                "<#= ShowBackBtnPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlBaseClassName #>),
                false);
        public bool <#= ShowBackBtnPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= ShowBackBtnPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ShowBackBtnPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= TableMenuItemsPropertyName #>
        private static void <#= TableMenuItemsPropertyName #>Changed(BindableObject d, object oldValue, object newValue)
        {
            <#= LformUserControlBaseClassName #> inst = d as <#= LformUserControlBaseClassName #>;
            if (inst != null)
            {
                <#= ILformViewModelInterfaceClassName #> bc = inst.BindingContext as <#= ILformViewModelInterfaceClassName #>;
                if(bc != null)
                    bc.<#= TableMenuItemsPropertyChangedPropertyName #>(inst, oldValue, newValue);
           }
        }
        public static readonly BindableProperty <#= TableMenuItemsPropertyName #>Property =
                BindableProperty.Create(
                "<#= TableMenuItemsPropertyName #>", typeof(IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>),
                typeof(<#= LformUserControlBaseClassName #>),
                null, propertyChanged: <#= TableMenuItemsPropertyName #>Changed);
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= TableMenuItemsPropertyName #>
        {
            get
            {
                return (IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>)GetValue(<#= TableMenuItemsPropertyName #>Property);
            }
            set
            {
                SetValue(<#= TableMenuItemsPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= RowMenuItemsPropertyName #>
        private static void <#= RowMenuItemsPropertyName #>Changed(BindableObject d, object oldValue, object newValue)
        {
            <#= LformUserControlBaseClassName #> inst = d as <#= LformUserControlBaseClassName #>;
            if (inst != null)
            {
                <#= ILformViewModelInterfaceClassName #> bc = inst.BindingContext as <#= ILformViewModelInterfaceClassName #>;
                if(bc != null)
                    bc.<#= RowMenuItemsPropertyChangedPropertyName #>(inst, oldValue, newValue);
            }
        }
        public static readonly BindableProperty <#= RowMenuItemsPropertyName #>Property =
                BindableProperty.Create(
                "<#= RowMenuItemsPropertyName #>", typeof(IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>),
                typeof(<#= LformUserControlBaseClassName #>),
                null, propertyChanged: <#= RowMenuItemsPropertyName #>Changed);
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= RowMenuItemsPropertyName #>
        {
            get
            {
                return (IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>)GetValue(<#= RowMenuItemsPropertyName #>Property);
            }
            set
            {
                SetValue(<#= RowMenuItemsPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= ContainerMenuItemsPropertyName #>
        public static readonly BindableProperty <#= ContainerMenuItemsPropertyName #>Property =
                BindableProperty.Create(
                "<#= ContainerMenuItemsPropertyName #>", typeof(IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>),
                typeof(<#= LformUserControlBaseClassName #>),
                null);
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= ContainerMenuItemsPropertyName #>
        {
            get
            {
                return (IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>)GetValue(<#= ContainerMenuItemsPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ContainerMenuItemsPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= HiddenFiltersPropertyName #>
        private static void <#= HiddenFiltersPropertyName #>Changed(BindableObject d, object oldValue, object newValue)
        {
            <#= LformUserControlBaseClassName #> inst = d as <#= LformUserControlBaseClassName #>;
            if (inst != null)
            {
                <#= ILformViewModelInterfaceClassName #> bc = inst.BindingContext as <#= ILformViewModelInterfaceClassName #>;
                if(bc != null)
                    bc.<#= HiddenFiltersPropertyChangedPropertyName #>(inst, oldValue, newValue);
            }
        }
        public static readonly BindableProperty <#= HiddenFiltersPropertyName #>Property =
                BindableProperty.Create(
                "<#= HiddenFiltersPropertyName #>", typeof(IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>),
                typeof(<#= LformUserControlBaseClassName #>),
                null, propertyChanged: <#= HiddenFiltersPropertyName #>Changed);
        public IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> <#= HiddenFiltersPropertyName #>
        {
            get
            {
                return (IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>)GetValue(<#= HiddenFiltersPropertyName #>Property);
            }
            set
            {
                SetValue(<#= HiddenFiltersPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= OnBindingContextChangedPropertyName #>
//        protected override async void <#= OnBindingContextChangedPropertyName #>()
//        {
//            base.OnBindingContextChanged();
//            <#= ILformViewModelInterfaceClassName #> bcs = BindingContext as <#= ILformViewModelInterfaceClassName #>;
//            if (bcs != null)
//            {
//                bcs.<#= RowMenuItemsPropertyChangedPropertyName #>(this, null, <#= RowMenuItemsPropertyName #>);
//                bcs.<#= TableMenuItemsPropertyChangedPropertyName #>(this, null, <#= TableMenuItemsPropertyName #>);
//                await bcs.<#= HiddenFiltersPropertyChangedPropertyName #>(this, null, <#= HiddenFiltersPropertyName #>);
//            }
//            <#= IBindingContextChangedClassName #> bcl = this.BindingContext as <#= IBindingContextChangedClassName #>;
//            if (bcl != null)
//            {
//                await bcl.<#= OnLoadedPropertyName #>(this);
//            }
//        }
        #endregion
        #region <#= ContainerMenuItemsCommandPropertyName #>
        private static void <#= ContainerMenuItemsCommandPropertyName #>Changed(BindableObject bindable, object oldValue, object newValue)
        {
            <#= LformUserControlBaseClassName #> d = bindable as <#= LformUserControlBaseClassName #>;
            if (d != null)
            {
                if (d.<#= OnContainerMenuItemsCommandPropertyName #> != null)
                {
                    (d.<#= OnContainerMenuItemsCommandPropertyName #> as Command).ChangeCanExecute();
                }
            }
        }
        public static readonly BindableProperty <#= ContainerMenuItemsCommandPropertyName #>Property =
            BindableProperty.Create(nameof(<#= ContainerMenuItemsCommandPropertyName #>), typeof(ICommand), 
            typeof(<#= LformUserControlBaseClassName #>), 
            null, 
            propertyChanged: <#= ContainerMenuItemsCommandPropertyName #>Changed);
        public ICommand <#= ContainerMenuItemsCommandPropertyName #>
        {
            get { return (ICommand)GetValue(<#= ContainerMenuItemsCommandPropertyName #>Property); }
            set { SetValue(<#= ContainerMenuItemsCommandPropertyName #>Property, value); }
        }
        #endregion
        #region <#= OnContainerMenuItemsCommandPropertyName #>
        protected ICommand _<#= OnContainerMenuItemsCommandPropertyName #> = null;
        public ICommand <#= OnContainerMenuItemsCommandPropertyName #>
        {
            get
            {
                return _<#= OnContainerMenuItemsCommandPropertyName #> ?? (_<#= OnContainerMenuItemsCommandPropertyName #> = new Command((p) => <#= OnContainerMenuItemsCommandPropertyName #>Execute(p), (p) => <#= OnContainerMenuItemsCommandPropertyName #>CanExecute(p)));
            }
        }
        protected void <#= OnContainerMenuItemsCommandPropertyName #>Execute(object prm)
        {
            ICommand cmd = <#= ContainerMenuItemsCommandPropertyName #>;
            if(cmd != null) {
                if(cmd.CanExecute(prm)) {
                    cmd.Execute(prm);
                }
            }
        }
        protected bool <#= OnContainerMenuItemsCommandPropertyName #>CanExecute(object p)
        {
            return (<#= ContainerMenuItemsCommandPropertyName #> != null); 
        }
        #endregion
        #region <#= NavigationBackCommandPropertyName #>
        private static void <#= NavigationBackCommandPropertyName #>Changed(BindableObject bindable, object oldValue, object newValue)
        {
            <#= LformUserControlBaseClassName #> d = bindable as <#= LformUserControlBaseClassName #>;
            if (d != null)
            {
                if (d.<#= OnNavigationBackCommandPropertyName #> != null)
                {
                    (d.<#= OnNavigationBackCommandPropertyName #> as Command).ChangeCanExecute();
                }
            }
        }
        public static readonly BindableProperty NavigationBackCommandProperty =
            BindableProperty.Create(nameof(<#= NavigationBackCommandPropertyName #>), typeof(ICommand), 
            typeof(<#= LformUserControlBaseClassName #>), 
            propertyChanged: <#= NavigationBackCommandPropertyName #>Changed);
        public ICommand <#= NavigationBackCommandPropertyName #>
        {
            get { return (ICommand)GetValue(<#= NavigationBackCommandPropertyName #>Property); }
            set { SetValue(<#= NavigationBackCommandPropertyName #>Property, value); }
        }
        #endregion
        #region <#= OnNavigationBackCommandPropertyName #>
        protected ICommand _<#= OnNavigationBackCommandPropertyName #> = null;
        public ICommand <#= OnNavigationBackCommandPropertyName #>
        {
            get
            {
                return _<#= OnNavigationBackCommandPropertyName #> ?? (_<#= OnNavigationBackCommandPropertyName #> = new Command(() => <#= OnNavigationBackCommandPropertyName #>Execute(), () => <#= OnNavigationBackCommandPropertyName #>CanExecute()));
            }
        }
        protected void <#= OnNavigationBackCommandPropertyName #>Execute()
        {
            ICommand cmd = <#= NavigationBackCommandPropertyName #>;
            if(cmd != null) {
                if(cmd.CanExecute(this)) {
                    cmd.Execute(this);
                }
            }
        }
        protected bool <#= OnNavigationBackCommandPropertyName #>CanExecute()
        {
            return (<#= NavigationBackCommandPropertyName #> != null); 
        }
        #endregion

        #region <#= CanAddPropertyName #>
        private static void <#= CanAddPropertyName #>Changed(BindableObject d, object oldValue, object newValue)
        {
            <#= LformUserControlBaseClassName #> inst = d as <#= LformUserControlBaseClassName #>;
            if (inst != null)
            {
                <#= ILformViewModelInterfaceClassName #> bc = inst.BindingContext as <#= ILformViewModelInterfaceClassName #>;
                if(bc != null)
                    bc.<#= CanAddPropertyChangedPropertyName #>(inst, oldValue, newValue);
            }
        }
        public static readonly BindableProperty <#= CanAddPropertyName #>Property =
                BindableProperty.Create(
                "<#= CanAddPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlBaseClassName #>),
                false, propertyChanged: <#= CanAddPropertyName #>Changed);
        public bool <#= CanAddPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= CanAddPropertyName #>Property);
            }
            set
            {
                SetValue(<#= CanAddPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= CanUpdPropertyName #>
        private static void <#= CanUpdPropertyName #>Changed(BindableObject d, object oldValue, object newValue)
        {
            <#= LformUserControlBaseClassName #> inst = d as <#= LformUserControlBaseClassName #>;
            if (inst != null)
            {
                <#= ILformViewModelInterfaceClassName #> bc = inst.BindingContext as <#= ILformViewModelInterfaceClassName #>;
                if(bc != null)
                    bc.<#= CanUpdPropertyChangedPropertyName #>(inst, oldValue, newValue);
            }
        }
        public static readonly BindableProperty <#= CanUpdPropertyName #>Property =
                BindableProperty.Create(
                "<#= CanUpdPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlBaseClassName #>),
                false, propertyChanged: <#= CanUpdPropertyName #>Changed);
        public bool <#= CanUpdPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= CanUpdPropertyName #>Property);
            }
            set
            {
                SetValue(<#= CanUpdPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= CanDelPropertyName #>
        private static void <#= CanDelPropertyName #>Changed(BindableObject d, object oldValue, object newValue)
        {
            <#= LformUserControlBaseClassName #> inst = d as <#= LformUserControlBaseClassName #>;
            if (inst != null)
            {
                <#= ILformViewModelInterfaceClassName #> bc = inst.BindingContext as <#= ILformViewModelInterfaceClassName #>;
                if(bc != null)
                    bc.<#= CanDelPropertyChangedPropertyName #>(inst, oldValue, newValue);
            }
        }
        public static readonly BindableProperty <#= CanDelPropertyName #>Property =
                BindableProperty.Create(
                "<#= CanDelPropertyName #>", typeof(bool),
                typeof(<#= LformUserControlBaseClassName #>),
                false, propertyChanged: <#= CanDelPropertyName #>Changed);
        public bool <#= CanDelPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= CanDelPropertyName #>Property);
            }
            set
            {
                SetValue(<#= CanDelPropertyName #>Property, value);
            }
        }
        #endregion
    }
}

<#+
    string GetModelPageName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.PageViewName);
    }
    string GetModelServiceInterfaceName(ModelViewSerializable model) {
        return "I" + GetModelServiceName(model);
    }
    string GetModelServiceName(ModelViewSerializable model) {
        return GetModelName(model) + "Service";
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetFilterInterfaceName(ModelViewSerializable model) {
        return "I" + GetFilterName(model);
    }
    string GetFilterName(ModelViewSerializable model) {
        return GetModelName(model) + "Filter";
    }
    string GetPageInterfaceName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+GetModelName(model);
    }
    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelProjectName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetModelPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetModelPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetDisplayAttributeValueString(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string propName) {
            if (prop == null)
            {
                return "";
            }
            if(prop.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                prop.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }

    string GetDisplayAttributeValueStringEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetDisplayAttributeValueStringEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxLenEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMaxLenEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxVal(sclrProp, model);
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    List<ModelViewPropertyOfVwSerializable> GetPropsByForeignKey(ModelViewSerializable model, ModelViewForeignKeySerializable foreignKey) {
        List<ModelViewPropertyOfVwSerializable> result= new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (foreignKey == null)) {
            return result;
        }
        if (foreignKey.PrincipalKeyProps == null || foreignKey.ForeignKeyProps == null || model.ScalarProperties == null) {
            return result;
        }
        if ((foreignKey.PrincipalKeyProps.Count != foreignKey.ForeignKeyProps.Count) || (foreignKey.ForeignKeyProps.Count < 1)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.PrincipalKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (foreignKey.NavigationName == p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }

#>