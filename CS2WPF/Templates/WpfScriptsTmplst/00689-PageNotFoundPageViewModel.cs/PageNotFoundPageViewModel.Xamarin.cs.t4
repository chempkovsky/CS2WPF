<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>


<#


    string PageNotFoundPageFolder     = "00685-PageNotFoundPage.xaml.cs";
    string PageNotFoundPageClassName  = GetModelClassName(Model, PageNotFoundPageFolder);
    string PageNotFoundPageNameSpace  = GetModelNameSpace(Model, PageNotFoundPageFolder);
    string PageNotFoundPageProject    = GetModelProjectName(Model, PageNotFoundPageFolder);


    string PageNotFoundPageViewModelFolder      = "00689-PageNotFoundPageViewModel.cs";
    string PageNotFoundPageViewModelClassName   = GetModelClassName(Model, PageNotFoundPageViewModelFolder);
    string PageNotFoundPageViewModelNameSpace   = GetModelNameSpace(Model, PageNotFoundPageViewModelFolder);
    string PageNotFoundPageViewModelProject     = GetModelProjectName(Model, PageNotFoundPageViewModelFolder);




    List<string> nmSpaces = new List<string>();

#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

/*

    "<#= PageNotFoundPageViewModelClassName #>" UserControl is defined in the "<#= PageNotFoundPageViewModelProject #>"-project.
    In the file of IModule-class of "<#= PageNotFoundPageViewModelProject #>"-project the following line of code must be inserted:


        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...

            ViewModelLocationProvider.Register<<#= PageNotFoundPageClassName #>, <#= PageNotFoundPageViewModelClassName #>>();
            containerRegistry.RegisterForNavigation<<#= PageNotFoundPageClassName #>, <#= PageNotFoundPageViewModelClassName #>>("<#= PageNotFoundPageClassName #>");
            ...
        }

*/

namespace <#= PageNotFoundPageViewModelNameSpace #> {
    public class <#= PageNotFoundPageViewModelClassName #> 
    {
        public <#= PageNotFoundPageViewModelClassName #>() {
        }
    }
}

<#+
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>