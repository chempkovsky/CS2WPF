<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
<#
 
    string commandHelperModelFolder      = "00140-CommandHelper.cs";
    string commandHelperModelClassName   = GetModelClassName(Model, commandHelperModelFolder);
    string commandHelperModelNameSpace   = GetModelNameSpace(Model, commandHelperModelFolder);

    string NotificationRoutedEventArgsFolder      = "00226-NotificationRoutedEventArgs.cs";
    string NotificationRoutedEventArgsClassName   = GetModelClassName(Model, NotificationRoutedEventArgsFolder);
    string NotificationRoutedEventArgsNameSpace   = GetModelNameSpace(Model, NotificationRoutedEventArgsFolder);

    string TablePaginationUserControlFolder      = "00252-TablePaginationUserControl.xaml.cs";
    string TablePaginationUserControlClassName   = GetModelClassName(Model, TablePaginationUserControlFolder);
    string TablePaginationUserControlNameSpace   = GetModelNameSpace(Model, TablePaginationUserControlFolder);


    string TitlePropertyName = "Title";
    string RowsPerPageOptionsPropertyName = "RowsPerPageOptions";
    string RowsPerPagePropertyName = "RowsPerPage";
    string CountFromPropertyName = "CountFrom";
    string CountToPropertyName = "CountTo";
    string TotalCountPropertyName = "TotalCount";
    string CurrentPagePropertyName = "CurrentPage";
    string PreviousButtonIconNamePropertyName = "PreviousButtonIconName";
    string PreviousButtonToolTipPropertyName = "PreviousButtonToolTip";
    string PreviousButtonIconColorPropertyName = "PreviousButtonIconColor";
    string PreviousButtonClickedCommandPropertyName = "PreviousButtonClickedCommand";
    string NextButtonIconNamePropertyName = "NextButtonIconName";
    string NextButtonToolTipPropertyName = "NextButtonToolTip";
    string NextButtonIconColorPropertyName = "NextButtonIconColor";
    string NextButtonClickedCommandPropertyName = "NextButtonClickedCommand";
    string NewPageClickedNotificationPropertyName  = "NewPageClickedNotification";
    string RowsPerPageChangedNotificationPropertyName  = "RowsPerPageChangedNotification";
    string RowsPerPageChangedCommandPropertyName  = "RowsPerPageChangedCommand";


    List<string> nmSpaces = new List<string>();
   if (TablePaginationUserControlNameSpace != commandHelperModelNameSpace) nmSpaces.Add(commandHelperModelNameSpace);
   if ((TablePaginationUserControlNameSpace != NotificationRoutedEventArgsNameSpace) && (nmSpaces.IndexOf(NotificationRoutedEventArgsNameSpace) < 0)) 
        nmSpaces.Add(NotificationRoutedEventArgsNameSpace);

#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

namespace <#= TablePaginationUserControlNameSpace #> {
    /// <summary>
    /// Interaction logic for <#= TablePaginationUserControlClassName #>.xaml
    /// </summary>
    public partial class <#= TablePaginationUserControlClassName #> : UserControl
    {
        public <#= TablePaginationUserControlClassName #>()
        {
            InitializeComponent();
        }
        protected void ResetToAndFrom()
        {
            if(<#= CurrentPagePropertyName #>.HasValue && <#= RowsPerPagePropertyName #>.HasValue && <#= TotalCountPropertyName #>.HasValue)
            {
                <#= CountFromPropertyName #> = <#= CurrentPagePropertyName #>.Value * <#= RowsPerPagePropertyName #>.Value + 1;
                int v = <#= CurrentPagePropertyName #>.Value * <#= RowsPerPagePropertyName #>.Value + <#= RowsPerPagePropertyName #>.Value;
                if (v > <#= TotalCountPropertyName #>.Value) v = <#= TotalCountPropertyName #>.Value;
                <#= CountToPropertyName #> = v;
            } else
            {
                <#= CountFromPropertyName #> = null;
                <#= CountToPropertyName #> = null;
            }
        }

        #region <#= TitlePropertyName #>
        public static readonly DependencyProperty <#= TitlePropertyName #>Property =
                DependencyProperty.Register(
                "<#= TitlePropertyName #>", typeof(string),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata("Page size"));
        public string <#= TitlePropertyName #>
        {
            get
            {
                return (string)GetValue(<#= TitlePropertyName #>Property);
            }
            set
            {
                SetValue(<#= TitlePropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= RowsPerPageOptionsPropertyName #>
        public static readonly DependencyProperty <#= RowsPerPageOptionsPropertyName #>Property =
                DependencyProperty.Register(
                "<#= RowsPerPageOptionsPropertyName #>", typeof(IEnumerable<int>),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata(null));
        public IEnumerable<int> <#= RowsPerPageOptionsPropertyName #>
        {
            get
            {
                return (IEnumerable<int>)GetValue(<#= RowsPerPageOptionsPropertyName #>Property);
            }
            set
            {
                SetValue(<#= RowsPerPageOptionsPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= RowsPerPagePropertyName #>
        private static void <#= RowsPerPagePropertyName #>Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            TablePaginationUserControl inst = d as TablePaginationUserControl;
            if (inst != null)
            {
                inst.<#= CurrentPagePropertyName #> = 0;
                inst.ResetToAndFrom();

                <#= NotificationRoutedEventArgsClassName #> newEventArgs = new <#= NotificationRoutedEventArgsClassName #>(<#= TablePaginationUserControlClassName #>.<#= RowsPerPageChangedNotificationPropertyName #>Event);
                newEventArgs.Sender = inst;
                newEventArgs.Model = inst.<#= RowsPerPagePropertyName #>;
                inst.RaiseEvent(newEventArgs);
            }
        }
        public static readonly DependencyProperty <#= RowsPerPagePropertyName #>Property =
                DependencyProperty.Register(
                "<#= RowsPerPagePropertyName #>", typeof(Nullable<int>),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata(null, <#= RowsPerPagePropertyName #>Changed));
        public Nullable<int> <#= RowsPerPagePropertyName #>
        {
            get
            {
                return (Nullable<int>)GetValue(<#= RowsPerPagePropertyName #>Property);
            }
            set
            {
                SetValue(<#= RowsPerPagePropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= CountFromPropertyName #>
        public static readonly DependencyProperty <#= CountFromPropertyName #>Property =
                DependencyProperty.Register(
                "<#= CountFromPropertyName #>", typeof(Nullable<int>),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata(null));
        public Nullable<int> <#= CountFromPropertyName #>
        {
            get
            {
                return (Nullable<int>)GetValue(<#= CountFromPropertyName #>Property);
            }
            set
            {
                SetValue(<#= CountFromPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= CountToPropertyName #>
        public static readonly DependencyProperty <#= CountToPropertyName #>Property =
                DependencyProperty.Register(
                "<#= CountToPropertyName #>", typeof(Nullable<int>),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata(null));
        public Nullable<int> <#= CountToPropertyName #>
        {
            get
            {
                return (Nullable<int>)GetValue(<#= CountToPropertyName #>Property);
            }
            set
            {
                SetValue(<#= CountToPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= TotalCountPropertyName #>
        private static void <#= TotalCountPropertyName #>Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {

            TablePaginationUserControl inst = d as TablePaginationUserControl;
            if (inst != null)
            {
                inst.ResetToAndFrom();
            }
        }
        public static readonly DependencyProperty <#= TotalCountPropertyName #>Property =
                DependencyProperty.Register(
                "<#= TotalCountPropertyName #>", typeof(Nullable<int>),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata(0, <#= TotalCountPropertyName #>Changed));
        public Nullable<int> <#= TotalCountPropertyName #>
        {
            get
            {
                return (Nullable<int>)GetValue(<#= TotalCountPropertyName #>Property);
            }
            set
            {
                SetValue(<#= TotalCountPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= CurrentPagePropertyName #>
        private static void <#= CurrentPagePropertyName #>Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            TablePaginationUserControl inst = d as TablePaginationUserControl;
            if (inst != null)
            {
                inst.ResetToAndFrom();
            }
        }
        public static readonly DependencyProperty <#= CurrentPagePropertyName #>Property =
                DependencyProperty.Register(
                "<#= CurrentPagePropertyName #>", typeof(Nullable<int>),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata(0, <#= CurrentPagePropertyName #>Changed));
        public Nullable<int> <#= CurrentPagePropertyName #>
        {
            get
            {
                return (Nullable<int>)GetValue(<#= CurrentPagePropertyName #>Property);
            }
            set
            {
                SetValue(<#= CurrentPagePropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= PreviousButtonIconNamePropertyName #>
        public static readonly DependencyProperty <#= PreviousButtonIconNamePropertyName #>Property =
                DependencyProperty.Register(
                "PreviousButtonIconName", typeof(string),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata("ChevronLeft"));
        public string <#= PreviousButtonIconNamePropertyName #>
        {
            get
            {
                return (string)GetValue(<#= PreviousButtonIconNamePropertyName #>Property);
            }
            set
            {
                SetValue(<#= PreviousButtonIconNamePropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= PreviousButtonToolTipPropertyName #>
        public static readonly DependencyProperty <#= PreviousButtonToolTipPropertyName #>Property =
                DependencyProperty.Register(
                "<#= PreviousButtonToolTipPropertyName #>", typeof(string),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata("Previous Page"));
        public string <#= PreviousButtonToolTipPropertyName #>
        {
            get
            {
                return (string)GetValue(<#= PreviousButtonToolTipPropertyName #>Property);
            }
            set
            {
                SetValue(<#= PreviousButtonToolTipPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= PreviousButtonIconColorPropertyName #>
        public static readonly DependencyProperty <#= PreviousButtonIconColorPropertyName #>Property =
                DependencyProperty.Register(
                "<#= PreviousButtonIconColorPropertyName #>", typeof(string),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata("Primary"));
        public string <#= PreviousButtonIconColorPropertyName #>
        {
            get
            {
                return (string)GetValue(<#= PreviousButtonIconColorPropertyName #>Property);
            }
            set
            {
                SetValue(<#= PreviousButtonIconColorPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= PreviousButtonClickedCommandPropertyName #>
        private ICommand _<#= PreviousButtonClickedCommandPropertyName #>;
        public ICommand <#= PreviousButtonClickedCommandPropertyName #>
        {
            get
            {
                return _<#= PreviousButtonClickedCommandPropertyName #> ?? (_<#= PreviousButtonClickedCommandPropertyName #> = new CommandHelper((param) => <#= PreviousButtonClickedCommandPropertyName #>Action(param), (param) => <#= PreviousButtonClickedCommandPropertyName #>CanExecute(param)));
            }
        }
        protected void <#= PreviousButtonClickedCommandPropertyName #>Action(object param)
        {
            if (<#= CurrentPagePropertyName #>.HasValue ? <#= CurrentPagePropertyName #>.Value > 0 : false)
            {
                int newVal = <#= CurrentPagePropertyName #>.Value - 1;
                <#= CurrentPagePropertyName #> = newVal;
                <#= NotificationRoutedEventArgsClassName #> newEventArgs = new <#= NotificationRoutedEventArgsClassName #>(TablePaginationUserControl.NewPageClickedNotificationEvent);
                newEventArgs.Sender = this;
                newEventArgs.Model = newVal;
                RaiseEvent(newEventArgs);
            }
        }
        protected bool <#= PreviousButtonClickedCommandPropertyName #>CanExecute(object param)
        {
            return (<#= CurrentPagePropertyName #>.HasValue ? <#= CurrentPagePropertyName #>.Value > 0 : false);
        }
        #endregion
        #region <#= NextButtonIconNamePropertyName #>
        public static readonly DependencyProperty <#= NextButtonIconNamePropertyName #>Property =
                DependencyProperty.Register(
                "<#= NextButtonIconNamePropertyName #>", typeof(string),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata("ChevronRight"));
        public string <#= NextButtonIconNamePropertyName #>
        {
            get
            {
                return (string)GetValue(<#= NextButtonIconNamePropertyName #>Property);
            }
            set
            {
                SetValue(<#= NextButtonIconNamePropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= NextButtonToolTipPropertyName #>
        public static readonly DependencyProperty <#= NextButtonToolTipPropertyName #>Property =
                DependencyProperty.Register(
                "<#= NextButtonToolTipPropertyName #>", typeof(string),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata("Next Page"));
        public string <#= NextButtonToolTipPropertyName #>
        {
            get
            {
                return (string)GetValue(<#= NextButtonToolTipPropertyName #>Property);
            }
            set
            {
                SetValue(<#= NextButtonToolTipPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= NextButtonIconColorPropertyName #>
        public static readonly DependencyProperty <#= NextButtonIconColorPropertyName #>Property =
                DependencyProperty.Register(
                "<#= NextButtonIconColorPropertyName #>", typeof(string),
                typeof(<#= TablePaginationUserControlClassName #>),
                new PropertyMetadata("Primary"));
        public string <#= NextButtonIconColorPropertyName #>
        {
            get
            {
                return (string)GetValue(<#= NextButtonIconColorPropertyName #>Property);
            }
            set
            {
                SetValue(<#= NextButtonIconColorPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= NextButtonClickedCommandPropertyName #>
        private ICommand _<#= NextButtonClickedCommandPropertyName #>;
        public ICommand <#= NextButtonClickedCommandPropertyName #>
        {
            get
            {
                return _<#= NextButtonClickedCommandPropertyName #> ?? (_<#= NextButtonClickedCommandPropertyName #> = new CommandHelper((param) => <#= NextButtonClickedCommandPropertyName #>Action(param), (param) => NextButtonClickedCommandCanExecute(param)));
            }
        }
        protected void <#= NextButtonClickedCommandPropertyName #>Action(object param)
        {
            if (<#= CurrentPagePropertyName #>.HasValue && <#= CountToPropertyName #>.HasValue && <#= TotalCountPropertyName #>.HasValue ? <#= CountToPropertyName #>.Value < <#= TotalCountPropertyName #>.Value : false)
            {
                int newVal = <#= CurrentPagePropertyName #>.Value + 1;
                <#= CurrentPagePropertyName #> = newVal;
                <#= NotificationRoutedEventArgsClassName #> newEventArgs = new <#= NotificationRoutedEventArgsClassName #>(TablePaginationUserControl.<#= NewPageClickedNotificationPropertyName #>Event);
                newEventArgs.Sender = this;
                newEventArgs.Model = newVal;
                RaiseEvent(newEventArgs);
            }
        }
        protected bool <#= NextButtonClickedCommandPropertyName #>CanExecute(object param)
        {
            return (<#= CountToPropertyName #>.HasValue && <#= TotalCountPropertyName #>.HasValue ?  <#= CountToPropertyName #>.Value < <#= TotalCountPropertyName #>.Value : false);
        }
        #endregion
        #region <#= NewPageClickedNotificationPropertyName #>
        public static readonly RoutedEvent <#= NewPageClickedNotificationPropertyName #>Event =
                EventManager.RegisterRoutedEvent(
                "<#= NewPageClickedNotificationPropertyName #>", RoutingStrategy.Bubble,
                typeof(RoutedEventHandler),
                typeof(<#= TablePaginationUserControlClassName #>));
        public event RoutedEventHandler <#= NewPageClickedNotificationPropertyName #>
        {
            add { AddHandler(<#= NewPageClickedNotificationPropertyName #>Event, value); }
            remove { RemoveHandler(<#= NewPageClickedNotificationPropertyName #>Event, value); }
        }
        #endregion
        #region <#= RowsPerPageChangedNotificationPropertyName #>
        public static readonly RoutedEvent <#= RowsPerPageChangedNotificationPropertyName #>Event =
                EventManager.RegisterRoutedEvent(
                "<#= RowsPerPageChangedNotificationPropertyName #>", RoutingStrategy.Bubble,
                typeof(RoutedEventHandler),
                typeof(<#= TablePaginationUserControlClassName #>));
        public event RoutedEventHandler <#= RowsPerPageChangedNotificationPropertyName #>
        {
            add { AddHandler(<#= RowsPerPageChangedNotificationPropertyName #>Event, value); }
            remove { RemoveHandler(<#= RowsPerPageChangedNotificationPropertyName #>Event, value); }
        }
        #endregion
   }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>