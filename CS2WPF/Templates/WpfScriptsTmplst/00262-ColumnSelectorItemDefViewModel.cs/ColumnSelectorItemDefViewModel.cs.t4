<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System.ComponentModel;
using System.Runtime.CompilerServices;
<#

    string IColumnSelectorItemDefInterfaceFolder      = "00258-IColumnSelectorItemDefInterface.cs";
    string IColumnSelectorItemDefInterfaceClassName   = GetModelClassName(Model, IColumnSelectorItemDefInterfaceFolder);
    string IColumnSelectorItemDefInterfaceNameSpace   = GetModelNameSpace(Model, IColumnSelectorItemDefInterfaceFolder);

    string ColumnSelectorItemDefViewModelFolder      = "00262-ColumnSelectorItemDefViewModel.cs";
    string ColumnSelectorItemDefViewModelClassName   = GetModelClassName(Model, ColumnSelectorItemDefViewModelFolder);
    string ColumnSelectorItemDefViewModelNameSpace   = GetModelNameSpace(Model, ColumnSelectorItemDefViewModelFolder);

#>

<# 
    if(ColumnSelectorItemDefViewModelNameSpace != IColumnSelectorItemDefInterfaceNameSpace) { 
#>
using <#= IColumnSelectorItemDefInterfaceNameSpace #>;
<#
    }
#>

namespace <#= ColumnSelectorItemDefViewModelNameSpace #> {
    public class <#= ColumnSelectorItemDefViewModelClassName #>: <#= IColumnSelectorItemDefInterfaceClassName #>, INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

        string _Name=string.Empty;
        public string Name 
        { 
            get {
                return _Name; 
            } 
            set {
                if(_Name != value) {
                    _Name = value;
                    OnPropertyChanged();
                }
            }
        }

        string _Caption=string.Empty;
        public string Caption 
        { 
            get {
                return _Caption; 
            } 
            set {
                if(_Caption != value) {
                    _Caption = value;
                    OnPropertyChanged();
                }
            }
        }

        bool _IsChecked=false;
        public bool IsChecked 
        { 
            get {
                return _IsChecked; 
            } 
            set {
                if(_IsChecked != value) {
                    _IsChecked = value;
                    OnPropertyChanged();
                }
            }
        }
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>