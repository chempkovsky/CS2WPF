<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
<#

    string commandHelperModelFolder      = "00140-CommandHelper.cs";
    string commandHelperModelClassName   = GetModelClassName(Model, commandHelperModelFolder);
    string commandHelperModelNameSpace   = GetModelNameSpace(Model, commandHelperModelFolder);

    string MessageUserControlFolder     = "00270-MessageUserControl.xaml.cs";
    string MessageUserControlClassName  = GetModelClassName(Model, MessageUserControlFolder);
    string MessageUserControlNameSpace  = GetModelNameSpace(Model, MessageUserControlFolder);

    string TitlePropertyName = "Title";
    string MessagePropertyName = "Message";
    string MessageIconNamePropertyName = "MessageIconName";
    string MessageIconColorPropertyName = "MessageIconColor";
    string ShowOkBtnPropertyName = "ShowOkBtn";
    string ShowCancelBtnPropertyName = "ShowCancelBtn";
    string OkNotificationPropertyName = "OkNotification";
    string OkCommandPropertyName = "OkCommand";
    string CancelNotificationPropertyName = "CancelNotification";
    string CancelCommandPropertyName = "CancelCommand";

    List<string> nmSpaces = new List<string>();
   if (MessageUserControlNameSpace != commandHelperModelNameSpace) nmSpaces.Add(commandHelperModelNameSpace);

#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

namespace <#= MessageUserControlNameSpace #> {
    /// <summary>
    /// Interaction logic for <#= MessageUserControlClassName #>.xaml
    /// </summary>
    public partial class <#= MessageUserControlClassName #>: UserControl
    {
        public <#= MessageUserControlClassName #>()
        {
            InitializeComponent();
        }
        #region <#= TitlePropertyName #>
        public static readonly DependencyProperty <#= TitlePropertyName #>Property =
                DependencyProperty.Register(
                "<#= TitlePropertyName #>", typeof(string),
                typeof(<#= MessageUserControlClassName #>),
                new PropertyMetadata(null));
        public string <#= TitlePropertyName #>
        {
            get
            {
                return (string)GetValue(<#= TitlePropertyName #>Property);
            }
            set
            {
                SetValue(<#= TitlePropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= MessagePropertyName #>
        public static readonly DependencyProperty <#= MessagePropertyName #>Property =
                DependencyProperty.Register(
                "<#= MessagePropertyName #>", typeof(string),
                typeof(<#= MessageUserControlClassName #>),
                new PropertyMetadata(null));
        public string <#= MessagePropertyName #>
        {
            get
            {
                return (string)GetValue(<#= MessagePropertyName #>Property);
            }
            set
            {
                SetValue(<#= MessagePropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= MessageIconNamePropertyName #>
        public static readonly DependencyProperty <#= MessageIconNamePropertyName #>Property =
                DependencyProperty.Register(
                "<#= MessageIconNamePropertyName #>", typeof(string),
                typeof(<#= MessageUserControlClassName #>),
                new PropertyMetadata(null));
        public string <#= MessageIconNamePropertyName #>
        {
            get
            {
                return (string)GetValue(<#= MessageIconNamePropertyName #>Property);
            }
            set
            {
                SetValue(<#= MessageIconNamePropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= MessageIconColorPropertyName #>
        public static readonly DependencyProperty <#= MessageIconColorPropertyName #>Property =
                DependencyProperty.Register(
                "<#= MessageIconColorPropertyName #>", typeof(string),
                typeof(<#= MessageUserControlClassName #>),
                new PropertyMetadata(null));
        public string <#= MessageIconColorPropertyName #>
        {
            get
            {
                return (string)GetValue(<#= MessageIconColorPropertyName #>Property);
            }
            set
            {
                SetValue(<#= MessageIconColorPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= ShowOkBtnPropertyName #>
        public static readonly DependencyProperty <#= ShowOkBtnPropertyName #>Property =
                DependencyProperty.Register(
                "<#= ShowOkBtnPropertyName #>", typeof(Nullable<bool>),
                typeof(<#= MessageUserControlClassName #>),
                new PropertyMetadata(null));
        public Nullable<bool> <#= ShowOkBtnPropertyName #>
        {
            get
            {
                return (Nullable<bool>)GetValue(<#= ShowOkBtnPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ShowOkBtnPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= ShowCancelBtnPropertyName #>
        public static readonly DependencyProperty <#= ShowCancelBtnPropertyName #>Property =
                DependencyProperty.Register(
                "<#= ShowCancelBtnPropertyName #>", typeof(Nullable<bool>),
                typeof(<#= MessageUserControlClassName #>),
                new PropertyMetadata(null));
        public Nullable<bool> <#= ShowCancelBtnPropertyName #>
        {
            get
            {
                return (Nullable<bool>)GetValue(<#= ShowCancelBtnPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ShowCancelBtnPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= OkNotificationPropertyName #>
        public static readonly RoutedEvent <#= OkNotificationPropertyName #>Event =
                EventManager.RegisterRoutedEvent(
                "<#= OkNotificationPropertyName #>", RoutingStrategy.Bubble,
                typeof(RoutedEventHandler),
                typeof(<#= MessageUserControlClassName #>));
        public event RoutedEventHandler <#= OkNotificationPropertyName #>
        {
            add { AddHandler(<#= OkNotificationPropertyName #>Event, value); }
            remove { RemoveHandler(<#= OkNotificationPropertyName #>Event, value); }
        }
        #endregion
        #region <#= OkCommandPropertyName #>
        private ICommand _<#= OkCommandPropertyName #>;
        public ICommand <#= OkCommandPropertyName #>
        {
            get
            {
                return _<#= OkCommandPropertyName #> ?? (_<#= OkCommandPropertyName #> = new CommandHelper((param) => <#= OkCommandPropertyName #>Action(param), (param) => <#= OkCommandPropertyName #>CanExecute(param)));
            }
        }
        protected void <#= OkCommandPropertyName #>Action(object param)
        {
            RaiseEvent(new RoutedEventArgs(<#= MessageUserControlClassName #>.<#= OkNotificationPropertyName #>Event));
        }
        protected bool <#= OkCommandPropertyName #>CanExecute(object param)
        {
            return <#= ShowOkBtnPropertyName #>.HasValue ? <#= ShowOkBtnPropertyName #>.Value : false;
        }
        #endregion
        #region <#= CancelNotificationPropertyName #>
        public static readonly RoutedEvent <#= CancelNotificationPropertyName #>Event =
                EventManager.RegisterRoutedEvent(
                "<#= CancelNotificationPropertyName #>", RoutingStrategy.Bubble,
                typeof(RoutedEventHandler),
                typeof(<#= MessageUserControlClassName #>));
        public event RoutedEventHandler <#= CancelNotificationPropertyName #>
        {
            add { AddHandler(<#= CancelNotificationPropertyName #>Event, value); }
            remove { RemoveHandler(<#= CancelNotificationPropertyName #>Event, value); }
        }
        #endregion
        #region <#= CancelCommandPropertyName #>
        private ICommand _<#= CancelCommandPropertyName #>;
        public ICommand <#= CancelCommandPropertyName #>
        {
            get
            {
                return _<#= CancelCommandPropertyName #> ?? (_<#= CancelCommandPropertyName #> = new CommandHelper((param) => <#= CancelCommandPropertyName #>Action(param), (param) => <#= CancelCommandPropertyName #>CanExecute(param)));
            }
        }
        protected void <#= CancelCommandPropertyName #>Action(object param)
        {
            RaiseEvent(new RoutedEventArgs(<#= MessageUserControlClassName #>.<#= CancelNotificationPropertyName #>Event));
        }
        protected bool <#= CancelCommandPropertyName #>CanExecute(object param)
        {
            return <#= ShowCancelBtnPropertyName #>.HasValue ? <#= ShowCancelBtnPropertyName #>.Value : false;
        }
        #endregion
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>