<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using System.Windows;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Linq;
using Prism.Mvvm;
using Prism.Services.Dialogs;
using System.Threading.Tasks;
using System.Windows.Controls.Primitives;
using System.Windows.Controls;
using System.Reflection;
using System.ComponentModel.DataAnnotations;
using System.Collections;
<#

    string EformModeEnumFolder                      = "00026-EformModeEnum.cs";
    string EformModeEnumClassName                   = GetContextModelClassName(Context, EformModeEnumFolder);
    string EformModeEnumNameSpace                   = GetContextModelNameSpace(Context, EformModeEnumFolder);

    string IAppGlblSettingsServiceFolder            = "00080-IAppGlblSettingsService";
    string IAppGlblSettingsServiceClassName         = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace         = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);

    string commandHelperModelFolder                 = "00140-CommandHelper.cs";
    string commandHelperModelClassName              = GetContextModelClassName(Context, commandHelperModelFolder);
    string commandHelperModelNameSpace              = GetContextModelNameSpace(Context, commandHelperModelFolder);

    string IWebServiceFilterRsltInterfaceFolder     = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string WebServiceFilterRsltViewModelFolder      = "00215-WebServiceFilterRsltViewModel.cs";
    string WebServiceFilterRsltViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterRsltViewModelFolder);
    string WebServiceFilterRsltViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterRsltViewModelFolder);

    string RoutedEventExtFolder                     = "00222-RoutedEventExt.cs";
    string RoutedEventExtClassName                  = GetContextModelClassName(Context, RoutedEventExtFolder);
    string RoutedEventExtNameSpace                  = GetContextModelNameSpace(Context, RoutedEventExtFolder);

    string RoutedCommandExtFolder                   = "00224-RoutedCommandExt.cs";
    string RoutedCommandExtClassName                = GetContextModelClassName(Context, RoutedCommandExtFolder);
    string RoutedCommandExtNameSpace                = GetContextModelNameSpace(Context, RoutedCommandExtFolder);

    string modelInterfaceFolder                     = "01100-Interface.cs";
    string modelInterfaceClassName                  = GetInterfaceName(Model);
    string modelInterfaceNameSpace                  = GetModelNameSpace(Model, modelInterfaceFolder);

    string NotifyInterfaceFolder                    = "01104-NotifyInterface.cs";
    string NotifyInterfaceClassName                 = GetNotifyInterfaceName(Model);
    string NotifyInterfaceNameSpace                 = GetModelNameSpace(Model, NotifyInterfaceFolder);

    string modelPageInterfaceFolder                 = "01200-Page.interface.cs";
    string modelPageInterfaceClassName              = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace              = GetModelNameSpace(Model, modelPageInterfaceFolder);

    string modelFilterInterfaceFolder               = "01300-Filter.interface.cs";
    string modelFilterInterfaceClassName            = GetFilterInterfaceName(Model);
    string modelFilterInterfaceNameSpace            = GetModelNameSpace(Model, modelFilterInterfaceFolder);

    string modelFilterFolder                        = "01302-Filter.model.cs";
    string modelFilterClassName                     = GetFilterName(Model);
    string modelFilterNameSpace                     = GetModelNameSpace(Model, modelFilterFolder);

    string modelServiceInterfaceFolder              = "01400-Service.interface.cs";
    string modelServiceInterfaceClassName           = GetModelServiceInterfaceName(Model);
    string modelServiceInterfaceNameSpace           = GetModelNameSpace(Model, modelServiceInterfaceFolder);

    string SdlgViewModelFolder                      = "01440-SdlgViewModel.cs";
    //string SdlgViewModelClassName                   = GetModelClassName(Model, SdlgViewModelFolder);
    //string SdlgViewModelNameSpace                   = GetModelNameSpace(Model, SdlgViewModelFolder);

    string EformUserControlFolder                   = "01496-EformUserControl.xaml.cs";
    string EformUserControlClassName                = GetModelClassName(Model, EformUserControlFolder);
    string EformUserControlNameSpace                = GetModelNameSpace(Model, EformUserControlFolder);

    string EformViewModelFolder                     = "01500-EformViewModel.cs";
    string EformViewModelClassName                  = GetModelClassName(Model, EformViewModelFolder);
    string EformViewModelNameSpace                  = GetModelNameSpace(Model, EformViewModelFolder);



    string EformModePropertyName                    = "EformMode";
    string OnEformModeChangedPropertyName           = "OnEformModeChanged";
    string EformModeChangedPropertyName             = "EformModeChanged";

    string FormControlModelPropertyName             = "FormControlModel";
    string OnFormControlModelChangedPropertyName    = "OnFormControlModelChanged";
    string FormControlModelChangedPropertyName      = "FormControlModelChanged";

    string HiddenFiltersPropertyName                = "HiddenFilters";
    string OnHiddenFiltersChangedPropertyName       = "OnHiddenFiltersChanged";
    string HiddenFiltersPropertyChangedPropertyName = "HiddenFiltersPropertyChanged";

    string IsOnLoadedCalledPropertyName             = "IsOnLoadedCalled";
    string RoutedEventHandlersPropertyName          = "RoutedEventHandlers";
    string RoutedCommandHandlersPropertyName        = "RoutedCommandHandlers";


    string ComboSufix               = "CmbCntrl";
    string ButtonSufix              = "BttnItm";
    string TypeaheadSufix           = "TphdCntrl";
    string FormServicePrefix        = "FrmSrv";
    string EnabledSufix             = "Enabled";
    string FilterOperatorSuffix     = "Oprtr";
    string SearchClickSufix         = "SrchClck";


    string RegionPropertyName       = "Region";
    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";


    string FormRootServicePropertyName      = "FrmRootSrv";
    string AppSettingServicePropertyName    = "GlblSettingsSrv";
    string UIDispatcherInvokePropertyName   = "Application.Current.Dispatcher.Invoke";
    string TitleCaptionVal                  = "Select Item";


    string GetAllMethodName                 = "getall";
    string GetWithFilterMethodName          = "getwithfilter";
    string GetOneMethodName                 = "getone";
    string UpdateOneMethodName              = "updateone";
    string AddOneMethodName                 = "addone";
    string DeleteOneMethodName              = "deleteone";
    string CopyToModelMethodName            = "CopyToModel";
    string CopyToModelNotifyMethodName      = "CopyToModelNotify";
    string ShowErrorMethodName              = "ShowErrorMessage";

    string OkCommandPropertyName            = "OkCommand";
    string CancelCommandPropertyName        = "CancelCommand";
    string EformOkCommandPropertyName       = "EformOkCommand";
    string EformCancelCommandPropertyName   = "EformCancelCommand";


    List<string> FKViewsDict =  GetFKViewsList(Model, Context, new List<string>());
    if (! FKViewsDict.Contains(Model.ViewName) ) {
        FKViewsDict.Add(Model.ViewName);
    }

    List<string> SDViewsDict = GetSearchDialogViewsList(Model, Context, new List<string>());

    bool ModelHasAutoCompleteTextBox = false;
    bool ModelHasAutoSearchTextBox = false;
    bool ModelHasDoInitMethod = false;
    bool ModeAddEqualUpdate = true;
    bool ModeAddEqualDelete = true;
    bool ModeUpdateEqualDelete = true;
   

    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        ModelHasAutoCompleteTextBox = ModelHasAutoCompleteTextBox ?  ModelHasAutoCompleteTextBox :
                                                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) ;
        ModelHasAutoSearchTextBox = ModelHasAutoSearchTextBox ?  ModelHasAutoSearchTextBox :
                                                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog) ;
        if(!ModelHasDoInitMethod) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                for(int inptTp = 1; inptTp < 4; inptTp++) {
                    if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, inptTp)) {
                        if ( GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp).Count < 1) {
                            ModelHasDoInitMethod = true;
                            break;
                        }
                    }
                }
            }
        }
        if (ModeAddEqualUpdate) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog)) {
                ModeAddEqualUpdate = (modelViewUIFormPropertySerializable.InputTypeWhenAdd == modelViewUIFormPropertySerializable.InputTypeWhenUpdate);
                if (ModeAddEqualUpdate) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd ))) {
                        ModeAddEqualUpdate =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                    }
                }
            }
        }
        if (ModeAddEqualDelete) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog)) {
                ModeAddEqualDelete = (modelViewUIFormPropertySerializable.InputTypeWhenAdd == modelViewUIFormPropertySerializable.InputTypeWhenDelete);
                if (ModeAddEqualDelete) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel ))) {
                        ModeAddEqualDelete =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                    }
                }
            }
        }
        if (ModeUpdateEqualDelete) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog)) {
                ModeUpdateEqualDelete = (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == modelViewUIFormPropertySerializable.InputTypeWhenDelete);
                if (ModeUpdateEqualDelete) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel ))) {
                        ModeUpdateEqualDelete =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                    }
                }
            }
        }
    }


    List<string> nmSpaces = new List<string>();
    if ((EformViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((EformViewModelNameSpace != modelInterfaceNameSpace) && (nmSpaces.IndexOf(modelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelInterfaceNameSpace);
    if ((EformViewModelNameSpace != EformModeEnumNameSpace) && (nmSpaces.IndexOf(EformModeEnumNameSpace) < 0)) 
        nmSpaces.Add(EformModeEnumNameSpace);
    if ((EformViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
//    if ((EformViewModelNameSpace != modelServiceInterfaceNameSpace) && (nmSpaces.IndexOf(modelServiceInterfaceNameSpace) < 0)) 
//        nmSpaces.Add(modelServiceInterfaceNameSpace);
    if ((EformViewModelNameSpace != RoutedEventExtNameSpace) && (nmSpaces.IndexOf(RoutedEventExtNameSpace) < 0)) 
        nmSpaces.Add(RoutedEventExtNameSpace);
    if ((EformViewModelNameSpace != RoutedCommandExtNameSpace) && (nmSpaces.IndexOf(RoutedCommandExtNameSpace) < 0)) 
        nmSpaces.Add(RoutedCommandExtNameSpace);
    if ((EformViewModelNameSpace != WebServiceFilterRsltViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterRsltViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterRsltViewModelNameSpace);
    if ((EformViewModelNameSpace != NotifyInterfaceNameSpace) && (nmSpaces.IndexOf(NotifyInterfaceNameSpace) < 0)) 
        nmSpaces.Add(NotifyInterfaceNameSpace);


    foreach(string viewNm in FKViewsDict) {
        ModelViewSerializable locmodel = GetModelByName(Context, viewNm);
        if (locmodel == null) continue;
        string nmspc = GetModelNameSpace(locmodel, modelInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        nmspc = GetModelNameSpace(locmodel, modelPageInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        nmspc = GetModelNameSpace(locmodel, modelFilterInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        // nmspc = GetModelNameSpace(locmodel, modelFilterNameSpace);
        // if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        nmspc = GetModelNameSpace(locmodel, modelServiceInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);

        
    }

#>
<# 
    if(ModelHasAutoSearchTextBox) {
#>
using <#= commandHelperModelNameSpace #>;
<# 
    }
    if(ModelHasAutoCompleteTextBox) {
#>
using AutoCompleteTextBox.Editors;

<# 
    }
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>
/*
    In the file of IModule-class the following lines of code must be inserted:


        public void OnInitialized(IContainerProvider containerProvider)
        {
            ...
            IRegionManager regionManager = containerProvider.Resolve(typeof(IRegionManager)) as IRegionManager;
            if (regionManager != null)
            {
                ...
                regionManager.RegisterViewWithRegion("<#= EformUserControlClassName #><#= RegionPropertyName #>", typeof(<#= EformUserControlClassName #>));
                ...
            }
            ...
        }


        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            ViewModelLocationProvider.Register<<#= EformUserControlClassName #>, <#= EformViewModelClassName #>>();
            ...
        }
*/

namespace <#= EformViewModelNameSpace #> {
    public class <#= EformViewModelClassName #>: INotifyPropertyChanged, INotifyDataErrorInfo
    {
        protected <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>=null;
        protected IDialogService dialogService=null;
<#    
    string constructorParams = "";
    foreach(string viewNm in FKViewsDict) {
        if (constructorParams != "") constructorParams += ", ";
#>
        protected <#= GetModelServiceInterfaceNameEx(Context, viewNm) #> <#= FormServicePrefix #><#= viewNm #> = null;
<#
        constructorParams +=  GetModelServiceInterfaceNameEx(Context, viewNm) + "  _" + FormServicePrefix + viewNm ;
    } 
    if (constructorParams != "") constructorParams += ", ";
#>

        public <#= EformViewModelClassName #>(<#= constructorParams #> <#= IAppGlblSettingsServiceClassName #> _<#= AppSettingServicePropertyName  #>, IDialogService _dialogService) {
            this.<#= AppSettingServicePropertyName #> = _<#= AppSettingServicePropertyName #>;
            this.dialogService = _dialogService;
<#    
    
    foreach(string viewNm in FKViewsDict) {
        if (constructorParams != "") constructorParams += ", ";
#>
            this.<#= FormServicePrefix #><#= viewNm #> = _<#= FormServicePrefix #><#= viewNm #>;
<#
    } 
#>
            ObservableCollection<ValueTuple<RoutedEvent, Delegate, bool>> rehs = new ObservableCollection<ValueTuple<RoutedEvent, Delegate, bool>>();
            rehs.Add((<#= RoutedEventExtClassName #>.<#= HiddenFiltersPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>>(this.<#= OnHiddenFiltersChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= EformModeChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<<#= EformModeEnumClassName #>>(this.<#= OnEformModeChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= FormControlModelChangedPropertyName #>Event,
                new RoutedPropertyChangedEventHandler<object>(this.<#= OnFormControlModelChangedPropertyName #>), false));
            rehs.Add((FrameworkElement.LoadedEvent, 
                new RoutedEventHandler(this.OnLoaded), false));
            rehs.Add((Validation.ErrorEvent,
                new EventHandler<ValidationErrorEventArgs>(this.ValidationErrorHandler), false));
            _<#= RoutedEventHandlersPropertyName #> = rehs;


            CommandBinding cb = null;
            CommandBindingCollection cbsc = new CommandBindingCollection();
            cb = new CommandBinding(<#= RoutedCommandExtClassName #>.<#= CancelCommandPropertyName #>, new ExecutedRoutedEventHandler(this.Executed<#= CancelCommandPropertyName #>), new CanExecuteRoutedEventHandler(CanExecute<#= CancelCommandPropertyName #>));
            // to intercept routed command raised in the viewModel
            // CommandManager.RegisterClassCommandBinding(typeof(<#= EformViewModelClassName #>), cb);
            cbsc.Add(cb);
            cb = new CommandBinding(<#= RoutedCommandExtClassName #>.<#= OkCommandPropertyName #>, new ExecutedRoutedEventHandler(this.Executed<#= OkCommandPropertyName #>), new CanExecuteRoutedEventHandler(CanExecute<#= OkCommandPropertyName #>));
            // to intercept routed command raised in the viewModel
            // CommandManager.RegisterClassCommandBinding(typeof(<#= EformViewModelClassName #>), cb);
            cbsc.Add(cb);
            _<#= RoutedCommandHandlersPropertyName #> = cbsc;
        }
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

<#  
    if (ModelHasDoInitMethod) {
#>
        private async void OnLoaded(object sender, RoutedEventArgs e)
<#  
    } else {
#>
        private void OnLoaded(object sender, RoutedEventArgs e)
<#  
    }
#>
        {
            <#= IsOnLoadedCalledPropertyName #> = true;
            DoClearControls();
            RunEformModeChanged();
            InputToControls();
<#  
    if (ModelHasDoInitMethod) {
#>

            await DoInit();
<#  
    }
#>
            ClearValidationMessages();
        }
        protected bool <#= IsOnLoadedCalledPropertyName #> = false;

        #region <#= RoutedEventHandlersPropertyName #>
        protected IEnumerable<ValueTuple<RoutedEvent, Delegate, bool>> _<#= RoutedEventHandlersPropertyName #> = null;
        public IEnumerable<ValueTuple<RoutedEvent, Delegate, bool>> <#= RoutedEventHandlersPropertyName #>
        { 
            get
            {
                return _<#= RoutedEventHandlersPropertyName #>;
            }
            set
            {
                if (_<#= RoutedEventHandlersPropertyName #> != value)
                {
                    _<#= RoutedEventHandlersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= RoutedCommandHandlersPropertyName #>
        protected CommandBindingCollection _<#= RoutedCommandHandlersPropertyName #> = null;
        public CommandBindingCollection <#= RoutedCommandHandlersPropertyName #>
        { 
            get
            {
                return _<#= RoutedCommandHandlersPropertyName #>;
            }
            set
            {
                if (_<#= RoutedCommandHandlersPropertyName #> != value)
                {
                    _<#= RoutedCommandHandlersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region variable declaration
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
        protected <#= GetUnderlyingTypeNameAsNullableEx(modelViewUIFormPropertySerializable, Model)  #> _<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = null;
        public <#= GetUnderlyingTypeNameAsNullableEx(modelViewUIFormPropertySerializable, Model)  #> <#=  GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> {
            get { return _<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>; }
            set { if(_<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> != value) { _<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = value; OnPropertyChanged(); ValidateFiled(value); } }
        }
<#
        if(modelViewUIFormPropertySerializable.IsShownInView) {
#>
        protected bool _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
        public bool <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> {
            get { return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #>; }
            set { if(_<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> != value) { _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = value; OnPropertyChanged(); } }
        }
<#
        }
        if (HasCombo(modelViewUIFormPropertySerializable, Model) && modelViewUIFormPropertySerializable.IsShownInView) { 
#>
        protected object _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
        public object <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> {
            get { return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>; }
            set { if(_<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> != value) { 
                    _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = value; 
                    OnPropertyChanged(); 
                    ValidateObjectFiled(value);
<#   
                    if (HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
                    Task.Run( async () => { <#=  GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(value, true); });
<#    
                    }
#>
                  } 
            }
        }
        protected IEnumerable _<#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
        public IEnumerable <#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> {
            get { return _<#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>; }
            set { if(_<#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> != value) { _<#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = value; OnPropertyChanged(); } }
        }
<#
        } // if (HasCombo(modelViewUIFormPropertySerializable, Model)) {
        if (HasButton(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
        protected object _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = null;
        public object <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> {
            get { return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>; }
            set { if(_<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> != value) { 
                    _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = value; 
                    OnPropertyChanged(); 
                    ValidateObjectFiled(value);

<#    
                    if (HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
                    Task.Run( async () => { <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(value, true); });
<#
                    }
#> 

                  } 
            }
        }
<#
        } // if (HasButton(modelViewUIFormPropertySerializable, Model)) { 
        if (HasTypeahead(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
        public object _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = null;
        public object <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> {
            get { return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>; }
            set { if(_<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> != value) { 
                    _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = value; 
                    OnPropertyChanged(); 
                    ValidateObjectFiled(value);
<#    
                    if (HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
                    Task.Run( async () => { <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(value, true); });
<#
                    }
#> 
                  } 
            }
        }
<#
        } // if (HasTypeahead(modelViewUIFormPropertySerializable, Model)) {  
    } // end of foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
    //////////////////////////// end helper variable and FormControl -generator 
#>
        #endregion

        #region <#= EformModePropertyName #>    

<#  
    if (ModelHasDoInitMethod) {
#>
        protected async void <#= OnEformModeChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<<#= EformModeEnumClassName #>> evarg) {
<#  
    } else {
#>
        protected void <#= OnEformModeChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<<#= EformModeEnumClassName #>> evarg) {
<#  
    }
#>
            if(evarg != null) {
                evarg.Handled = true;
                <#= EformModeEnumClassName #> nwval = (<#= EformModeEnumClassName #>)evarg.NewValue; 
                if(nwval != <#= EformModePropertyName #>) {
                    <#= UIDispatcherInvokePropertyName #>(() => {
                        _<#= EformModePropertyName #> = nwval;
                        OnPropertyChanged("<#= EformModePropertyName #>");
                    });
                    if(<#= IsOnLoadedCalledPropertyName #>) {
                        DoClearControls();
                        RunEformModeChanged();
                        InputToControls();
<#  
    if (ModelHasDoInitMethod) {
#>
                        await DoInit();
<#  
    }
#>
                        ClearValidationMessages();
                    }
                }
            }
        }
        protected <#= EformModeEnumClassName #> _<#= EformModePropertyName #> = <#= EformModeEnumClassName #>.DeleteMode;
        public <#= EformModeEnumClassName #> <#= EformModePropertyName #>
        {
            get
            {
                return _<#= EformModePropertyName #>;
            }
            set
            {
                if (_<#= EformModePropertyName #> != value) {
                    _<#= EformModePropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= FormControlModelPropertyName #>
<#  
    if (ModelHasDoInitMethod) {
#>
        protected async void <#= OnFormControlModelChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<object> evarg) {
<#  
    } else {
#>
        protected void <#= OnFormControlModelChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<object> evarg) {
<#  
    }
#>
            if(evarg != null) {
                evarg.Handled = true;
                <#= UIDispatcherInvokePropertyName #>(() => {
                    _<#= FormControlModelPropertyName #> =  evarg.NewValue as <#= modelInterfaceClassName #>;
                    OnPropertyChanged("<#= FormControlModelPropertyName #>");
                });

                if(<#= IsOnLoadedCalledPropertyName #>) {
                    DoClearControls();
                    InputToControls();
<#  
    if (ModelHasDoInitMethod) {
#>
                    await DoInit();
<#  
    }
#>
                    ClearValidationMessages();
                }
            }
        }
        protected <#= modelInterfaceClassName #> _<#= FormControlModelPropertyName #> = null;
        public <#= modelInterfaceClassName #> <#= FormControlModelPropertyName #>
        {
            get
            {
                return _<#= FormControlModelPropertyName #>;
            }
            set
            {
                if (_<#= FormControlModelPropertyName #> != value) {
                    _<#= FormControlModelPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= HiddenFiltersPropertyName #>
<#  
    if (ModelHasDoInitMethod) {
#>
        protected async void <#= OnHiddenFiltersChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>> evarg) {
<#  
    } else {
#>
        protected void <#= OnHiddenFiltersChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>> evarg) {
<#  
    }
#>
            if(evarg != null) {
                evarg.Handled = true;
                IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> nwval = evarg.NewValue as IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>;
                ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> curVal = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
                if(nwval != <#= HiddenFiltersPropertyName #>) {
                    foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf  in nwval) {
                        curVal.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {fltrName=hf.fltrName, fltrDataType=hf.fltrDataType,  fltrOperator=hf.fltrOperator, fltrValue=hf.fltrValue, fltrError=hf.fltrError });
                    }
                }
                <#= UIDispatcherInvokePropertyName #>(() => {
                    _<#= HiddenFiltersPropertyName #> = curVal;
                    OnPropertyChanged("<#= HiddenFiltersPropertyName #>");
                });
                    if(<#= IsOnLoadedCalledPropertyName #>) {
                        DoClearControls();
                        InputToControls();
<#  
    if (ModelHasDoInitMethod) {
#>
                        await DoInit();
<#  
    }
#>
                        ClearValidationMessages();
                    }
            }
        }
        protected IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> _<#= HiddenFiltersPropertyName #> = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
        public IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> <#= HiddenFiltersPropertyName #>
        {
            get
            {
                return _<#= HiddenFiltersPropertyName #>;
            }
            set
            {
                if (_<#= HiddenFiltersPropertyName #> != value) {
                    _<#= HiddenFiltersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

<#    //////////////////////////// start RunEformModeChanged()-generator
#>
        #region RunEformModeChanged
        public void RunEformModeChanged() {
            <#= UIDispatcherInvokePropertyName #>(() => {
<#
    for(int inptTp = 1; inptTp < 4; inptTp++) {
        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
        if (inptTp ==1) {
#>
                if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
                    if(ModeAddEqualUpdate) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
                    if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
                if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
                    if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
                if (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Default) {
                    if (string.IsNullOrEmpty(modelViewUIFormPropertySerializable.ForeignKeyNameChain)) {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
<#    
                    } else {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
<#    
                    }
                } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Default) {
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.ReadOnly) {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
<#    
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.ReadOnly) {
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
                    _<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                    OnPropertyChanged("<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                    _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
<#   
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
                    _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
<#   
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
                    _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
<#    
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                else { // GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == Hidden
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
<#    
                } // GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == Hidden
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } //foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
            } 
<#
    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
            });
        } // end of EformMode
        #endregion
<# //////////////////////////// end RunEformModeChanged()-generator
#>

<# //////////////////////////// start DoClearControls()-generator 
#>
        public void DoClearControls() {
            <#= UIDispatcherInvokePropertyName #>(() => {
<#
    {
        for(int inptTp = 1; inptTp < 4; inptTp++) {
            if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
            if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
            if (inptTp ==1) {
#>
                if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
                      if(ModeAddEqualUpdate) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
                      if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
            } else if (inptTp == 2) {
#>
                else if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
                      if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
            } else {
#>
                else if (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
            }
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
                        _<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = null;
                        OnPropertyChanged("<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>");
<#
                if (modelViewUIFormPropertySerializable.IsShownInView) { 
                    if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
                        _<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                        OnPropertyChanged("<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                        _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                        OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
<#    
                    } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                    else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = null;
                        OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
<#    
                    } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                    else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
                        _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = null;
                        OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
<#    
                    } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
            } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
                } 
<#    
        } // for(int inptTp = 1; inptTp < 4; inptTp++) {
    }
#>
            });
        }
<# //////////////////////////// end DoClearControls()-generator
#>

<#  
if (ModelHasDoInitMethod) {
#>
        public async Task DoInit() {
<#  //////////////////////////// start OnInit()-generator
    {
        bool genElse = false;
        for(int inptTp = 1; inptTp < 4; inptTp++) {
            if (HasModelInitMethodForInputMode(Model, inptTp)) {
            if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
            if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
            if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#= EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#= EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#= EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
            } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#= EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#= EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
            } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#= EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
            }
                foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                    if (modelViewUIFormPropertySerializable.IsShownInView) { 
                        if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, inptTp)) {
                            if ( GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp).Count < 1) {
#>
                await <#= GetExpressionForOnInitMethod(modelViewUIFormPropertySerializable, Model) #>();
<#    
                            }
                        } // if(HasInitMethod(modelViewUIFormPropertySerializable, Model)) {
                    } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
                } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
            }
<#    
            }
        } // for(int inptTp = 1; inptTp < 4; inptTp++) {
    }
#>
        } // DoInit() 

<#  
} // end of if (!ModelHasDoInitMethod) {...}
#>

<#  //////////////////////////// start InputToControls()-generator
#>
        public void InputToControls() {
            <#= UIDispatcherInvokePropertyName #>(() => {
                bool isNotDefByHdnfltr = true;
                if(<#= FormControlModelPropertyName #> != null) {
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
                    isNotDefByHdnfltr = true;
                    if(<#= HiddenFiltersPropertyName #> != null) {
                        <#= IWebServiceFilterRsltInterfaceClassName #> hf = <#= HiddenFiltersPropertyName #>.Where(h=>h.fltrName == "<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>").FirstOrDefault();
                        if (hf != null) {
                            if (string.IsNullOrEmpty(hf.fltrError)) {
                                <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = hf.fltrValue;
                                isNotDefByHdnfltr = false;
                            }
                        }
                    }
                    if(isNotDefByHdnfltr) { <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = <#= FormControlModelPropertyName #>.<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>; }
<#
    }
#>
                } else {
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
                    isNotDefByHdnfltr = true;
                    if(<#= HiddenFiltersPropertyName #> != null) {
                        <#= IWebServiceFilterRsltInterfaceClassName #> hf = <#= HiddenFiltersPropertyName #>.Where(h=>h.fltrName == "<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>").FirstOrDefault();
                        if (hf != null) {
                            if (string.IsNullOrEmpty(hf.fltrError)) {
                                <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = hf.fltrValue;
                                isNotDefByHdnfltr = false;
                            }
                        }
                    }
                    if(isNotDefByHdnfltr) { <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = null; }
<#
    }
#>
                }
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if(IsIdentityPropertyEx(modelViewUIFormPropertySerializable, Model)) {
#>
                if(<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> == null)  <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = 0;
<#
        }
    }
#>
            });
        }
<#  //////////////////////////// start InputToControls()-generator
#>

<#  //////////////////////////// start OnInit...()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasInitMethod(modelViewUIFormPropertySerializable, Model)) {
#>
    public async Task <#= GetExpressionForOnInitMethod(modelViewUIFormPropertySerializable, Model) #>() {
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

                        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
                        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
//
// GetViewNameForControlList()
// ForeignKeys-chain defines the View for which we generate current method
// not direct MasterView (!!!) but the View that has current ForeignKeys-chain
// 
// So.
// 1.
// GetViewNameForControlList() returns the ViewName which can be or can not be equal to Model.ViewName;
// 2.
// GetPrimaryKeyProps() returns PrimaryKey Properties of the ViewName, not Model.ViewName
//
// 3.
// GetDirectMasters() returns direct masters for the current ViewName, not Model.ViewName
// we need them to call OnInit...() after defining current ViewName
// GetDirectMasters() returns only those masters which have combo/typeahead/searchBox control in the Model
//
// 4.
// GetDirectDetails() returns direct details for the ViewName not Model.ViewName
// GetDirectDetails() returns only those Details which have combo/typeahead/searchBox control in the Model
// 

                        string viewName =  GetViewNameForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        string servisPropNm  = FormServicePrefix + viewName;
                        List<ModelViewPropertyOfVwSerializable> primKeyProps = GetPrimaryKeyProps(Context, viewName);
                        if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, inptTp)) {
                            List<ModelViewUIFormPropertySerializable> directMasters = 
                             GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
                            if (primKeyProps.Count > 0) {
                                foreach(ModelViewPropertyOfVwSerializable pkpModelViewPropertyOfVwSerializable in primKeyProps) {
#>
            <#= GetUnderlyingTypeNameAsNullable(pkpModelViewPropertyOfVwSerializable) #> <#= GetPrimKeyVarName(pkpModelViewPropertyOfVwSerializable) #> = null;
<#  
                                }
                            } else {
#>
// error: could not find primary key for the given view: <#= viewName #> which was detected by the property: <#= modelViewUIFormPropertySerializable.ViewPropertyName #>
<#  
                            }
                            if ( MustHaveDirectDetails(modelViewUIFormPropertySerializable, Model, Context) ) {
                                List<ModelViewUIFormPropertySerializable> details = 
                                    GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                                foreach(ModelViewUIFormPropertySerializable dtlModelViewUIFormPropertySerializable in details) {
                                    ModelViewSerializable detailView = GetViewForControlList(dtlModelViewUIFormPropertySerializable, Model, Context, inptTp);
                                    List<ModelViewPropertyOfVwSerializable> foreignKeyProps = GetForeignKeyProps(Context, Model, modelViewUIFormPropertySerializable, dtlModelViewUIFormPropertySerializable, inptTp);
                                    if(foreignKeyProps.Count != primKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #>
//    method[GetForeignKeyProps]                     foreignKey Props Count = [<#= foreignKeyProps.Count #>] and prim Key Props Count = [<#= primKeyProps.Count #>] 
<#  
                                }
                                    for(int loci = 0; loci < primKeyProps.Count; loci++) {
                                        if(foreignKeyProps.Count > loci) {
                                            ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable = primKeyProps[loci];
                                            ModelViewPropertyOfVwSerializable frgnKpModelViewPropertyOfVwSerializable = foreignKeyProps[loci];
                                            if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                if((<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceName(detailView) #>) != null) { 
                        <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = (<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>  as <#= GetInterfaceName(detailView) #>).<#= GetModelPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView) #>;
                }
<#
                                            } else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                if((<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> as <#= GetInterfaceName(detailView) #>) != null) {
                        <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = (<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> as <#= GetInterfaceName(detailView) #>).<#= GetModelPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView) #>;
                }
<#
                                            }  else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                if((this.<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #> as <#= GetInterfaceName(detailView) #>) != null) {
                        <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = (<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #> as <#= GetInterfaceName(detailView) #>).<#= GetModelPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView) #>;
                }
<#                                    
                                            }                                                   
                                        }
                                    } // for(int loci = 0; loci < primKeyProps.Count; loci++)
                                } // foreach(ModelViewUIFormPropertySerializable dtlModelViewUIFormPropertySerializable in details)
#>
                bool isPkNtDf =  <# {int i = 0;
                            foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #> || <# } 
                                    #> (<#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> == null) <#
                                    i++;
                                }} #>  ;
                if (isPkNtDf) { 
<#
                            if(directMasters.Count < 1) {
#>
                    await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                    await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                    await <#=  GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                } else {
                    <#= GetInterfaceNameEx(Context, viewName) #> data = 
                        await <#= servisPropNm #>.<#= GetOneMethodName #>(<# {int i = 0;
                                foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #>, <# } 
                                        #><#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #><#= NullableValueSuffix(primKpModelViewPropertyOfVwSerializable)#><#
                                        i++;
                                    }} #> );
                    if (data != null) {
                        <#= GetInterfaceNameEx(Context, viewName) #> dataN = <#= servisPropNm #>.<#= CopyToModelNotifyMethodName #>(data);
<#
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                                ValidateObjectFiled(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                        });
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                                ValidateObjectFiled(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                        });
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>  = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                                ValidateObjectFiled(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                        });
<#
                            }
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>, false);
                        await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>, false);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>, false);
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                        await this.<#= GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                    } else {
<#
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                        await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                        await <#= GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                            <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", "Could not get item by primary key for <#= viewName #>");
                        });
                    }
                }
<#
                            } else { // if ( MustHaveDirectDetails(modelViewUIFormPropertySerializable, Model, Context) )
                                List<ModelViewPropertyOfVwSerializable> foreignKeyProps = GetForeignKeyPropsBase(Context, Model, modelViewUIFormPropertySerializable);
                                if(foreignKeyProps.Count != primKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #>
//   method [GetForeignKeyPropsBase]                      foreignKey Props Count = [<#= foreignKeyProps.Count #>] and prim Key Props Count = [<#= primKeyProps.Count #>] 
<#  
                                }
                                for(int loci = 0; loci < primKeyProps.Count; loci++) {
                                    if(foreignKeyProps.Count > loci) {
                                        ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable = primKeyProps[loci];
                                        ModelViewPropertyOfVwSerializable frgnKpModelViewPropertyOfVwSerializable = foreignKeyProps[loci];
#>
                <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = <#= GetModelPropertyName(frgnKpModelViewPropertyOfVwSerializable, Model) #>;
<#
                                    }
                                } // for(int loci = 0; loci < primKeyProps.Count; loci++)
#>
                bool isPkNtDf =  <# {int i = 0;
                            foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #> || <# } 
                                    #> (<#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> == null) <#
                                    i++;
                                }} #>  ;
                if (isPkNtDf) { 
<#
                            if(directMasters.Count < 1) {
#>
                    await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                    await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                    await <#=  GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                } else {
                    <#= GetInterfaceNameEx(Context, viewName) #> data = 
                        await <#= servisPropNm #>.<#= GetOneMethodName #>(<# {int i = 0;
                                foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #>, <# } 
                                        #><#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #><#= NullableValueSuffix(primKpModelViewPropertyOfVwSerializable)#><#
                                        i++;
                                    }} #> );
                    if(data != null) {
                        <#= GetInterfaceNameEx(Context, viewName) #>  dataN = <#= servisPropNm #>.<#= CopyToModelNotifyMethodName #>(data);
<#
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                                ValidateObjectFiled(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                        });
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                                ValidateObjectFiled(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                        });
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                                ValidateObjectFiled(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                        });
<#
                            }
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>, false);
                        await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>, false);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>, false);
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                        await <#= GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                    } else {
<#
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                        await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                        await <#= GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                        <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", "Could not get item by primary key for <#= viewName #>");
                    }
            }
<#  
                        } // if ( MustHaveDirectDetails(modelViewUIFormPropertySerializable, Model, Context) ) {...} else {
#>
        }
<#  
                        } // if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, 1)) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }
<#    
                } // if(HasInitMethod(modelViewUIFormPropertySerializable, Model))
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end OnInit...()-generator
#>

<#  //////////////////////////// start OnUpdate...ComboList()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasCombo(modelViewUIFormPropertySerializable, Model)) {
#>
    public async Task <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>() {
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

                        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
                        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                        if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                            ModelViewSerializable locView = 
                                GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
            
                            string viewName = ""; 
                            if (locView != null) {
                                viewName = locView.ViewName;
                            }
                            string servisPropNm  = FormServicePrefix + viewName;
                            List<ModelViewUIFormPropertySerializable> directMasters = 
                                GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);


        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
                            if (directMasters.Count < 1) {
#>

            <#= GetFilterInterfaceNameEx(Context, viewName) #> flt = <#= FormServicePrefix #><#= viewName #>.GetFilter();
            <#= GetOrderBy(modelViewUIFormPropertySerializable, Model, Context, inptTp,"flt") #>
            <#= GetPageInterfaceNameEx(Context, viewName) #> data = await this.<#= servisPropNm #>.<#= GetWithFilterMethodName #>(flt);
            if (data != null) {
                ObservableCollection<<#= GetInterfaceNameEx(Context, viewName) #>> newLst = null;
                if (data.items != null) {
                    foreach(<#= GetInterfaceNameEx(Context, viewName) #> itm in data.items) {
                        if (newLst == null) newLst = new ObservableCollection<<#= GetInterfaceNameEx(Context, viewName) #>>();
                        newLst.Add(<#= servisPropNm #>.<#= CopyToModelNotifyMethodName #>(itm));
                    }
                }
                int indx = -1;
                if ((newLst != null) && ((<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>) != null)) {
                    <#= GetInterfaceNameEx(Context, viewName) #> lfc = <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>;
                    <#= GetInterfaceNameEx(Context, viewName) #> slctItm = newLst.Where(e => <#= GetPrimKeyFilterForFindIndexMethod(Context, viewName, "e", "lfc")  #>).FirstOrDefault();
                    if(slctItm != null) {
                        indx = newLst.IndexOf(slctItm);
                        if(indx > -1) {
                            newLst.RemoveAt(indx);
                            newLst.Insert(indx, lfc);
                        }
                    }
                }
                <#= UIDispatcherInvokePropertyName #>(() => {
                    _<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = newLst;
                    OnPropertyChanged("<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                });
                if ((newLst == null) || (indx < 0)) {
                    await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                } 
            } else {
                <#= UIDispatcherInvokePropertyName #>(() => {
                    this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                });
                await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                <#= UIDispatcherInvokePropertyName #>(() => {
                    <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", "Could not populate ComboBox for <#= viewName #>");
                });
            }
<#
                            } else {
                                List<ModelViewPropertyOfVwSerializable> allForeignKeyProps = GetAllForeignKeyProps(locView);
#>
            bool hasNoVal = (<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>) == null;
            <#= GetFilterInterfaceNameEx(Context, viewName) #> flt = <#= FormServicePrefix #><#= viewName #>.GetFilter();
            if (! hasNoVal) {
                <#= GetInterfaceNameEx(Context, viewName) #> lfc = <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>;
<#
                            foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                string masterViewName = "";
                                if(masterView != null) {
                                    masterViewName = masterView.ViewName;
                                }
                                List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain #>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                }
                                {
                                    bool setOr = false;
                                    for(int i = 0; i < detailForeignKeyProps.Count; i++) {
                                        if(!IsPropertyNullable(detailForeignKeyProps[i])) continue;
                                        if(setOr) {
#>                                            || (lfc.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #> == null) 
<#
                                        } else {
#>                hasNoVal = hasNoVal ? hasNoVal : ((lfc.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #> == null)
<#
                                            setOr = true;
                                        }
                                    }
                                    if(setOr) { 
#>                                            );<# 
                                    }
                                }


                            }
#>                              
                if(!hasNoVal) {
<#
                            foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                string masterViewName = "";
                                if(masterView != null) {
                                    masterViewName = masterView.ViewName;
                                }
                                List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                }
                                for(int i = 0; i < detailForeignKeyProps.Count; i++) {
#>
                    if(flt.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[i]) #>>();
                    flt.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #>.Add(lfc.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #>);
                    if(flt.<#= GetFilterPropertyOperatorName(detailForeignKeyProps[i], locView, FilterOperatorSuffix) #> == null) flt.<#= GetFilterPropertyOperatorName(detailForeignKeyProps[i], locView, FilterOperatorSuffix) #> = new List<string>();
                    flt.<#= GetFilterPropertyOperatorName(detailForeignKeyProps[i], locView, FilterOperatorSuffix) #>.Add("eq");
<#
                                }
                            }
#>
                }
            }
            if (hasNoVal) {
                hasNoVal = false;
<#
                              foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }
#>          
                if (! hasNoVal) {
<#
                                    foreach(ModelViewPropertyOfVwSerializable masterProp in masterPrimKeyProps) {
                                        if(!IsPropertyNullable(masterProp)) continue;
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                    hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                    hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                    hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }
                                    }
#>
                }
<#
                              }
#>
                if (!hasNoVal) {
<#
                            foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                string masterViewName = "";
                                if(masterView != null) {
                                    masterViewName = masterView.ViewName;
                                }
                                List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                }
                                for(int loci = 0; loci < detailForeignKeyProps.Count; loci++) {
                                    if(loci < masterPrimKeyProps.Count) {
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                    if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
                    flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                    if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
                    flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                    if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
                    flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                        }
                                    }
                                }
                            }
#>
                }
            }
            if (!hasNoVal) {
                <#= GetOrderBy(modelViewUIFormPropertySerializable, Model, Context, inptTp,"flt") #>
                <#= GetPageInterfaceNameEx(Context, viewName) #> data = await <#= servisPropNm #>.<#= GetWithFilterMethodName #>(flt);
                if (data != null) {
                    ObservableCollection<<#= GetInterfaceNameEx(Context, viewName) #>> newLst = null;
                    if (data.items != null) {
                        foreach(<#= GetInterfaceNameEx(Context, viewName) #> itm in data.items) {
                            if (newLst == null) newLst = new ObservableCollection<<#= GetInterfaceNameEx(Context, viewName) #>>();
                            newLst.Add(<#= servisPropNm #>.<#= CopyToModelNotifyMethodName #>(itm));
                        }
                    }
                    int indx = -1;
                    if ((newLst != null) && ((<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>) != null)) {
                        <#= GetInterfaceNameEx(Context, viewName) #> lfc = <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>;
                        <#= GetInterfaceNameEx(Context, viewName) #> slctItm = newLst.Where(e => <#= GetPrimKeyFilterForFindIndexMethod(Context, viewName, "e", "lfc")  #>).FirstOrDefault();
                        if(slctItm != null) {
                            indx = newLst.IndexOf(slctItm);
                            if(indx > -1) {
                                newLst.RemoveAt(indx);
                                newLst.Insert(indx, lfc);
                            }
                        }
                    }
                    <#= UIDispatcherInvokePropertyName #>(() => {
                        _<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = newLst;
                        OnPropertyChanged("<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                    });
                    if ((newLst == null) || (indx < 0)) {
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                    } 
                } else {
                    <#= UIDispatcherInvokePropertyName #>(() => {
                        _<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                        OnPropertyChanged("<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                    });
                    await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                }
            }
<#
                        } 
#>
        }
<#  
                        } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }
<#  
                } // if(HasCombo(modelViewUIFormPropertySerializable, Model)) {
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end  OnUpdate...ComboList()-generator
#>

<#  //////////////////////////// start OnFilter...Typeahead()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasTypeahead(modelViewUIFormPropertySerializable, Model)) {
#>

    protected ISuggestionProvider _<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>Provider = null;
    public ISuggestionProvider <#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>Provider
    {
        get { return _<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>Provider ?? 
                    (_<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>Provider = new SuggestionProvider(<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>)); }

        set
        {
            if(_<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>Provider != value) {
                _<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>Provider = value;
                OnPropertyChanged("<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
            }
            
        }
    }
    // this method is not async
    public IEnumerable <#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>(string inFilter) {
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                        if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                            ModelViewSerializable locView = 
                                GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                            if(locView == null) {
#>
//
// error: Could not find model for for the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> with a method GetViewForControlList
// 
<#  
                            }
                            string viewName = ""; 
                            if (locView != null) {
                                viewName = locView.ViewName;
                            }
                            string servisPropNm  = FormServicePrefix + viewName;
                            List<ModelViewUIFormPropertySerializable> directMasters = 
                                GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
#>
            bool hasNoVal = false;
            <#= GetFilterInterfaceName(locView) #> flt = <#= FormServicePrefix #><#= locView.ViewName #>.GetFilter();
<#
                            if (directMasters.Count > 0) {
                                List<ModelViewPropertyOfVwSerializable> allForeignKeyProps = GetAllForeignKeyProps(locView);
                              foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }
#>                    
            if (! hasNoVal) {
<#
                                    foreach(ModelViewPropertyOfVwSerializable masterProp in masterPrimKeyProps) {
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }
                                    }
#>
            }
<#
                              } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
#>
            if (hasNoVal) {
                return null;
            }
<#
                                foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                    if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                    }
                                    for(int loci = 0; loci < detailForeignKeyProps.Count; loci++) {
                                        if(loci < masterPrimKeyProps.Count) {
                                            if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
            flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
            flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
            flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                            }
                                        }
                                    }
                                } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                            } //  if (directMasters.Count > 0) {
#>
            if(!string.IsNullOrEmpty(inFilter)) {
<#                          
                            {
                                // modelViewUIFormPropertySerializable, Model, locView
                            ModelViewPropertyOfVwSerializable masterProp = GetTypeAheadMasterPropEx(Model, modelViewUIFormPropertySerializable, locView);
                            if(masterProp == null) {
#>
//
//error: could not find master property for the given detail property: <#= modelViewUIFormPropertySerializable.ViewPropertyName #> <# if(locView != null) { #> and the view: <#= locView.ViewName #>  <# } #> 

//       with a method GetTypeAheadMasterPropEx
//
<#
                            }
                            if (directMasters.Count < 1) {
                                if (!IsPropertyString(masterProp)) {
#>
/*  it is not a string property
<#
                                }
#>
                        if(flt.<#= GetModelPropertyName(masterProp, locView) #> == null) flt.<#= GetModelPropertyName(masterProp, locView) #> = new List<<#= GetPropertyTypeName(masterProp) #>>();
                        flt.<#= GetModelPropertyName(masterProp, locView) #>.Add(inFilter);
<#                          
                                if (!IsPropertyString(masterProp)) {
#>
*/
<#
                                }
                            } else {
                                if (!IsPropertyString(masterProp)) {
#>
/*  it is not a string property
<#
                                }
#>
                        if(flt.<#= GetModelPropertyName(masterProp, locView) #> == null) flt.<#= GetModelPropertyName(masterProp, locView) #> = new List<<#= GetPropertyTypeName(masterProp) #>>();
                        flt.<#= GetModelPropertyName(masterProp, locView) #>.Add(inFilter);
<#                          
                                if (!IsPropertyString(masterProp)) {
#>
*/
<#
                                }
                            }
                            }
#>
            }
            <#= GetOrderBy(modelViewUIFormPropertySerializable, Model, Context, inptTp,"flt") #>
            Task<<#= GetPageInterfaceName(locView) #>> t = <#= servisPropNm #>.<#= GetWithFilterMethodName #>(flt);
            t.Wait();
            if(t.Result == null) {
                return null;
            }
            if(t.Result.items == null) {
                return null;
            }
            ObservableCollection<<#= GetInterfaceName(locView) #>>  rslt = new ObservableCollection<<#= GetInterfaceName(locView) #>>();
            foreach(<#= GetInterfaceName(locView) #> itm in t.Result.items) {
                rslt.Add(<#= servisPropNm #>.<#= CopyToModelNotifyMethodName #>(itm));
            }
            return rslt;
        }
<#  
                        } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
        return null;
    }
<#  
                } // if(HasTypeahead(modelViewUIFormPropertySerializable, Model)) {
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end OnFilter...Typeahead()-generator
#>

<#  //////////////////////////// start OnValChange...()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if (HasInitMethod(modelViewUIFormPropertySerializable, Model) && 
                    HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
    public async Task <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(object inputVal, bool dscrdChld) {
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                        List<ModelViewUIFormPropertySerializable> directMasters = 
                                GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        ModelViewSerializable locView = 
                            GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        string viewName = ""; 
                        if(locView == null) {
#>
//
// error: Could not find model for for the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> with a method GetViewForControlList
// 
<#  
                        }
                        if (locView != null) {
                            viewName = locView.ViewName;
                        }
                        List<ModelViewPropertyOfVwSerializable> locViewPrimKeys = GetPrimaryKeyProps(Context, viewName);
                        string servisPropNm  = FormServicePrefix + viewName;
                        
                        List<ModelViewUIFormPropertySerializable> details = 
                                    GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        List<ModelViewUIFormPropertySerializable> dependentScalarProps = 
                                    GetDependentScalarProps(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        if ((dependentScalarProps.Count > 0) || (details.Count > 0)) {

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }



                        if(dependentScalarProps.Count > 0) {
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {

#>
            <#= GetInterfaceName(locView) #> inVal = inputVal as <#= GetInterfaceName(locView) #>;
            bool hasNoVal = inVal == null;
            if (hasNoVal) { dscrdChld = true; }
<#
                            } else {
#>
            <#= GetInterfaceName(locView) #> inVal = inputVal as <#= GetInterfaceName(locView) #>;
            bool hasNoVal = inVal == null;
            if (hasNoVal) { dscrdChld = true; }
<#
                            }
                        if(directMasters.Count < 1) {
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
            });
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
            });
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
            });
<#
                            }
                            {
                                List<string> fltFlds = new List<string>();
                                fltFlds= GetHiddenFilterDisablingFields(Model, Context, modelViewUIFormPropertySerializable.ForeignKeyNameChain, fltFlds);
                                if(fltFlds == null) {
#>
////////// nothing
<#
                                }
                                if (fltFlds != null) {
                                    if (fltFlds.Count > 0) {
#>
            bool isDsbl = false;
<#
                                        foreach(string fltFld in fltFlds) {
#>
            isDsbl = isDsbl ? isDsbl : <#= HiddenFiltersPropertyName #>.Any(v => v.fltrName == "<#= fltFld #>");
<#
                                        }
                                    }
                                }
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = !isDsbl;
            });
<#
                                } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = !isDsbl;
            });
<#
                                } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> =  !isDsbl;
            });
<#
                                }
                            }
                        } else {
#>
            bool isDsbl = false;
<#
                            foreach(ModelViewUIFormPropertySerializable masterProp in directMasters) {
                                if (GetInputTypeWhenXXX(masterProp, inptTp) == InputTypeEnum.Combo) {
#>
            isDsbl = isDsbl ? isDsbl : (this.<#= GetModelPropertyNameWithSufix(masterProp, Model, ComboSufix) #> == null);
<#
                                } else if (GetInputTypeWhenXXX(masterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            isDsbl = isDsbl ? isDsbl : (this.<#= GetModelPropertyNameWithSufix(masterProp, Model, TypeaheadSufix) #> == null);
<#
                                } else if (GetInputTypeWhenXXX(masterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            isDsbl = isDsbl ? isDsbl : (this.<#= GetModelPropertyNameWithSufix(masterProp, Model, ButtonSufix) #> == null);
<#
                                }
                            }
                            {
                                List<string> fltFlds = new List<string>();
                                fltFlds= GetHiddenFilterDisablingFields(Model, Context, modelViewUIFormPropertySerializable.ForeignKeyNameChain, fltFlds);
                                if(fltFlds == null) {
#>
////////// nothing
<#
                                }
                                if (fltFlds != null) {
                                    if (fltFlds.Count > 0) {
#>
            if(!isDsbl) {
<#
                                        foreach(string fltFld in fltFlds) {
#>
                isDsbl = isDsbl ? isDsbl : <#= HiddenFiltersPropertyName #>.Any(v => v.fltrName == "<#= fltFld #>");
<#
                                        }
#>
            }
<#
                                    }
                                }
                            }
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = !isDsbl;
            });
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = !isDsbl;
            });
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = !isDsbl;
            });
<#
                            }
                        }
               {
                                bool showUIDispatcher1 = locViewPrimKeys != null;
                                showUIDispatcher1 = showUIDispatcher1 ? (locViewPrimKeys.Count > 0) : false;
                                bool showUIDispatcher2 = dependentScalarProps != null;
                                showUIDispatcher2 = showUIDispatcher2 ? (dependentScalarProps.Count > 0) : false;

#>
            if (hasNoVal) { 
<#
                        if (showUIDispatcher1 || showUIDispatcher2) {
#>
                <#= UIDispatcherInvokePropertyName #>(() => {
<#
                        }

                                foreach(ModelViewUIFormPropertySerializable dependentModelViewUIFormPropertySerializable in dependentScalarProps) {
                                        ModelViewPropertyOfVwSerializable viewProp =
                                            GetOnValChangeViewPropName(Context, Model, modelViewUIFormPropertySerializable, dependentModelViewUIFormPropertySerializable, inptTp);
                                        if(viewProp != null) {
#>
                    _<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>");
                    ValidateFiled(null, "<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>");
<#
                                        } else {
#>
// error: with method GetOnValChangeViewPropName() no mapping for view <#= viewName #> and props pair <#= modelViewUIFormPropertySerializable.ViewPropertyName  #> and <#= dependentModelViewUIFormPropertySerializable.ViewPropertyName  #>
<#
                                        }
                                } // foreach(ModelViewUIFormPropertySerializable dependentModelViewUIFormPropertySerializable in dependentScalarProps) {
                                foreach(ModelViewPropertyOfVwSerializable locViewPrimKey in locViewPrimKeys) {
                                    List<ModelViewPropertyOfVwSerializable> dependentPkScalarProps = GetForeignKeyPropByIndirectPrimaryKeyPropEx(Model, modelViewUIFormPropertySerializable, locView, Context, locViewPrimKey);
                                    if (dependentPkScalarProps != null) {
                                        foreach(ModelViewPropertyOfVwSerializable dependentPkScalarProp in dependentPkScalarProps) {
                                            if(!dependentScalarProps.Any(p => p.ViewPropertyName == dependentPkScalarProp.ViewPropertyName)) {
#>
                    _<#= GetModelPropertyName(dependentPkScalarProp, Model) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyName(dependentPkScalarProp, Model) #>");
                    ValidateFiled(null, "<#= GetModelPropertyName(dependentPkScalarProp, Model) #>");
<#
                                            }
                                        }
                                    }
                                }
                        if (showUIDispatcher1 || showUIDispatcher2) {
#>
                });
<#
                        }

#>
            } else {
<#
                        if (showUIDispatcher1 || showUIDispatcher2) {
#>
                <#= UIDispatcherInvokePropertyName #>(() => {
<#
                        }
                                foreach(ModelViewUIFormPropertySerializable dependentModelViewUIFormPropertySerializable in dependentScalarProps) {

                                        ModelViewPropertyOfVwSerializable viewProp =
                                            GetOnValChangeViewPropName(Context, Model, modelViewUIFormPropertySerializable, dependentModelViewUIFormPropertySerializable, inptTp);
                                        if(viewProp != null) {

#>
                    _<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #> = inVal.<#=  GetModelPropertyName(viewProp,locView) #>;
                    OnPropertyChanged("<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>");
                    ValidateFiled(_<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>, "<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>");
<#
                                        } else {
#>
// error: with method GetOnValChangeViewPropName() no mapping for view <#= viewName #> and props pair <#= modelViewUIFormPropertySerializable.ViewPropertyName  #> and <#= dependentModelViewUIFormPropertySerializable.ViewPropertyName  #>
<#
                                        }
                                }
                                foreach(ModelViewPropertyOfVwSerializable locViewPrimKey in locViewPrimKeys) {
                                    List<ModelViewPropertyOfVwSerializable> dependentPkScalarProps = GetForeignKeyPropByIndirectPrimaryKeyPropEx(Model, modelViewUIFormPropertySerializable, locView, Context, locViewPrimKey);
                                    if (dependentPkScalarProps != null) {
                                        foreach(ModelViewPropertyOfVwSerializable dependentPkScalarProp in dependentPkScalarProps) {
                                            if(!dependentScalarProps.Any(p => p.ViewPropertyName == dependentPkScalarProp.ViewPropertyName)) {
#>
                    _<#= GetModelPropertyName(dependentPkScalarProp, Model) #> = inVal.<#=  GetModelPropertyName(locViewPrimKey, locView) #>;
                    OnPropertyChanged("<#= GetModelPropertyName(dependentPkScalarProp, Model) #>");
                    ValidateFiled(_<#= GetModelPropertyName(dependentPkScalarProp, Model) #>, "<#= GetModelPropertyName(dependentPkScalarProp, Model) #>");
<#
                                            }
                                        }
                                    }
                                }
                        if (showUIDispatcher1 || showUIDispatcher2) {
#>
                });
<#
                        }
#>
            }
<#
               }
                            } ///// the end of if(dependentScalarProps.Count > 0) {


                        foreach(ModelViewUIFormPropertySerializable dtlModelViewUIFormPropertySerializable in details) {
                            if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            if(dscrdChld) {
                <#= UIDispatcherInvokePropertyName #>(() => {
                    _<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                    ValidateObjectFiled(null, "<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                    _<#= GetExpressionForControlList(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                    OnPropertyChanged("<#= GetExpressionForControlList(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                });
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(null, dscrdChld);
            } else {
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(this.<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>, dscrdChld);
            }
            await <#= GetExpressionForOnUpdateComboControlListMethod(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                            } else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            if(dscrdChld) {
                <#= UIDispatcherInvokePropertyName #>(() => {
                    _<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = null;
                    OnPropertyChanged("<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                    ValidateObjectFiled(null, "<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                });
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(null, dscrdChld);

            } else {
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(this.<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>, dscrdChld);
            }
<#
                            } else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            if(dscrdChld) {
                <#= UIDispatcherInvokePropertyName #>(() => {
                    <#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #> = null;
                    OnPropertyChanged("<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                    ValidateObjectFiled(null, "<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                });
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(null, dscrdChld);
            } else {
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #>, dscrdChld); 
            }
<#
                            }
                        }
#>
        }
<#  
                        } // if ((dependentScalarProps.Count > 0) || (details.Count > 0)) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }
<#  
                } // if (HasInitMethod(modelViewUIFormPropertySerializable, Model)) {
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end  OnValChange...()-generator
#>

<#
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (HasButton(modelViewUIFormPropertySerializable, Model) &&  modelViewUIFormPropertySerializable.IsShownInView) {
#>
<# //////////////////////////// start SearchButtonClick()-generator
#>

    #region OkCommand
    private ICommand _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>Command;
    public ICommand <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>Command
    {
        get
        {
            return _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>Command ?? 
                (_<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>Command = 
                    new <#= commandHelperModelClassName #>(
                        (param) => <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>(), 
                        (param) => <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>CanExecute())
                );
        }
    }
    public bool <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>CanExecute()
    {
        return <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #>;
    }
    public void <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>() {
<#
                {
                bool genElse = false;
                for(int inptTp = 1; inptTp < 4; inptTp++) {

        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                    if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                        ModelViewSerializable locView = 
                            GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        string viewName = ""; 
                        if (locView != null) {
                            viewName = locView.ViewName;
                        }
                        List<ModelViewUIFormPropertySerializable> directMasters = 
                            GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#=  EformModePropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
#>
            bool hasNoVal = false;
            IDialogParameters dlgParams = new DialogParameters();
            dlgParams.Add("Caption", "<#= TitleCaptionVal #>");
<#
                        if (directMasters.Count > 0) {
                              List<ModelViewPropertyOfVwSerializable> allForeignKeyProps = GetAllForeignKeyProps(locView);
                              foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }
#>                    
            if (! hasNoVal) {
<#
                                    foreach(ModelViewPropertyOfVwSerializable masterProp in masterPrimKeyProps) {
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
                                            if(IsPropertyNullable(masterProp)) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                            }
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
                                            if(IsPropertyNullable(masterProp)) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                            }
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
                                            if(IsPropertyNullable(masterProp)) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                            }
                                        }
                                    }
#>
            }
<#
                            } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
#>
            if (hasNoVal) {
                <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("Form Error", "Could not start dialog: not all master data is defined.");
                return;                           
            }
            IList<<#= IWebServiceFilterRsltInterfaceClassName #>> hddnFltrs = new List<<#= IWebServiceFilterRsltInterfaceClassName #>>();
<#
                                foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                    if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                    }
                                    for(int loci = 0; loci < detailForeignKeyProps.Count; loci++) {
                                        if(loci < masterPrimKeyProps.Count) {
                                            if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            
            hddnFltrs.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {
                fltrName = "<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>",
                fltrDataType = "<#= GetCCharpDatatype(detailForeignKeyProps[loci], Model) #>",
                fltrOperator = "eq",
                fltrValue = (<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>
            });
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            hddnFltrs.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {
                fltrName = "<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>",
                fltrDataType = "<#= GetCCharpDatatype(detailForeignKeyProps[loci], Model) #>",
                fltrOperator = "eq",
                fltrValue = (<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>
            });
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            hddnFltrs.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {
                fltrName = "<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>",
                fltrDataType = "<#= GetCCharpDatatype(detailForeignKeyProps[loci], Model) #>",
                fltrOperator = "eq",
                fltrValue = (<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>
            });
<#
                                            }
                                        }
                                    }
                                } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
#>
            dlgParams.Add("HiddenFilters", hddnFltrs);
<#
                        } // if (directMasters.Count > 0) {
#>

            dialogService.ShowDialog("<#= GetModelClassName(locView, SdlgViewModelFolder) #>", dlgParams, async (rslt) => {
                if (rslt == null) return;
                if (rslt.Result != ButtonResult.OK) return;
                if (rslt.Parameters.ContainsKey("SelectedItem"))
                {
                    object itm = rslt.Parameters.GetValue<object>("SelectedItem");
                    if (itm == null) return;
                    <#= UIDispatcherInvokePropertyName #>(() => {
                        _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = itm;
                        OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                        ValidateObjectFiled(itm, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                    });
                    await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(itm, true);
                }
            });
        }
<#    
                    }
                }
                }
#>
    }
    #endregion
<# //////////////////////////// end SearchButtonClick()-generator
#>
<#    
            }
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>


<#  //////////////////////////// start ControlsToObject()-generator
#>
        public <#= GetInterfaceName(Model) #> ControlsToObject() {
            <#= GetInterfaceName(Model) #> rslt = <#= FormServicePrefix + Model.ViewName #>.<#= CopyToModelMethodName #>(null, null);
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if (IsStringPropertyEx(modelViewUIFormPropertySerializable, Model)) {
#>
            rslt.<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>;
<#
        } else {
#>
            if (<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.HasValue)
                rslt.<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value;
<#
        }
    }
#>
            return rslt;
        }
<# //////////////////////////// end ControlsToObject()-generator
#>

<#  //////////////////////////// start onSubmit()-generator
#>

        public async Task doSubmit(object sender) {
            CheckIsValid();
            if(HasErrors) return;

            <#= GetInterfaceName(Model) #> itm = ControlsToObject();
            if (<#= EformModePropertyName #> == <#= EformModeEnumClassName #>.<#=GetInputTypeToEnumName(1) #>) { 
                <#= GetInterfaceName(Model) #> data = await <#= FormServicePrefix + Model.ViewName #>.<#= AddOneMethodName #>(itm);
                if(data == null) {
                    <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("Http Error", "Could not update data on the server side.");
                    return;
                } else {
                    itm = <#= FormServicePrefix + Model.ViewName #>.<#= CopyToModelMethodName #>(data, <#= FormControlModelPropertyName #>);
                }
            } else if (this.<#= EformModePropertyName #> == <#= EformModeEnumClassName #>.<#=GetInputTypeToEnumName(2) #>) { 
                <#= GetInterfaceName(Model) #> data = await <#= FormServicePrefix + Model.ViewName #>.<#= UpdateOneMethodName #>(itm);
                if(data == null) {
                    <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("Http Error", "Could not update data on the server side.");
                    return;
                } else {
                    itm  = <#= FormServicePrefix + Model.ViewName #>.<#= CopyToModelMethodName #>(data, <#= FormControlModelPropertyName #>);
                }
            } else if (<#= EformModePropertyName #> == <#= EformModeEnumClassName #>.<#=GetInputTypeToEnumName(3) #>) { 
                <#= GetInterfaceName(Model) #> data = await <#= FormServicePrefix + Model.ViewName #>.<#= DeleteOneMethodName #>(<# 
                {
                    int counter = 0;
                    List<ModelViewPropertyOfVwSerializable> primKeys =  GetModelPrimaryKeyProps(Model);
                    foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
                        if(counter > 0) { #>, <#} #>  itm.<#= GetModelPropertyName(prop, Model) #><#
                        counter++;
                    }
                }
                #>);
                if(data == null) {
                    <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("Http Error", "Could not update data on the server side.");
                    return;
                } else {
                    itm = <#= FormServicePrefix + Model.ViewName #>.<#= CopyToModelMethodName #>(data, <#= FormControlModelPropertyName #>);
                }
            }
            // send routed command here and return itm and <#= EformModePropertyName #>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= RoutedCommandExtClassName #>.<#= EformOkCommandPropertyName #>.Execute(itm, sender as IInputElement);
            });
        }
<# //////////////////////////// end  onSubmit()-generator
#>

        public void Executed<#= OkCommandPropertyName #>(object sender, ExecutedRoutedEventArgs e) {
            e.Handled = true;
            Task.Run( async () => {
                await doSubmit(sender);
            });
        }
        public void CanExecute<#= OkCommandPropertyName #>(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
            e.CanExecute = !HasErrors; 
        }
        public void Executed<#= CancelCommandPropertyName #>(object sender, ExecutedRoutedEventArgs e) {
            e.Handled = true;
            <#= RoutedCommandExtClassName #>.<#= EformCancelCommandPropertyName #>.Execute(<#= FormControlModelPropertyName #>, sender as IInputElement);
        }
        public void CanExecute<#= CancelCommandPropertyName #>(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
            e.CanExecute = true;
        }

        #region Validation
        Dictionary<string, ICollection<string>> ValidationErrors = new Dictionary<string, ICollection<string>>();
        Dictionary<string, ICollection<string>> ValidationDataErrors = new Dictionary<string, ICollection<string>>();
        private void ValidationErrorHandler(object sender, ValidationErrorEventArgs e)
        {
            e.Handled = true;
            UIElement ue = (e.OriginalSource as UIElement);
            if (ue == null) return;
            if (string.IsNullOrEmpty(ue.Uid)) return;
            if (ValidationDataErrors.ContainsKey(ue.Uid)) {
                if(e.Error != null) {
                    if (e.Error.ErrorContent != null) {
                        string msg = e.Error.ErrorContent.ToString();
                        if(ValidationDataErrors[ue.Uid].Contains(msg)) return;
                    }
                }
            }
            if (e.Action == ValidationErrorEventAction.Added)
            {
                if (e.Error != null)
                {
                    if (e.Error.ErrorContent != null)
                    {
                        string msg = e.Error.ErrorContent.ToString();
                        if (ValidationErrors.ContainsKey(ue.Uid))
                        {
                            if(!ValidationErrors[ue.Uid].Contains(msg)) {
                                ValidationErrors[ue.Uid].Add(msg);
                            }
                        }
                        else
                        {
                            ValidationErrors[ue.Uid] = new List<string> { msg };
                        }
                    }
                }
            }
            else
            {
                if(!ValidationErrors.ContainsKey(ue.Uid))  return;
                string msg = null;
                if (e.Error != null) {
                    if (e.Error.ErrorContent != null)
                    {
                        msg = e.Error.ErrorContent.ToString();
                    }
                }
                if (string.IsNullOrEmpty(msg)) {
                    ValidationErrors[ue.Uid].Clear();
                } else {
                    ValidationErrors[ue.Uid].Remove(msg);
                }
                if(ValidationErrors[ue.Uid].Count < 1) {
                    ValidationErrors.Remove(ue.Uid);
                }
            }
        }
        public bool HasErrors { get { return (ValidationErrors.Count > 0) || (ValidationDataErrors.Count > 0); } }
        public System.Collections.IEnumerable GetErrors(string propertyName)
        {
            if (string.IsNullOrEmpty(propertyName)) {
                return null;
            }
            if(ValidationErrors.ContainsKey(propertyName)) 
                return ValidationErrors[propertyName];
            if (ValidationDataErrors.ContainsKey(propertyName))
                return ValidationDataErrors[propertyName];
            return null;
        }
        public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;
        private void RaiseErrorsChanged(string propertyName)
        {
            if (ErrorsChanged != null)
                ErrorsChanged(this, new DataErrorsChangedEventArgs(propertyName));
        }
        public void ValidateFiled(object value, [CallerMemberName] string filedName = null) {
            if (string.IsNullOrEmpty(filedName)) return;
            PropertyInfo propertyInfo = typeof(<#= GetInterfaceName(Model) #>).GetProperty(filedName);
            if(propertyInfo == null) return;
            IList<string> rslt = 
                    (from validationAttribute in propertyInfo.GetCustomAttributes(true).OfType<ValidationAttribute>()
                     where !validationAttribute.IsValid(value)
                     select validationAttribute.FormatErrorMessage(string.Empty)).ToList();
            bool hasErrors = rslt != null;
            hasErrors = hasErrors ? (rslt.Count > 0) : false;
            if(hasErrors) {
                ValidationDataErrors[filedName] = rslt;
                RaiseErrorsChanged(filedName);
            } else {
                if(ValidationDataErrors.ContainsKey(filedName))  {
                    ValidationDataErrors.Remove(filedName);
                    RaiseErrorsChanged(filedName);
                }
            }
        }
        public void ValidateObjectFiled(object value, [CallerMemberName] string filedName = null) {
            if (string.IsNullOrEmpty(filedName)) return;
            if (value != null) {
                if(ValidationDataErrors.ContainsKey(filedName))  {
                    ValidationDataErrors.Remove(filedName);
                    RaiseErrorsChanged(filedName);
                }
                return;
            }
            string msgfiledName = filedName;
<#
        if (ModelHasDoInitMethod) {
#>            
            RequiredAttribute requiredAttribute;
            string msg = null;
            switch(filedName) {
<#
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                if (HasCombo(modelViewUIFormPropertySerializable, Model) && modelViewUIFormPropertySerializable.IsShownInView) { 
                    if(IsPropertyRequiredInViewEx(modelViewUIFormPropertySerializable, Model)) {
#>
                case "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>":
                    requiredAttribute = new RequiredAttribute();
                    msg = requiredAttribute.FormatErrorMessage(string.Empty);
                    break;
<#
                    }
                }
                if (HasButton(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {
#>
                case "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>":
                    requiredAttribute = new RequiredAttribute();
                    msg = requiredAttribute.FormatErrorMessage(string.Empty);
                    msgfiledName = "<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>";
                    break;
<#
                }
                if (HasTypeahead(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
                case "<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>":
                    requiredAttribute = new RequiredAttribute();
                    msg = requiredAttribute.FormatErrorMessage(string.Empty);
                    break;
<#
                }
            }
#>
                default:
                    break;
            }
            if (!string.IsNullOrEmpty(msg)) {
                ValidationDataErrors[msgfiledName] = new List<string>() { msg };
                RaiseErrorsChanged(msgfiledName);
            }
<#
        }
#>
        }
        public void CheckIsValid() {
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
            ValidateFiled(<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>, "<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>");
<#
    }
    if (ModelHasDoInitMethod) {
        InputTypeEnum InputTypeWhenXXX ;
        for (int InputTypeId = 1; InputTypeId <= 3; InputTypeId++) {
#>
            if (<#= EformModePropertyName #> == <#= EformModeEnumClassName #>.<#= GetInputTypeToEnumName(InputTypeId) #>) {
<#
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                switch(InputTypeId) {
                    case 1:
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenAdd;
                        break;
                    case 2:
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenUpdate;
                        break;
                    default: 
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenDelete;
                        break;
                }
                if (modelViewUIFormPropertySerializable.IsShownInView ) {
                    if(InputTypeWhenXXX == InputTypeEnum.Combo) {
#>
                        ValidateObjectFiled(<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>, "<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
<#
                    }
                    if(InputTypeWhenXXX == InputTypeEnum.Typeahead) {
#>
                        ValidateObjectFiled(<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>, "<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
<#
                    }
                    if(InputTypeWhenXXX == InputTypeEnum.SearchDialog) {
#>
                        ValidateObjectFiled(<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>, "<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
<#
                    }
                }
            }
#>
            }
<#
        }
    }
#>
        }
        public void ClearValidationMessages() {
            ValidationErrors.Clear();
            ValidationDataErrors.Clear();
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
            RaiseErrorsChanged("<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>");
<#
    }
    if (ModelHasDoInitMethod) {
        InputTypeEnum InputTypeWhenXXX ;
        for (int InputTypeId = 1; InputTypeId <= 3; InputTypeId++) {
#>
            if (<#= EformModePropertyName #> == <#= EformModeEnumClassName #>.<#= GetInputTypeToEnumName(InputTypeId) #>) {
<#
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                switch(InputTypeId) {
                    case 1:
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenAdd;
                        break;
                    case 2:
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenUpdate;
                        break;
                    default: 
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenDelete;
                        break;
                }
                if (modelViewUIFormPropertySerializable.IsShownInView ) {
                    if(InputTypeWhenXXX == InputTypeEnum.Combo) {
#>
                        RaiseErrorsChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
<#
                    }
                    if(InputTypeWhenXXX == InputTypeEnum.Typeahead) {
#>
                        RaiseErrorsChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
<#
                    }
                    if(InputTypeWhenXXX == InputTypeEnum.SearchDialog) {
#>
                        RaiseErrorsChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
<#
                    }
                }
            }
#>
            }
<#
        }
    }
#>
        }
        #endregion

    }
}
<#+
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetFilterInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    string GetPageInterfaceName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }

    string GetModelServiceInterfaceName(ModelViewSerializable model) {
        return "I" + model.ViewName + "Service";
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetNotifyInterfaceName(ModelViewSerializable model) {
        return GetInterfaceName(model) + "Notify";
    }
    string GetFilterName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName) + "Filter";
    }

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetUnderlyingTypeNameAsNullable(ModelViewPropertyOfVwSerializable prop) {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        return prop.UnderlyingTypeName + " ?";
    }
    string GetUnderlyingTypeNameAsNullableEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetUnderlyingTypeNameAsNullable(sclrProp);
    }


    string NullableValueSuffix(ModelViewPropertyOfVwSerializable prop) {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return "";
        }
        return ".Value";
    }
    string NullableValueSuffixEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return NullableValueSuffix(sclrProp);
    }
    bool IsStringProperty(ModelViewPropertyOfVwSerializable prop) {
        return "System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase);
    }
    bool IsStringPropertyEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return IsStringProperty(sclrProp);
    }
    bool IsPropertyNullable(ModelViewPropertyOfVwSerializable prop) {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return true;
        }
        return (prop.IsNullable || (!prop.IsRequiredInView)); 
    }
    bool IsPropertyRequiredInViewEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if(sclrProp != null) {
            return sclrProp.IsRequiredInView;
        }
        return false;
    }
    bool IsPropertyString(ModelViewPropertyOfVwSerializable prop) {
        return "System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase);
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetDisplayAttributeValueString(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string propName) {
            if (prop == null)
            {
                return "";
            }
            if(prop.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                prop.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }

    string GetDisplayAttributeValueStringEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetDisplayAttributeValueStringEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxLenEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMaxLenEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxVal(sclrProp, model);
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    List<ModelViewPropertyOfVwSerializable> GetPropsByForeignKey(ModelViewSerializable model, ModelViewForeignKeySerializable foreignKey) {
        List<ModelViewPropertyOfVwSerializable> result= new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (foreignKey == null)) {
            return result;
        }
        if (foreignKey.PrincipalKeyProps == null || foreignKey.ForeignKeyProps == null || model.ScalarProperties == null) {
            return result;
        }
        if ((foreignKey.PrincipalKeyProps.Count != foreignKey.ForeignKeyProps.Count) || (foreignKey.ForeignKeyProps.Count < 1)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.PrincipalKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (foreignKey.NavigationName == p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    string GetModelPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetModelPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetViewByForeignNameChain(DbContextSerializable context, string ViewName, string foreignKeyNameChain) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (mv == null)
        {
            return "";
        }
        if (string.IsNullOrEmpty(foreignKeyNameChain))
        {
            return ViewName;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        if (foreignKeys.Length < 1)
        {
            return "";
        }
        ModelViewForeignKeySerializable fk = 
            mv.ForeignKeys.Where(f => f.NavigationName == foreignKeys[0]).FirstOrDefault();
        if (fk == null)
        {
            return "";
        }
        if (foreignKeys.Length == 1)
        {
            return GetViewByForeignNameChain(context, fk.ViewName, "");
        }
        return GetViewByForeignNameChain(context, fk.ViewName, string.Join(".", foreignKeys, 1, foreignKeys.Length - 1));
    }
    List<string> GetFKViewsList(ModelViewSerializable model, DbContextSerializable context, List<string> fkViewsDict)
    {
        if ((model == null) || (context == null) || (fkViewsDict == null)) {
            return fkViewsDict;
        }
        if (model.ScalarProperties == null || model.UIFormProperties == null) {
            return fkViewsDict;
        }
        string viewNameForSel = null;
        ModelViewSerializable mv = null;
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in model.UIFormProperties) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
        }
        return fkViewsDict;
    }
    List<string> GetSearchDialogViewsList(ModelViewSerializable model, DbContextSerializable context, List<string> sdViewsDict)
    {
        if ((model == null) || (context == null) || (sdViewsDict == null)) {
            return sdViewsDict;
        }
        if (model.ScalarProperties == null || model.UIFormProperties == null) {
            return sdViewsDict;
        }
        string viewNameForSel = null;
        ModelViewSerializable mv = null;
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! sdViewsDict.Contains(viewNameForSel) ) {
                            sdViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! sdViewsDict.Contains(viewNameForSel) ) {
                            sdViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! sdViewsDict.Contains(viewNameForSel) ) {
                            sdViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
        }
        return sdViewsDict;
    }
    ModelViewSerializable GetModelByName(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
    }
    string GetModelPropertyNameWithSufix(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return GetModelPropertyNameEx(prop, model) + sufix;
    }
    string GetExpressionForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return  GetModelPropertyNameWithSufix(prop, model, sufix) + "Vals";
    }
    List<string> CollectComboListInterfaces(DbContextSerializable context, ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.Combo)   {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add("Array<" + GetInterfaceName(mv) + ">");
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    string GetModelServiceInterfaceNameEx(DbContextSerializable context, string viewName) {
        return GetModelServiceInterfaceName(context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault());
    }
    bool HasCombo(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  (prop.InputTypeWhenAdd == InputTypeEnum.Combo) || 
                (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) || 
                (prop.InputTypeWhenDelete == InputTypeEnum.Combo);
    }
    bool HasButton(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) || 
            (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
            (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog);
    }
    bool HasTypeahead(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead) || 
            (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
            (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead);
    }
    string GetExpressionForOnValChangedMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  "OnValChanged" + GetModelPropertyNameEx(prop, model);
    }
    List<ModelViewUIFormPropertySerializable> GetDirectDetails(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            return result;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
        if (foreignKeys.Length < 2) {
            return result;
        }
        string fltFKNameChain  = string.Join(".", foreignKeys, 0, foreignKeys.Length - 1);
        List<ModelViewUIFormPropertySerializable> propLst = null;
        switch(inputType) {
            case 1:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenAdd == InputTypeEnum.SearchDialog))).ToList();
                break;
            case 2:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenUpdate == InputTypeEnum.SearchDialog))).ToList();
                break;
            case 3:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenDelete == InputTypeEnum.SearchDialog))).ToList();
                break;
            default:
                break;
        }
        if (propLst != null) {
            return propLst;
        }
        return result;
    }
    List<ModelViewUIFormPropertySerializable> GetDependentScalarProps(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ((prop == null) || (model == null) || (context == null)) {
            return result;
        }
        if (model.UIFormProperties == null)  {
            return result;
        }
        if(!HasInitMethodForInputMode(prop, model, inputType)) {
            return result;
        }
        string currentPropChain = string.IsNullOrEmpty(prop.ForeignKeyNameChain) ? "" : prop.ForeignKeyNameChain;
        List<ModelViewUIFormPropertySerializable> masters = GetDirectMasters(prop, model, context, inputType);
        foreach(ModelViewUIFormPropertySerializable dependentProp in model.UIFormProperties) {
            if(prop.ViewPropertyName == dependentProp.ViewPropertyName) {
                result.Add(dependentProp);
                continue;
            }
            if(HasInitMethodForInputMode(dependentProp, model, inputType)) {
                continue;
            }
            string dependentPropChain = string.IsNullOrEmpty(dependentProp.ForeignKeyNameChain) ? "" :  dependentProp.ForeignKeyNameChain;
            if(dependentPropChain == currentPropChain) {
                result.Add(dependentProp);
                continue;
            }
            string locCurrentPropChain = currentPropChain;
            if (!string.IsNullOrEmpty(locCurrentPropChain)) locCurrentPropChain += ".";
            if (!dependentPropChain.StartsWith(locCurrentPropChain)) {
                continue;
            }
            if (!masters.Where(p => dependentPropChain.StartsWith(p.ForeignKeyNameChain)).Any()) {
                result.Add(dependentProp);
            }
        }
        return result;
    }
    bool HasOnValChangedMethod(DbContextSerializable context, ModelViewSerializable model, ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable) {
        bool result = false;
        for (int inputType = 1 ; inputType < 4; inputType++) {
            result = 
                (GetDirectDetails(modelViewUIFormPropertySerializable, model, context, inputType).Count > 0) ||
                (GetDependentScalarProps(modelViewUIFormPropertySerializable, model, context, inputType).Count > 0);
            if (result) {
                return result;
            }
        }
        return result;
    }
    bool HasInitMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return HasCombo(prop, model) ||  HasButton(prop, model) || HasTypeahead(prop, model);
    }
    bool HasInitMethodForInputMode(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, int inputType) {
        switch(inputType) {
            case 1:
                return
                    (prop.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead);
                break;
            case 2:
                return
                    (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead);
                break;
            case 3:
                return
                    (prop.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead);
                break;
        }
        return false;
    }
    string GetExpressionForOnInitMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  "OnInit" + GetModelPropertyNameEx(prop, model);
    }
    string GetInputTypeToEnumName(int inputType) {
        switch(inputType) {
            case 1:
                return "AddMode";
            case 2:
                return "UpdateMode";
            default:
                return "DeleteMode";
        }
    }
    InputTypeEnum GetInputTypeWhenXXX(ModelViewUIFormPropertySerializable prop, int inputType) {
        switch(inputType) {
            case 1:
                return prop.InputTypeWhenAdd;
            case 2:
                return prop.InputTypeWhenUpdate;
            default:
                return prop.InputTypeWhenDelete;
        }
    }
    ModelViewSerializable GetViewForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        if ((prop == null) || (model == null) || (context == null)) {
            return null;
        }
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
    }

    string GetViewNameForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType) {
        ModelViewSerializable mv = GetViewForControlList(prop, model, context, inputType);
        if (mv == null)
        {
            return "NoName";
        }
        return mv.ViewName;
    }
    List<ModelViewUIFormPropertySerializable> GetDirectMasters(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string viewNameForSel = GetViewNameForControlList(prop, model, context, inputType);
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return result;
        }
        ModelViewSerializable modelViewSerializable = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (modelViewSerializable == null)
        {
            return result;
        }
        if (modelViewSerializable.ForeignKeys == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            foreignKeyNameChain = "";
        } else {
            foreignKeyNameChain += ".";
        }
        foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in modelViewSerializable.ForeignKeys) {
            if (!string.IsNullOrEmpty(modelViewForeignKeySerializable.ViewName)) {
                string fltFKNameChain = foreignKeyNameChain + modelViewForeignKeySerializable.NavigationName;
                List<ModelViewUIFormPropertySerializable> propLst = null;
                switch(inputType) {
                    case 1:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenAdd == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    case 2:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenUpdate == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    case 3:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenDelete == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    default:
                        break;
                }
                if (propLst != null) {
                    result.AddRange(propLst);
                }
            }
        }
        return result;
    }
    bool HasModelInitMethodForInputMode(ModelViewSerializable model, int inputType) {
        if (model == null) {
            return false;
        }
        if (model.UIFormProperties == null) {
            return false;
        }
        foreach(ModelViewUIFormPropertySerializable prop in model.UIFormProperties) {
            if(HasInitMethodForInputMode(prop, model, inputType)) {
                return true;
            }
        }
        return false;
    }
    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                    if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                        prop =
                                        model.ScalarProperties.Where(p => 
                                            (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                            &&
                                            (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                        ).FirstOrDefault();
                                    }
                                }
                                if(prop != null) break;
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        result.Add(prop);
                    }
                }
            }
        }
        return result;
    }
    List<ModelViewPropertyOfVwSerializable> GetPrimaryKeyProps(DbContextSerializable context, string viewName) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return result;
        }
        return GetModelPrimaryKeyProps( context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault() );
    }
    List<ModelViewPropertyOfVwSerializable> GetForeignKeyProps(DbContextSerializable context, ModelViewSerializable model, ModelViewUIFormPropertySerializable masterProp, ModelViewUIFormPropertySerializable detailProp, int inputType) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((context == null) || (masterProp == null) || (detailProp == null) || (model == null)) {
            return result;
        }
        string masterForeignKeyNameChain = masterProp.ForeignKeyNameChain;
        if(string.IsNullOrEmpty(masterForeignKeyNameChain)) {
            return result;
        }
        string detailForeignKeyNameChain = detailProp.ForeignKeyNameChain;
        if( ! string.IsNullOrEmpty(detailProp.ForeignKeyNameChain) ) {
            masterForeignKeyNameChain = masterForeignKeyNameChain.Replace(detailProp.ForeignKeyNameChain + ".", "");
        }
        string[] fKchain = masterForeignKeyNameChain.Split(new string[] {"."}, StringSplitOptions.None);
        if (fKchain.Length < 1) {
            return result;
        }
        ModelViewSerializable detailModel =
            GetViewForControlList(detailProp, model, context, inputType);
        if(detailModel == null) {
            return result;
        }
        if(detailModel.ForeignKeys == null) {
            return result;
        }
        ModelViewForeignKeySerializable foreignKey =
            detailModel.ForeignKeys.Where(f => f.NavigationName == fKchain[0]).FirstOrDefault();
        if(foreignKey == null){
            return result;
        }
        if(foreignKey.ForeignKeyProps == null) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable scProp = 
                detailModel.ScalarProperties.Where(p => p.ViewPropertyName == fkProp.ViewPropertyName).FirstOrDefault();
            if (scProp != null) {
                result.Add(scProp);
            }
        }
        return result;
    }
    List<ModelViewPropertyOfVwSerializable> GetForeignKeyPropsBase(DbContextSerializable context, ModelViewSerializable model, ModelViewUIFormPropertySerializable masterProp) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((context == null) || (masterProp == null) ||  (model == null)) {
            return result;
        }
        string masterForeignKeyNameChain = masterProp.ForeignKeyNameChain;
        if(string.IsNullOrEmpty(masterForeignKeyNameChain)) {
            return GetModelPrimaryKeyProps(model);
        } else {
                if(model.ForeignKeys == null) {
                    return result;
                }
                string[] fKchain = masterForeignKeyNameChain.Split(new string[] {"."}, StringSplitOptions.None);
                if (fKchain.Length != 1) {
                    return result;
                }
                ModelViewForeignKeySerializable foreignKey =
                    model.ForeignKeys.Where(f => f.NavigationName == fKchain[0]).FirstOrDefault();
                if(foreignKey == null) {
                    return result;
                }
                if ((foreignKey.ForeignKeyProps == null) || (foreignKey.PrincipalKeyProps == null)) {
                    return result;
                }
                if (foreignKey.ForeignKeyProps.Count !=  foreignKey.PrincipalKeyProps.Count) {
                    return result;
                }
                for(int i = 0; i < foreignKey.ForeignKeyProps.Count; i++) {
                    ModelViewKeyPropertySerializable fkProp = foreignKey.ForeignKeyProps[i];
                    ModelViewPropertyOfVwSerializable scProp = 
                        model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (string.IsNullOrEmpty( p.ForeignKeyName )) ).FirstOrDefault();
                    if (scProp != null) {
                        result.Add(scProp);
                    } else {
                        ModelViewKeyPropertySerializable pkProp = foreignKey.PrincipalKeyProps[i];
                        scProp = 
                            model.ScalarProperties.Where(p => (p.OriginalPropertyName == pkProp.OriginalPropertyName) && (p.ForeignKeyName == foreignKey.NavigationName) ).FirstOrDefault();
                        if (scProp != null) {
                            result.Add(scProp);
                        }
                    }
                }
        }
        return result;
    }
    string GetPrimKeyVarName(ModelViewPropertyOfVwSerializable pkpModelViewUIFormPropertySerializable) {
        return "pkp" + pkpModelViewUIFormPropertySerializable.ViewPropertyName;
    }
    bool MustHaveDirectDetails(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context) {
        bool result = false;
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            return result;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
        if (foreignKeys.Length < 2) {
            return result;
        }
        return true;
    }
    string GetExpressionForOnUpdateComboControlListMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string comboSufix) {
        return  "OnUpdate" + GetExpressionForControlList(prop, model, comboSufix);
    }
    string GetInterfaceNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfaceName(model);
    }
    string GetFilterInterfaceNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetFilterInterfaceName(model);
    }
    string GetFilterNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "";
        }
        return GetFilterName(model);
    }
    string GetPageInterfaceNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "";
        }
        return GetPageInterfaceName(model);
    }
    string GetControlListPropertyName(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return "NoName";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (mv == null)
        {
            return "NoName";
        }
        ModelViewPropertyOfVwSerializable propForSel =
            mv.ScalarProperties.Where(p => (string.IsNullOrEmpty(p.ForeignKeyNameChain) && p.OriginalPropertyName == prop.OriginalPropertyName)).FirstOrDefault();
        if (propForSel == null) {
            return "NoName";
        }
        return GetModelPropertyName(propForSel, mv);
    }

    string GetOrderBy(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType, string prefix) {
        string propName = GetControlListPropertyName(prop, model, context, inputType);
        if ( "Noname".Equals(propName,StringComparison.OrdinalIgnoreCase) || string.IsNullOrEmpty(propName) ) {
            return "";
        }
        return prefix + ".orderby= new List<string>() {\""+propName+"\"};";
    }
    string GetPrimKeyFilterForFindIndexMethod(DbContextSerializable context, string ViewName, string srcPrefix, string destPrefix) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "false";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (model == null)
        {
            return "false";
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null))
        {
            return "false";
        }
        string result = "";
        foreach(ModelViewKeyPropertySerializable keyProp in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable =
                model.ScalarProperties.Where(p => p.ViewPropertyName == keyProp.ViewPropertyName).FirstOrDefault();
            if (modelViewPropertyOfVwSerializable != null) {
                string proName = GetModelPropertyName(modelViewPropertyOfVwSerializable, model);
                if(result != "") {
                    result += " && ";
                }
                result += "("+ srcPrefix + "." + proName + " == " + destPrefix + "." + proName + ")";
            }
        }
        if (result == "") {
            return "false";
        }
        return result;
    }
    List<ModelViewPropertyOfVwSerializable> GetModelForeignKeyProps(ModelViewSerializable model, string detailFkChain, string masterFkChain) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || string.IsNullOrEmpty(masterFkChain))
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null) || (model.ForeignKeys == null)) {
            return result;
        }
        if(string.IsNullOrEmpty(detailFkChain)) {
            detailFkChain = "";
        } else {
            detailFkChain += ".";
        }
        string[] chain = masterFkChain.Replace(detailFkChain, "").Split(new string[] {"."}, StringSplitOptions.None);
        if(chain.Length < 1) {
            return result;
        }
        ModelViewForeignKeySerializable  foreignKeySerializable =
            model.ForeignKeys.Where(f => f.NavigationName == chain[0]).FirstOrDefault();
        if(foreignKeySerializable == null) {
            return result;
        }
        if ((foreignKeySerializable.ForeignKeyProps == null) || (foreignKeySerializable.PrincipalKeyProps == null)) {
            return result;
        }
        if(foreignKeySerializable.ForeignKeyProps.Count != foreignKeySerializable.PrincipalKeyProps.Count)
        {
            return result;
        }
        for(int i = 0; i < foreignKeySerializable.ForeignKeyProps.Count; i++) {
            ModelViewKeyPropertySerializable modelViewKeyPropertySerializable = foreignKeySerializable.ForeignKeyProps[i];
            ModelViewPropertyOfVwSerializable prop =
                    model.ScalarProperties.Where(p => ((p.OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                modelViewKeyPropertySerializable = foreignKeySerializable.PrincipalKeyProps[i];
                prop =
                    model.ScalarProperties.Where(p => ((p.OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName) && (p.ForeignKeyName == foreignKeySerializable.NavigationName))).FirstOrDefault();
                if (prop != null)
                {
                    result.Add(prop);
                }
            }
        }
        return result;
    }
    List<ModelViewPropertyOfVwSerializable> GetAllForeignKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if(model == null) {
            return result;
        }
        if ((model.ForeignKeys == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
            if (!string.IsNullOrEmpty(fk.ViewName)) {
                if (fk.ForeignKeyProps != null) {
                    foreach(ModelViewKeyPropertySerializable fkProp in fk.ForeignKeyProps) {
                        ModelViewPropertyOfVwSerializable sclrProp =
                            model.ScalarProperties.Where(p => p.ViewPropertyName == fkProp.ViewPropertyName).FirstOrDefault();
                        if(sclrProp != null) {
                            result.Add(sclrProp);
                        }
                    }
                }
            }
        }
        return result;
    }
    string GetExpressionForOnFilterTypeaheadControlListMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string typeaheadSufix) {
        return  "OnFilter" + GetExpressionForControlList(prop, model, typeaheadSufix);
    }
    ModelViewPropertyOfVwSerializable GetTypeAheadMasterProp(ModelViewSerializable model, ModelViewPropertyOfVwSerializable dependentScalarProp, ModelViewSerializable master) {
        if ( (dependentScalarProp == null) || (model == null) || (master == null) ) {
            return null;
        }
        //string masterForeignKeyNameChain = "";
        //if(!string.IsNullOrEmpty( dependentScalarProp.ForeignKeyName )) {
            //if (dependentScalarProp.ForeignKeyName != dependentScalarProp.ForeignKeyNameChain) {
                //masterForeignKeyNameChain = dependentScalarProp.ForeignKeyNameChain.Replace(dependentScalarProp.ForeignKeyName + ".", "");
            //}
        //}
        //if (string.IsNullOrEmpty(masterForeignKeyNameChain)) {
            return
                master.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
        //}
        //return
            //master.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && (p.ForeignKeyNameChain == masterForeignKeyNameChain)).FirstOrDefault();
    }
    ModelViewPropertyOfVwSerializable GetTypeAheadMasterPropEx(ModelViewSerializable model, ModelViewUIFormPropertySerializable dependentScalarProp, ModelViewSerializable master) {
        if ( (dependentScalarProp == null) || (model == null) || (master == null) ) {
            return null;
        }
        ModelViewPropertyOfVwSerializable prop =
            model.ScalarProperties.Where(p => p.ViewPropertyName == dependentScalarProp.ViewPropertyName).FirstOrDefault();
        return GetTypeAheadMasterProp(model, prop, master);
    }
    List<string> GetHiddenFilterDisablingFields(ModelViewSerializable model, DbContextSerializable context, string foreignKeyNameChain, List<string> result)
    {
            if (result == null)
            {
                result = new List<string>();
            }
            if( string.IsNullOrEmpty(foreignKeyNameChain) || (model == null) || (context == null))
            {
                return result;
            }
            string masterNm = GetViewByForeignNameChain(context, model.ViewName, foreignKeyNameChain);
            if (string.IsNullOrEmpty(masterNm))
            {
                return result;
            }
            ModelViewSerializable master = context.ModelViews.Where(m => m.ViewName == masterNm).FirstOrDefault();
            if (master == null)
            {
                return result;
            }
            if ((master.PrimaryKeyProperties != null) && (master.ScalarProperties != null))
            {
                foreach(ModelViewKeyPropertySerializable pkProp in master.PrimaryKeyProperties)
                {
                    ModelViewPropertyOfVwSerializable masterProp = master.ScalarProperties.Where(s => s.ViewPropertyName == pkProp.ViewPropertyName).FirstOrDefault();
                    List<ModelViewPropertyOfVwSerializable> props =
                        GetForeignKeyPropByIndirectPrimaryKeyProp(model, foreignKeyNameChain, master, context, masterProp);
                    if(props != null)
                    {
                        foreach(ModelViewPropertyOfVwSerializable prop in props)
                        {
                            string propName =  GetModelPropertyName(prop, model);
                            if(!result.Contains(propName))
                            {
                                result.Add(propName);
                            }
                        }
                    }
                }
            }
            string[] fKchain = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
            if (fKchain.Length < 2)
            {
                return result;
            }
            string newChain = string.Join(".", fKchain, 0, fKchain.Length - 1);
            return GetHiddenFilterDisablingFields(model, context, newChain, result);
    }
    ModelViewPropertyOfVwSerializable GetOnValChangeViewPropName(DbContextSerializable context, ModelViewSerializable model,
                                ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable, ModelViewUIFormPropertySerializable dependentScalarProp, int inputType) {
        if((dependentScalarProp == null) || (modelViewUIFormPropertySerializable == null)) {
            return null;
        }
        ModelViewSerializable view = GetViewForControlList(modelViewUIFormPropertySerializable, model, context, inputType);
        if(view == null) {
            return null;
        }
        string foreignKeyNameChain = 
            string.IsNullOrEmpty(modelViewUIFormPropertySerializable.ForeignKeyNameChain) ? "" : modelViewUIFormPropertySerializable.ForeignKeyNameChain;
        
        
        string dependentForeignKeyNameChain = 
            (string.IsNullOrEmpty(dependentScalarProp.ForeignKeyNameChain) ? "" : dependentScalarProp.ForeignKeyNameChain);
        if (foreignKeyNameChain == dependentForeignKeyNameChain) {
            dependentForeignKeyNameChain = "";
        } else {
            if (foreignKeyNameChain != "") {
                foreignKeyNameChain += ".";
                dependentForeignKeyNameChain = dependentForeignKeyNameChain.Replace(foreignKeyNameChain, "");
            }
        }
        if (string.IsNullOrEmpty(dependentForeignKeyNameChain)) {
            return
                view.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
        }
        return
            view.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && (p.ForeignKeyNameChain == dependentForeignKeyNameChain)).FirstOrDefault();
    }
    List<ModelViewPropertyOfVwSerializable> GetForeignKeyPropByIndirectPrimaryKeyProp(ModelViewSerializable model, string foreignKeyNameChain, ModelViewSerializable master, DbContextSerializable context, ModelViewPropertyOfVwSerializable masterProp)
        {
            if ((model == null) || (master == null) || (context == null) || (masterProp == null))
            {
                return null;
            }
            if ((master.ScalarProperties == null) || (master.PrimaryKeyProperties == null) || (model.ScalarProperties == null) || (model.PrimaryKeyProperties == null) || (model.ForeignKeys == null))
            {
                return null;
            }
            if (string.IsNullOrEmpty(foreignKeyNameChain))
            {
                return null;
            }
            string[] fKchain = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
            if (fKchain.Length < 1)
            {
                return null;
            }

            List<ModelViewSerializable> modelChain = new List<ModelViewSerializable>();
            ModelViewSerializable currModel = model;
            ModelViewForeignKeySerializable fk = null;
            modelChain.Add(currModel);
            for (int i = 0; i < fKchain.Length; i++)
            {
                if ((currModel.ForeignKeys == null) || (currModel.ScalarProperties == null))
                {
                    return null;
                }
                fk = currModel.ForeignKeys.Where(f => f.NavigationName == fKchain[i]).FirstOrDefault();
                if (fk == null)
                {
                    return null;
                }
                if (string.IsNullOrEmpty(fk.ViewName))
                {
                    return null;
                }
                currModel = context.ModelViews.Where(m => m.ViewName == fk.ViewName).FirstOrDefault();
                if (currModel == null)
                {
                    return null;
                }
                modelChain.Add(currModel);
            }
            if (currModel != master)
            {
                if ((currModel.RootEntityFullClassName != master.RootEntityFullClassName) || (currModel.RootEntityUniqueProjectName != master.RootEntityUniqueProjectName))
                {
                    return null;
                }
                masterProp = currModel.ScalarProperties.Where(p => (p.OriginalPropertyName == masterProp.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyName))).FirstOrDefault();
            }

            List<ModelViewPropertyOfVwSerializable> currProps = new List<ModelViewPropertyOfVwSerializable>();
            List<ModelViewPropertyOfVwSerializable> destProps = new List<ModelViewPropertyOfVwSerializable>();
            currProps.Add(masterProp);
            for (int i = fKchain.Length - 1; i >= 0; i--)
            {
                destProps.Clear();
                fk = modelChain[i].ForeignKeys.Where(f => f.NavigationName == fKchain[i]).FirstOrDefault();
                if (fk == null)
                {
                    return null;
                }
                foreach (ModelViewPropertyOfVwSerializable currProp in currProps)
                {
                    ModelViewPropertyOfVwSerializable destProp = null;
                    if ((fk.PrincipalKeyProps != null) && (fk.ForeignKeyProps != null))
                    {
                        ModelViewKeyPropertySerializable primKey = fk.PrincipalKeyProps.Where(p => p.ViewPropertyName == currProp.ViewPropertyName).FirstOrDefault();
                        if (primKey != null)
                        {
                            int ind = fk.PrincipalKeyProps.IndexOf(primKey);
                            if ((ind > -1) && (ind < fk.ForeignKeyProps.Count))
                            {
                                destProp =
                                    modelChain[i].ScalarProperties.Where(p => p.ViewPropertyName == fk.ForeignKeyProps[ind].ViewPropertyName).FirstOrDefault();
                                if (destProp != null)
                                {
                                    if (!destProps.Contains(destProp))
                                    {
                                        destProps.Add(destProp);
                                    }
                                }
                            }
                        }
                    }
                    destProp =
                        modelChain[i].ScalarProperties.Where(p => (p.OriginalPropertyName == currProp.OriginalPropertyName) && (p.ForeignKeyName == fKchain[i])).FirstOrDefault();
                    if (destProp != null)
                    {
                        if (!destProps.Contains(destProp))
                        {
                            destProps.Add(destProp);
                        }
                    }
                }
                if (destProps.Count < 1)
                {
                    return null;
                }
                else
                {
                    List<ModelViewPropertyOfVwSerializable> tmp = destProps;
                    destProps = currProps;
                    currProps = tmp;
                }
            }
            return currProps;
        }
    List<ModelViewPropertyOfVwSerializable> GetForeignKeyPropByIndirectPrimaryKeyPropEx(ModelViewSerializable model, ModelViewUIFormPropertySerializable uiProp, ModelViewSerializable master, DbContextSerializable context, ModelViewPropertyOfVwSerializable masterProp)
        {
            if ((uiProp == null) || (model == null) || (master == null) || (context == null) || (masterProp == null))
            {
                return null;
            }
            if (model.ScalarProperties == null)
            {
                return null;
            }
            ModelViewPropertyOfVwSerializable sUiProp = model.ScalarProperties.Where(p => p.ViewPropertyName == uiProp.ViewPropertyName).FirstOrDefault();
            return GetForeignKeyPropByIndirectPrimaryKeyProp(model, sUiProp.ForeignKeyNameChain, master, context, masterProp);
        }
    bool HasFluentAtribute(ModelViewPropertyOfVwSerializable sclrProp, string[] attrName) {
        if ((sclrProp != null) && (attrName != null)  ) {
            if ((sclrProp.FAPIAttributes != null) && (attrName.Length > 0)) {
                return sclrProp.FAPIAttributes.Any(a => attrName.Contains(a.AttrName));
            }
        }
        return false;
    }
    bool HasFluentAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.FAPIAttributes != null) {
                foreach(ModelViewFAPIAttributeSerializable a in sclrProp.FAPIAttributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewFAPIAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in sclrProp.Attributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasAtribute(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName))) {
            if (sclrProp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in sclrProp.Attributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    bool IsIdentityProperty(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (HasAtribute(prop, "ConcurrencyCheck") || HasAtribute(prop, "Timestamp")) {
            return true;
        }
        if (HasAtributeWithValue(prop, "DatabaseGenerated", "identity") || HasAtributeWithValue(prop, "DatabaseGenerated", "computed")) {
            return true;
        }
        if(HasFluentAtribute(prop, new string[] {"UseSqlServerIdentityColumn", "ForSqlServerUseSequenceHiLo", "ValueGeneratedOnAdd", "ValueGeneratedOnAddOrUpdate", "IsConcurrencyToken", "IsRowVersion"} )) {
            return true;
        }
        return HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "identity") || HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "computed");
    }
    bool IsIdentityPropertyEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) {
            return false;
        }
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if(sclrProp == null) {
            return false;
        }
        return IsIdentityProperty(sclrProp, model);
    }

#>