<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using System.Windows;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;
using System.Collections;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using Prism.Services.Dialogs;
using System.Windows.Controls;

<#


    string IWebServiceFilterDefInterfaceFolder      = "00200-IWebServiceFilterDefInterface.cs";
    string IWebServiceFilterDefInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterDefInterfaceFolder);
    string IWebServiceFilterDefInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterDefInterfaceFolder);


    string IWebServiceFilterMenuInterfaceFolder      = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterMenuInterfaceFolder);

    string WebServiceFilterRsltViewModelFolder      = "00215-WebServiceFilterRsltViewModel.cs";
    string WebServiceFilterRsltViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterRsltViewModelFolder);
    string WebServiceFilterRsltViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterRsltViewModelFolder);

    string WebServiceFilterDefViewModelFolder      = "00211-WebServiceFilterDefViewModel.cs";
    string WebServiceFilterDefViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterDefViewModelFolder);
    string WebServiceFilterDefViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterDefViewModelFolder);

    string WebServiceFilterMenuViewModelFolder      = "00217-WebServiceFilterMenuViewModel.cs";
    string WebServiceFilterMenuViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterMenuViewModelFolder);
    string WebServiceFilterMenuViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterMenuViewModelFolder);

    string RoutedCommandExtFolder      = "00224-RoutedCommandExt.cs";
    string RoutedCommandExtClassName   = GetContextModelClassName(Context, RoutedCommandExtFolder);
    string RoutedCommandExtNameSpace   = GetContextModelNameSpace(Context, RoutedCommandExtFolder);

    string modelPageInterfaceFolder         = "01200-Page.interface.cs";
    string modelPageInterfaceClassName      = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace      = GetModelNameSpace(Model, modelPageInterfaceFolder);

    string modelFilterInterfaceFolder       = "01300-Filter.interface.cs";
    string modelFilterInterfaceClassName    = GetFilterInterfaceName(Model);
    string modelFilterInterfaceNameSpace    = GetModelNameSpace(Model, modelFilterInterfaceFolder);

    string modelFilterFolder                = "01302-Filter.model.cs";
    string modelFilterClassName             = GetFilterName(Model);
    string modelFilterNameSpace             = GetModelNameSpace(Model, modelFilterFolder);

    string modelServiceInterfaceFolder       = "01400-Service.interface.cs";
    string modelServiceInterfaceClassName    = GetModelServiceInterfaceName(Model);
    string modelServiceInterfaceNameSpace    = GetModelNameSpace(Model, modelServiceInterfaceFolder);


    string commandHelperModelFolder      = "00140-CommandHelper.cs";
    string commandHelperModelClassName   = GetContextModelClassName(Context, commandHelperModelFolder);
    string commandHelperModelNameSpace   = GetContextModelNameSpace(Context, commandHelperModelFolder);


    string modelInterfaceFolder         = "01100-Interface.cs";
    string modelInterfaceClassName      = GetInterfaceName(Model);
    string modelInterfaceNameSpace      = GetModelNameSpace(Model, modelInterfaceFolder);

    string IAppGlblSettingsServiceFolder      = "00080-IAppGlblSettingsService";
    string IAppGlblSettingsServiceClassName   = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace   = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);

    string IWebServiceFilterRsltInterfaceFolder      = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string RoutedEventExtFolder                     = "00222-RoutedEventExt.cs";
    string RoutedEventExtClassName                  = GetContextModelClassName(Context, RoutedEventExtFolder);
    string RoutedEventExtNameSpace                  = GetContextModelNameSpace(Context, RoutedEventExtFolder);


    string LformUserControlFolder           = "01596-LformUserControl.xaml.cs";
    string LformUserControlClassName        = GetModelClassName(Model, LformUserControlFolder);
    string LformUserControlNameSpace        = GetModelNameSpace(Model, LformUserControlFolder);

    string LdlgUserControlFolder           = "01616-LdlgUserControl.xaml.cs";
    string LdlgUserControlClassName        = GetModelClassName(Model, LdlgUserControlFolder);
    string LdlgUserControlNameSpace        = GetModelNameSpace(Model, LdlgUserControlFolder);

    string LdlgViewModelFolder             = "01620-LdlgViewModel.cs";
    string LdlgViewModelClassName          = GetModelClassName(Model, LdlgViewModelFolder);
    string LdlgViewModelNameSpace          = GetModelNameSpace(Model, LdlgViewModelFolder);


    string CaptionPropertyName                  = "Caption";
    string FilterHeightPropertyName             = "FilterHeight";
    string GridHeightPropertyName               = "GridHeight";
    string HiddenFiltersPropertyName            = "HiddenFilters";
    string CanAddPropertyName                   = "CanAdd";
    string CanUpdPropertyName                   = "CanUpdate";
    string CanDelPropertyName                   = "CanDelete";



    string AppSettingServicePropertyName    = "GlblSettingsSrv";
    string SformSelectionChangedPropertyName = "SformSelectionChanged";
    string RoutedEventHandlersPropertyName = "RoutedEventHandlers";
    string SformSelectionChangedCommandPropertyName = "SformSelectionChangedCommand";
    string RoutedCommandHandlersPropertyName = "RoutedCommandHandlers";


    string OkCommandPropertyName = "OkCommand";
    string CancelCommandPropertyName = "CancelCommand";
    string SelectedItemPropertyName = "SelectedItem";



    List<string> nmSpaces = new List<string>();
    if ((LdlgViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((LdlgViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((LdlgViewModelNameSpace != RoutedEventExtNameSpace) && (nmSpaces.IndexOf(RoutedEventExtNameSpace) < 0)) 
        nmSpaces.Add(RoutedEventExtNameSpace);
//    if ((LdlgViewModelNameSpace != LformUserControlNameSpace) && (nmSpaces.IndexOf(LformUserControlNameSpace) < 0)) 
//        nmSpaces.Add(LformUserControlNameSpace);
    if ((LdlgViewModelNameSpace != modelInterfaceNameSpace) && (nmSpaces.IndexOf(modelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelInterfaceNameSpace);
    if ((LdlgViewModelNameSpace != commandHelperModelNameSpace) && (nmSpaces.IndexOf(commandHelperModelNameSpace) < 0)) 
        nmSpaces.Add(commandHelperModelNameSpace);


    
    
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

/*
    In the file of IModule-class the following line of code must be inserted:

        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            containerRegistry.RegisterDialog<<#= LdlgUserControlClassName #>, <#= LdlgViewModelClassName #>>("<#= LdlgViewModelClassName #>");
            ...
        }
*/

namespace <#= LdlgViewModelNameSpace #> {
    public class <#= LdlgViewModelClassName #>: INotifyPropertyChanged, IDialogAware
    {
        protected <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>=null;
        protected IDialogService _dialogService=null;
        public <#= LdlgViewModelClassName #>(<#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName  #>, IDialogService dialogService) {

            this.<#= AppSettingServicePropertyName #> = <#= AppSettingServicePropertyName #>;
            this._dialogService = dialogService;

//            ObservableCollection<ValueTuple<RoutedEvent, Delegate, bool>> rehs = new ObservableCollection<ValueTuple<RoutedEvent, Delegate, bool>>();
//            rehs.Add((<#= RoutedEventExtClassName #>.<#= SformSelectionChangedPropertyName #>Event, 
//                new SelectionChangedEventHandler(this.On<#= SformSelectionChangedPropertyName #>), false));
//            _<#= RoutedEventHandlersPropertyName #> = rehs;
            
            CommandBindingCollection cbsc = new CommandBindingCollection();
            CommandBinding cb = new CommandBinding(<#= RoutedCommandExtClassName #>.<#= SformSelectionChangedCommandPropertyName #>, new ExecutedRoutedEventHandler(this.Executed<#= SformSelectionChangedCommandPropertyName #>), new CanExecuteRoutedEventHandler(CanExecute<#= SformSelectionChangedCommandPropertyName #>));
            cbsc.Add(cb);
            _<#= RoutedCommandHandlersPropertyName #> = cbsc;


            if(this.<#= AppSettingServicePropertyName #> != null) {
                _<#= FilterHeightPropertyName #> = 3 * this.<#= AppSettingServicePropertyName #>.FilterHeightFactor + this.<#= AppSettingServicePropertyName #>.FilterHeightAddition;
                _<#= GridHeightPropertyName #> = 10 * this.<#= AppSettingServicePropertyName #>.TableHeightFactor + this.<#= AppSettingServicePropertyName #>.TableHeightAddition;
            }
       }
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

        #region <#= SelectedItemPropertyName #>
        protected <#= modelInterfaceClassName #> _<#= SelectedItemPropertyName #> = null;

//        protected void On<#= SformSelectionChangedPropertyName #>(object sender, SelectionChangedEventArgs e) {
//            if (e.OriginalSource is <#= LformUserControlClassName #>) 
//            {
//                _<#= SelectedItemPropertyName #> = null;
//                if(e.AddedItems != null) {
//                    if (e.AddedItems.Count > 0) {
//                        _<#= SelectedItemPropertyName #> = e.AddedItems[0] as <#= modelInterfaceClassName #>;
//                    }
//                }
//            }
//        }
        public void Executed<#= SformSelectionChangedCommandPropertyName #>(object sender, ExecutedRoutedEventArgs e) { 
            e.Handled = true;
            Tuple<string, System.Collections.IList, System.Collections.IList> prm = e.Parameter as  Tuple<string, System.Collections.IList, System.Collections.IList>;
            if(prm != null) {
                if("<#= modelInterfaceClassName #>" == prm.Item1) {
                    _<#= SelectedItemPropertyName #> = null;
                    if (prm.Item3 != null) {
                        if(prm.Item3.Count > 0) {
                            _<#= SelectedItemPropertyName #> = prm.Item3[0] as <#= modelInterfaceClassName #>;
                        }
                    }
                }
            }
        }
        public void CanExecute<#= SformSelectionChangedCommandPropertyName #>(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
            e.CanExecute = true;
        }
        #endregion

        #region IDialogAware
        public event Action<IDialogResult> RequestClose;
        string _Title = "";
        public string Title {
            get { return _Title; }
            set {
                if(_Title != value) {
                    _Title = value;
                    OnPropertyChanged();
                }
            }
        }

        public bool CanCloseDialog()
        {
            return true;
        }
        public void OnDialogClosed()
        {
            
        }
        public void OnDialogOpened(IDialogParameters parameters)
        {
            if (parameters == null) return;
            if (parameters.ContainsKey("<#= CaptionPropertyName #>"))
            {
                <#= CaptionPropertyName #> = parameters.GetValue<string>("<#= CaptionPropertyName #>");
                Title = <#= CaptionPropertyName #>;
            }
            if (parameters.ContainsKey("<#= FilterHeightPropertyName #>"))
            {
                <#= FilterHeightPropertyName #> = parameters.GetValue<Nullable<double>>("<#= FilterHeightPropertyName #>");
            }
            if (parameters.ContainsKey("<#= GridHeightPropertyName #>"))
            {
                <#= GridHeightPropertyName #> = parameters.GetValue<Nullable<double>>("<#= GridHeightPropertyName #>");
            }
            if (parameters.ContainsKey("<#= CanAddPropertyName #>"))
            {
                <#= CanAddPropertyName #> = parameters.GetValue<bool>("<#= CanAddPropertyName #>");
            }
            if (parameters.ContainsKey("<#= CanUpdPropertyName #>"))
            {
                <#= CanUpdPropertyName #> = parameters.GetValue<bool>("<#= CanUpdPropertyName #>");
            }
            if (parameters.ContainsKey("<#= CanDelPropertyName #>"))
            {
                <#= CanDelPropertyName #> = parameters.GetValue<bool>("<#= CanDelPropertyName #>");
            }
            if (parameters.ContainsKey("<#= HiddenFiltersPropertyName #>"))  
            {
                <#= HiddenFiltersPropertyName #> = parameters.GetValue<IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>>("<#= HiddenFiltersPropertyName #>");
            }
        }
        #endregion

        #region <#= RoutedCommandHandlersPropertyName #>
        protected CommandBindingCollection _<#= RoutedCommandHandlersPropertyName #> = null;
        public CommandBindingCollection <#= RoutedCommandHandlersPropertyName #>
        { 
            get
            {
                return _<#= RoutedCommandHandlersPropertyName #>;
            }
            set
            {
                if (_<#= RoutedCommandHandlersPropertyName #> != value)
                {
                    _<#= RoutedCommandHandlersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= RoutedEventHandlersPropertyName #>
//        protected IEnumerable<ValueTuple<RoutedEvent, Delegate, bool>> _<#= RoutedEventHandlersPropertyName #> = null;
//        public IEnumerable<ValueTuple<RoutedEvent, Delegate, bool>> <#= RoutedEventHandlersPropertyName #>
//        { 
//            get
//            {
//                return _<#= RoutedEventHandlersPropertyName #>;
//            }
//            set
//            {
//                if (_<#= RoutedEventHandlersPropertyName #> != value)
//                {
//                    _<#= RoutedEventHandlersPropertyName #> = value;
//                    OnPropertyChanged();
//                }
//            }
//        }
        #endregion


        #region <#= GridHeightPropertyName #>
        Nullable<double> _<#= GridHeightPropertyName #> = null;
        public Nullable<double> <#= GridHeightPropertyName #>
        {
            get
            {
                return _<#= GridHeightPropertyName #>;
            }
            set
            {
                if (_<#= GridHeightPropertyName #> != value)
                {
                    _<#= GridHeightPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= FilterHeightPropertyName #>
        Nullable<double> _<#= FilterHeightPropertyName #> = null;
        public Nullable<double> <#= FilterHeightPropertyName #>
        {
            get
            {
                return _<#= FilterHeightPropertyName #>;
            }
            set
            {
                if (_<#= FilterHeightPropertyName #> != value)
                {
                    _<#= FilterHeightPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= CaptionPropertyName #>
        string _<#= CaptionPropertyName #> = null;
        public string <#= CaptionPropertyName #>
        {
            get
            {
                return _<#= CaptionPropertyName #>;
            }
            set
            {
                if (_<#= CaptionPropertyName #> != value)
                {
                    _<#= CaptionPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= HiddenFiltersPropertyName #>
        IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> _<#= HiddenFiltersPropertyName #> = null;
        public IEnumerable<IWebServiceFilterRsltInterface> <#= HiddenFiltersPropertyName #>
        {
            get
            {
                return _<#= HiddenFiltersPropertyName #>;
            }
            set
            {
                if (_<#= HiddenFiltersPropertyName #> != value)
                {
                    _<#= HiddenFiltersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= CanAddPropertyName #>
        bool _<#= CanAddPropertyName #> = true;
        public bool <#= CanAddPropertyName #>
        {
            get
            {
                return _<#= CanAddPropertyName #>;
            }
            set
            {
                if (_<#= CanAddPropertyName #> != value)
                {
                    _<#= CanAddPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= CanUpdPropertyName #>
        bool _<#= CanUpdPropertyName #> = true;
        public bool <#= CanUpdPropertyName #>
        {
            get
            {
                return _<#= CanUpdPropertyName #>;
            }
            set
            {
                if (_<#= CanUpdPropertyName #> != value)
                {
                    _<#= CanUpdPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= CanDelPropertyName #>
        bool _<#= CanDelPropertyName #> = true;
        public bool <#= CanDelPropertyName #>
        {
            get
            {
                return _<#= CanDelPropertyName #>;
            }
            set
            {
                if (_<#= CanDelPropertyName #> != value)
                {
                    _<#= CanDelPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= OkCommandPropertyName #>
        private ICommand _<#= OkCommandPropertyName #>;
        public ICommand <#= OkCommandPropertyName #>
        {
            get
            {
                return _<#= OkCommandPropertyName #> ?? (_<#= OkCommandPropertyName #> = new CommandHelper((param) => <#= OkCommandPropertyName #>Action(param), (param) => <#= OkCommandPropertyName #>CanExecute(param)));
            }
        }
        protected void <#= OkCommandPropertyName #>Action(object param)
        {
            if(_<#= SelectedItemPropertyName #> != null) {
                DialogParameters parameters = new DialogParameters();
                parameters.Add("<#= SelectedItemPropertyName #>", _<#= SelectedItemPropertyName #>);
                DialogResult result = new DialogResult(ButtonResult.OK, parameters);
                RequestClose?.Invoke(result);
            }
        }
        protected bool <#= OkCommandPropertyName #>CanExecute(object param)
        {
            return _<#= SelectedItemPropertyName #> != null;
        }
        #endregion
        #region <#= CancelCommandPropertyName #>
        private ICommand _<#= CancelCommandPropertyName #>;
        public ICommand <#= CancelCommandPropertyName #>
        {
            get
            {
                return _<#= CancelCommandPropertyName #> ?? (_<#= CancelCommandPropertyName #> = new CommandHelper((param) => <#= CancelCommandPropertyName #>Action(param), (param) => <#= CancelCommandPropertyName #>CanExecute(param)));
            }
        }
        protected void <#= CancelCommandPropertyName #>Action(object param)
        {
            if (RequestClose != null)
            {
                DialogResult result = new DialogResult(ButtonResult.Cancel);
                RequestClose?.Invoke(result);
            }

        }
        protected bool <#= CancelCommandPropertyName #>CanExecute(object param)
        {
            return true;
        }
        #endregion


    }
}

<#+
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetFilterInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    string GetPageInterfaceName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }

    string GetModelServiceInterfaceName(ModelViewSerializable model) {
        return "I" + model.ViewName + "Service";
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetFilterName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName) + "Filter";
    }

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetDisplayAttributeValueString(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string propName) {
            if (prop == null)
            {
                return "";
            }
            if(prop.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                prop.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }

    string GetDisplayAttributeValueStringEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetDisplayAttributeValueStringEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxLenEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMaxLenEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxVal(sclrProp, model);
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    List<ModelViewPropertyOfVwSerializable> GetPropsByForeignKey(ModelViewSerializable model, ModelViewForeignKeySerializable foreignKey) {
        List<ModelViewPropertyOfVwSerializable> result= new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (foreignKey == null)) {
            return result;
        }
        if (foreignKey.PrincipalKeyProps == null || foreignKey.ForeignKeyProps == null || model.ScalarProperties == null) {
            return result;
        }
        if ((foreignKey.PrincipalKeyProps.Count != foreignKey.ForeignKeyProps.Count) || (foreignKey.ForeignKeyProps.Count < 1)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.PrincipalKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (foreignKey.NavigationName == p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    string GetModelPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetModelPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }

#>