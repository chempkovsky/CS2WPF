<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using System.Windows;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using Prism.Services.Dialogs;
using Prism.Regions;

<#

    string EformModeEnumFolder                      = "00026-EformModeEnum.cs";
    string EformModeEnumClassName                   = GetContextModelClassName(Context, EformModeEnumFolder);
    string EformModeEnumNameSpace                   = GetContextModelNameSpace(Context, EformModeEnumFolder);

    string IAppGlblSettingsServiceFolder            = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName         = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace         = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);

    string IWebServiceFilterRsltInterfaceFolder     = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string IWebServiceFilterMenuInterfaceFolder     = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterMenuInterfaceFolder);

    string WebServiceFilterRsltViewModelFolder      = "00215-WebServiceFilterRsltViewModel.cs";
    string WebServiceFilterRsltViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterRsltViewModelFolder);
    string WebServiceFilterRsltViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterRsltViewModelFolder);

    string WebServiceFilterMenuViewModelFolder      = "00217-WebServiceFilterMenuViewModel.cs";
    string WebServiceFilterMenuViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterMenuViewModelFolder);
    string WebServiceFilterMenuViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterMenuViewModelFolder);

    string RoutedEventExtFolder                     = "00222-RoutedEventExt.cs";
    string RoutedEventExtClassName                  = GetContextModelClassName(Context, RoutedEventExtFolder);
    string RoutedEventExtNameSpace                  = GetContextModelNameSpace(Context, RoutedEventExtFolder);

    string RoutedCommandExtFolder                   = "00224-RoutedCommandExt.cs";
    string RoutedCommandExtClassName                = GetContextModelClassName(Context, RoutedCommandExtFolder);
    string RoutedCommandExtNameSpace                = GetContextModelNameSpace(Context, RoutedCommandExtFolder);

    string modelInterfaceFolder             = "01100-Interface.cs";
    string modelInterfaceClassName          = GetInterfaceName(Model);
    string modelInterfaceNameSpace          = GetModelNameSpace(Model, modelInterfaceFolder);

    string EdlgViewModelFolder              = "01520-EdlgViewModel.cs";
    string EdlgViewModelClassName           = GetModelClassName(Model, EdlgViewModelFolder);
    string EdlgViewModelNameSpace           = GetModelNameSpace(Model, EdlgViewModelFolder);

    string LformUserControlFolder           = "01596-LformUserControl.xaml.cs";
    string LformUserControlClassName        = GetModelClassName(Model, LformUserControlFolder);
    string LformUserControlNameSpace        = GetModelNameSpace(Model, LformUserControlFolder);

    string LformViewModelFolder             = "01600-LformViewModel.cs";
    string LformViewModelClassName          = GetModelClassName(Model, LformViewModelFolder);
    string LformViewModelNameSpace          = GetModelNameSpace(Model, LformViewModelFolder);

    string HiddenFiltersPropertyName            = "HiddenFilters";
    string OnHiddenFiltersChangedPropertyName   = "OnHiddenFiltersChanged";
    string HiddenFiltersPropertyChangedPropertyName = "HiddenFiltersPropertyChanged";

    string TableMenuItemsPropertyName = "TableMenuItems";
    string OnTableMenuItemsChangedPropertyName   = "OnTableMenuItemsChanged";
    string TableMenuItemsPropertyChangedPropertyName = "TableMenuItemsPropertyChanged";

    string RowMenuItemsPropertyName = "RowMenuItems";
    string OnRowMenuItemsChangedPropertyName   = "OnRowMenuItemsChanged";
    string RowMenuItemsPropertyChangedPropertyName = "RowMenuItemsPropertyChanged";

    string IsOnLoadedCalledPropertyName         = "IsOnLoadedCalled";

    string RoutedEventHandlersPropertyName = "RoutedEventHandlers";
    string RoutedCommandHandlersPropertyName = "RoutedCommandHandlers";
    string RegionPropertyName = "Region";

    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";

    string FormRootServicePropertyName          = "FrmRootSrv";
    string AppSettingServicePropertyName        = "GlblSettingsSrv";
    string GetWithFilterMethodName              = "getwithfilter";
    string ColumnSelectorDlgPropertyName        = "ColumnSelectorDlg";

    string CanAddPropertyName                   = "CanAdd";
    string CanAddPropertyChangedPropertyName    = "CanAddPropertyChanged";
    string OnCanAddPropertyChangedPropertyName  = "OnCanAddPropertyChanged";

    string CanUpdPropertyName                   = "CanUpdate";
    string CanUpdPropertyChangedPropertyName    = "CanUpdatePropertyChanged";
    string OnCanUpdPropertyChangedPropertyName  = "OnCanUpdatePropertyChanged";

    string CanDelPropertyName                   = "CanDelete";
    string CanDelPropertyChangedPropertyName    = "CanDeletePropertyChanged";
    string OnCanDelPropertyChangedPropertyName  = "OnCanDeletePropertyChanged";

    string SformAddItemCommandPropertyName      = "SformAddItemCommand";
    string SformUpdItemCommandPropertyName      = "SformUpdItemCommand";
    string SformDelItemCommandPropertyName      = "SformDelItemCommand";
    string SformAfterAddItemCommandPropertyName = "SformAfterAddItemCommand";
    string SformAfterUpdItemCommandPropertyName = "SformAfterUpdItemCommand";
    string SformAfterDelItemCommandPropertyName = "SformAfterDelItemCommand";

    string FormControlModelPropertyName         = "FormControlModel";
    string CaptionPropertyName                  = "Caption";
    string EformModePropertyName                = "EformMode";
    string ShowSubmitPropertyName               = "ShowSubmit";
    string ForO2mSuffixPropertyName             = "ForO2m";

    string UIDispatcherInvokePropertyName   = "Application.Current.Dispatcher.Invoke";


    List<string> nmSpaces = new List<string>();
    if ((LformViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((LformViewModelNameSpace != WebServiceFilterRsltViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterRsltViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterRsltViewModelNameSpace);
    if ((LformViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((LformViewModelNameSpace != RoutedEventExtNameSpace) && (nmSpaces.IndexOf(RoutedEventExtNameSpace) < 0)) 
        nmSpaces.Add(RoutedEventExtNameSpace);
    if ((LformViewModelNameSpace != WebServiceFilterMenuViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterMenuViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterMenuViewModelNameSpace);
    if ((LformViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((LformViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((LformViewModelNameSpace != RoutedCommandExtNameSpace) && (nmSpaces.IndexOf(RoutedCommandExtNameSpace) < 0)) 
        nmSpaces.Add(RoutedCommandExtNameSpace);
    if ((LformViewModelNameSpace != EformModeEnumNameSpace) && (nmSpaces.IndexOf(EformModeEnumNameSpace) < 0)) 
        nmSpaces.Add(EformModeEnumNameSpace);
    if ((LformViewModelNameSpace != modelInterfaceNameSpace) && (nmSpaces.IndexOf(modelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelInterfaceNameSpace);

    
    
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>
/*
    In the file of IModule-class the following lines of code must be inserted:


        public void OnInitialized(IContainerProvider containerProvider)
        {
            ...
            IRegionManager regionManager = containerProvider.Resolve(typeof(IRegionManager)) as IRegionManager;
            if (regionManager != null)
            {
                ...
                regionManager.RegisterViewWithRegion("<#= LformUserControlClassName #><#= RegionPropertyName #>", typeof(<#= LformUserControlClassName #>));
                
                ...
            }
            ...
        }


        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            ViewModelLocationProvider.Register<<#= LformUserControlClassName #>, <#= LformViewModelClassName #>>();
            containerRegistry.RegisterForNavigation<<#= LformUserControlClassName #>, <#= LformViewModelClassName #>>("<#= LformUserControlClassName #><#= ForO2mSuffixPropertyName #>");
            ...
        }
*/

namespace <#= LformViewModelNameSpace #> {
    public class <#= LformViewModelClassName #>: INotifyPropertyChanged, IRegionMemberLifetime
    {
        protected <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>=null;
        protected IDialogService _dialogService=null;
        public <#= LformViewModelClassName #>(<#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName  #>, IDialogService dialogService) {
            this.<#= AppSettingServicePropertyName #> = <#= AppSettingServicePropertyName #>;
            this._dialogService = dialogService;

            ObservableCollection<ValueTuple<RoutedEvent, Delegate, bool>> rehs = new ObservableCollection<ValueTuple<RoutedEvent, Delegate, bool>>();
            rehs.Add((<#= RoutedEventExtClassName #>.<#= HiddenFiltersPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>>(this.<#= OnHiddenFiltersChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= TableMenuItemsPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>>(this.<#= OnTableMenuItemsChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= RowMenuItemsPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>>(this.<#= OnRowMenuItemsChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= CanAddPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<bool>(this.<#= OnCanAddPropertyChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= CanUpdPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<bool>(this.<#= OnCanUpdPropertyChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= CanDelPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<bool>(this.<#= OnCanDelPropertyChangedPropertyName #>), false));

            rehs.Add((FrameworkElement.LoadedEvent, 
                new RoutedEventHandler(this.OnLoaded), false));
            _<#= RoutedEventHandlersPropertyName #> = rehs;

            CommandBindingCollection cbsc = new CommandBindingCollection();
            CommandBinding cb = new CommandBinding(<#= RoutedCommandExtClassName #>.<#= SformAddItemCommandPropertyName #>, new ExecutedRoutedEventHandler(this.Executed<#= SformAddItemCommandPropertyName #>), new CanExecuteRoutedEventHandler(CanExecute<#= SformAddItemCommandPropertyName #>));
            cbsc.Add(cb);
                           cb = new CommandBinding(<#= RoutedCommandExtClassName #>.<#= SformUpdItemCommandPropertyName #>, new ExecutedRoutedEventHandler(this.Executed<#= SformUpdItemCommandPropertyName #>), new CanExecuteRoutedEventHandler(CanExecute<#= SformUpdItemCommandPropertyName #>));
            cbsc.Add(cb);
                           cb = new CommandBinding(<#= RoutedCommandExtClassName #>.<#= SformDelItemCommandPropertyName #>, new ExecutedRoutedEventHandler(this.Executed<#= SformDelItemCommandPropertyName #>), new CanExecuteRoutedEventHandler(CanExecute<#= SformDelItemCommandPropertyName #>));
            cbsc.Add(cb);
            _<#= RoutedCommandHandlersPropertyName #> = cbsc;

            _<#= TableMenuItemsPropertyName #> = GetDefault<#= TableMenuItemsPropertyName #>();
            _<#= RowMenuItemsPropertyName #> = GetDefault<#= RowMenuItemsPropertyName #>();
        }
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

        #region IRegionMemberLifetime
        public bool KeepAlive
        {
            get { return false; }
        }        
        #endregion



        //protected bool <#= IsOnLoadedCalledPropertyName #> = false;
        private void OnLoaded(object sender, RoutedEventArgs e)
        {
            if (!e.Handled) {
                e.Handled = true;
            }
        }


        #region <#= RoutedEventHandlersPropertyName #>
        protected IEnumerable<ValueTuple<RoutedEvent, Delegate, bool>> _<#= RoutedEventHandlersPropertyName #> = null;
        public IEnumerable<ValueTuple<RoutedEvent, Delegate, bool>> <#= RoutedEventHandlersPropertyName #>
        { 
            get
            {
                return _<#= RoutedEventHandlersPropertyName #>;
            }
            set
            {
                if (_<#= RoutedEventHandlersPropertyName #> != value)
                {
                    _<#= RoutedEventHandlersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= RoutedCommandHandlersPropertyName #>
        protected CommandBindingCollection _<#= RoutedCommandHandlersPropertyName #> = null;
        public CommandBindingCollection <#= RoutedCommandHandlersPropertyName #>
        { 
            get
            {
                return _<#= RoutedCommandHandlersPropertyName #>;
            }
            set
            {
                if (_<#= RoutedCommandHandlersPropertyName #> != value)
                {
                    _<#= RoutedCommandHandlersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= CanAddPropertyName #>
        protected void <#= OnCanAddPropertyChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<bool> evarg) {
            bool newVal = false;
            if(evarg != null) {
                evarg.Handled = true;
                newVal = evarg.NewValue;
            }
            <#= CanAddPropertyName #> = newVal;
        }
        protected bool _<#= CanAddPropertyName #> = false;
        public bool <#= CanAddPropertyName #>
        { 
            get
            {
                return _<#= CanAddPropertyName #>;
            }
            set
            {
                if (_<#= CanAddPropertyName #> != value)
                {
                    _<#= CanAddPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= CanUpdPropertyName #>
        protected void <#= OnCanUpdPropertyChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<bool> evarg) {
            bool newVal = false;
            if(evarg != null) {
                evarg.Handled = true;
                newVal = evarg.NewValue;
            }
            <#= CanUpdPropertyName #> = newVal;
        }
        protected bool _<#= CanUpdPropertyName #> = false;
        public bool <#= CanUpdPropertyName #>
        { 
            get
            {
                return _<#= CanUpdPropertyName #>;
            }
            set
            {
                if (_<#= CanUpdPropertyName #> != value)
                {
                    _<#= CanUpdPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= CanDelPropertyName #>
        protected void <#= OnCanDelPropertyChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<bool> evarg) {
            bool newVal = false;
            if(evarg != null) {
                evarg.Handled = true;
                newVal = evarg.NewValue;
            }
            <#= CanDelPropertyName #> = newVal;
        }
        protected bool _<#= CanDelPropertyName #> = false;
        public bool <#= CanDelPropertyName #>
        { 
            get
            {
                return _<#= CanDelPropertyName #>;
            }
            set
            {
                if (_<#= CanDelPropertyName #> != value)
                {
                    _<#= CanDelPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= RowMenuItemsPropertyName #>
        protected ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> GetDefault<#= RowMenuItemsPropertyName #>() {
            return new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>()  {
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "RowUpdMI", Caption="Update item", IconName="TableEdit", IconColor="Primary", Enabled=true, Data=null, Command=<#= RoutedCommandExtClassName #>.<#= SformUpdItemCommandPropertyName #>},
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "RowDelMI", Caption="Delete item", IconName="TableRemove", IconColor="Primary", Enabled=true, Data=null, Command=<#= RoutedCommandExtClassName #>.<#= SformDelItemCommandPropertyName #>},
            };
        }
        protected void <#= OnRowMenuItemsChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>> evarg) {
            ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> tmis = GetDefault<#= RowMenuItemsPropertyName #>();
            IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> intmis = null;
            if(evarg != null) {
                evarg.Handled = true;
                intmis = evarg.NewValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>;
            }
            if(intmis != null) {
                foreach(<#= IWebServiceFilterMenuInterfaceClassName #> tmi  in intmis) {
                    tmis.Add( new <#= WebServiceFilterMenuViewModelClassName #>() {Id = tmi.Id, Caption=tmi.Caption,  IconName=tmi.IconName, IconColor=tmi.IconColor, Enabled=tmi.Enabled, Data=tmi.Data, Command=tmi.Command });
                }
            }
            <#= RowMenuItemsPropertyName #> = tmis;
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= RowMenuItemsPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= RowMenuItemsPropertyName #>
        { 
            get
            {
                return _<#= RowMenuItemsPropertyName #>;
            }
            set
            {
                if (_<#= RowMenuItemsPropertyName #> != value)
                {
                    _<#= RowMenuItemsPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= TableMenuItemsPropertyName #>
        protected ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> GetDefault<#= TableMenuItemsPropertyName #>() {
            return new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>()  {
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "TableAddMI", Caption="Add Item", IconName="TablePlus", IconColor="Primary", Enabled=true, Data=null, Command=<#= RoutedCommandExtClassName #>.<#= SformAddItemCommandPropertyName #>},
            };
        }
        protected void <#= OnTableMenuItemsChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>> evarg) {
            ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> tmis = GetDefault<#= TableMenuItemsPropertyName #>();
            IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> intmis = null;
            if(evarg != null) {
                evarg.Handled = true;
                intmis = evarg.NewValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>;
            }
            if(intmis != null) {
                foreach(<#= IWebServiceFilterMenuInterfaceClassName #> tmi  in intmis) {
                    tmis.Add( new <#= WebServiceFilterMenuViewModelClassName #>() {Id = tmi.Id, Caption=tmi.Caption,  IconName=tmi.IconName, IconColor=tmi.IconColor, Enabled=tmi.Enabled, Data=tmi.Data, Command=tmi.Command });
                }
            }
            <#= TableMenuItemsPropertyName #> = tmis;
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= TableMenuItemsPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= TableMenuItemsPropertyName #>
        { 
            get
            {
                return _<#= TableMenuItemsPropertyName #>;
            }
            set
            {
                if (_<#= TableMenuItemsPropertyName #> != value)
                {
                    _<#= TableMenuItemsPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= HiddenFiltersPropertyName #>
        protected void <#= OnHiddenFiltersChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>> evarg)
        {
            IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> hfs = null;
            if(evarg != null) {
                evarg.Handled = true;
                hfs = evarg.NewValue as IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>;
            }
            ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> newhfs = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
            if(hfs != null) {
                foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf  in hfs) {
                    newhfs.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {fltrName=hf.fltrName, fltrDataType=hf.fltrDataType,  fltrOperator=hf.fltrOperator, fltrValue=hf.fltrValue, fltrError=hf.fltrError });
                }
            }
            <#= HiddenFiltersPropertyName #> = newhfs;
        }
        IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> _<#= HiddenFiltersPropertyName #> = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
        public IEnumerable<IWebServiceFilterRsltInterface> <#= HiddenFiltersPropertyName #>
        {
            get
            {
                return _<#= HiddenFiltersPropertyName #>;
            }
            set
            {
                if (_<#= HiddenFiltersPropertyName #> != value)
                {
                    _<#= HiddenFiltersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= SformAddItemCommandPropertyName #>
        public void Executed<#= SformAddItemCommandPropertyName #>(object sender, ExecutedRoutedEventArgs e) {
            e.Handled = true;
            if (!<#= CanAddPropertyName #>) return;
            UIElement dest = e.OriginalSource as UIElement;
            if (dest == null) return;
            IDialogParameters prms = new DialogParameters();
            prms.Add("<#= CaptionPropertyName #>", "Add Item");
            prms.Add("<#= HiddenFiltersPropertyName #>", <#= HiddenFiltersPropertyName #>);
            prms.Add("<#= EformModePropertyName #>", <#= EformModeEnumClassName #>.AddMode);
            prms.Add("<#= ShowSubmitPropertyName  #>", true);
            // prms.Add("<#= FormControlModelPropertyName #>", null);
            _dialogService.ShowDialog("<#= EdlgViewModelClassName #>", prms, (rslt) => {
                if (rslt == null) return;
                if (rslt.Result != ButtonResult.OK) return;
                if (rslt.Parameters.ContainsKey("<#= FormControlModelPropertyName #>")) {
                    <#= modelInterfaceClassName #> itm = rslt.Parameters.GetValue<<#= modelInterfaceClassName #>>("<#= FormControlModelPropertyName #>");
                    // raise added event here
                    <#= UIDispatcherInvokePropertyName #>(() => {
                        <#= RoutedCommandExtClassName #>.<#= SformAfterAddItemCommandPropertyName  #>.Execute(itm, dest);
                    });
                }
           });
        }
        public void CanExecute<#= SformAddItemCommandPropertyName #>(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
            e.CanExecute = <#= CanAddPropertyName #> ;
        }
        #endregion

        #region <#= SformUpdItemCommandPropertyName #>
        public void Executed<#= SformUpdItemCommandPropertyName #>(object sender, ExecutedRoutedEventArgs e) {
            e.Handled = true;
            UIElement dest = e.OriginalSource as UIElement;
            if (dest == null) return;
            <#= modelInterfaceClassName #> selected = e.Parameter as  <#= modelInterfaceClassName #>;
            if ((!<#= CanUpdPropertyName #>) || (selected == null)) return;
            IDialogParameters prms = new DialogParameters();
            prms.Add("<#= CaptionPropertyName #>", "Update Item");
            prms.Add("<#= HiddenFiltersPropertyName #>", <#= HiddenFiltersPropertyName #>);
            prms.Add("<#= EformModePropertyName #>", <#= EformModeEnumClassName #>.UpdateMode);
            prms.Add("<#= ShowSubmitPropertyName  #>", true);
            prms.Add("<#= FormControlModelPropertyName #>", selected);
            _dialogService.ShowDialog("<#= EdlgViewModelClassName #>", prms, (rslt) => {
                if (rslt == null) return;
                if (rslt.Result != ButtonResult.OK) return;
                if (rslt.Parameters.ContainsKey("<#= FormControlModelPropertyName #>")) {
                    <#= modelInterfaceClassName #> itm = rslt.Parameters.GetValue<<#= modelInterfaceClassName #>>("<#= FormControlModelPropertyName #>");
                    // raise update event here
                    <#= UIDispatcherInvokePropertyName #>(() => {
                        <#= RoutedCommandExtClassName #>.<#= SformAfterUpdItemCommandPropertyName  #>.Execute(itm, dest);
                    });
                }
           });
        }
        public void CanExecute<#= SformUpdItemCommandPropertyName #>(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
            <#= modelInterfaceClassName #> prm = e.Parameter as  <#= modelInterfaceClassName #>;
            e.CanExecute = (prm != null) && <#= CanUpdPropertyName #>;
        }
        #endregion

        #region <#= SformDelItemCommandPropertyName #>
        public void Executed<#= SformDelItemCommandPropertyName #>(object sender, ExecutedRoutedEventArgs e) {
            e.Handled = true;
            UIElement dest = e.OriginalSource as UIElement;
            if (dest == null) return;
            <#= modelInterfaceClassName #> selected = e.Parameter as  <#= modelInterfaceClassName #>;
            if ((!<#= CanDelPropertyName #>) || (selected == null)) return;
            IDialogParameters prms = new DialogParameters();
            prms.Add("<#= CaptionPropertyName #>", "Delete Item");
            prms.Add("<#= HiddenFiltersPropertyName #>", <#= HiddenFiltersPropertyName #>);
            prms.Add("<#= EformModePropertyName #>", <#= EformModeEnumClassName #>.DeleteMode);
            prms.Add("<#= ShowSubmitPropertyName  #>", true);
            prms.Add("<#= FormControlModelPropertyName #>", selected);
            _dialogService.ShowDialog("<#= EdlgViewModelClassName #>", prms, (rslt) => {
                if (rslt == null) return;
                if (rslt.Result != ButtonResult.OK) return;
                if (rslt.Parameters.ContainsKey("<#= FormControlModelPropertyName #>")) {
                    <#= modelInterfaceClassName #> itm = rslt.Parameters.GetValue<<#= modelInterfaceClassName #>>("<#= FormControlModelPropertyName #>");
                    // raise deleted event here
                    <#= UIDispatcherInvokePropertyName #>(() => {
                        <#= RoutedCommandExtClassName #>.<#= SformAfterDelItemCommandPropertyName  #>.Execute(itm, dest);
                    });
                }
           });
        }
        public void CanExecute<#= SformDelItemCommandPropertyName #>(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
           <#= modelInterfaceClassName #> prm = e.Parameter as  <#= modelInterfaceClassName #>;
            e.CanExecute = (prm != null) && <#= CanDelPropertyName #>;
        }
        #endregion
    }
}



<#+
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetFilterInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    string GetPageInterfaceName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }

    string GetModelServiceInterfaceName(ModelViewSerializable model) {
        return "I" + model.ViewName + "Service";
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetFilterName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName) + "Filter";
    }

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetDisplayAttributeValueString(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string propName) {
            if (prop == null)
            {
                return "";
            }
            if(prop.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                prop.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }

    string GetDisplayAttributeValueStringEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetDisplayAttributeValueStringEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxLenEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMaxLenEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxVal(sclrProp, model);
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    List<ModelViewPropertyOfVwSerializable> GetPropsByForeignKey(ModelViewSerializable model, ModelViewForeignKeySerializable foreignKey) {
        List<ModelViewPropertyOfVwSerializable> result= new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (foreignKey == null)) {
            return result;
        }
        if (foreignKey.PrincipalKeyProps == null || foreignKey.ForeignKeyProps == null || model.ScalarProperties == null) {
            return result;
        }
        if ((foreignKey.PrincipalKeyProps.Count != foreignKey.ForeignKeyProps.Count) || (foreignKey.ForeignKeyProps.Count < 1)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.PrincipalKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (foreignKey.NavigationName == p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    string GetModelPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetModelPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }

#>