<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.CompilerServices;
<#

    string ModelNotifyFolder         = "01106-ModelNotify.cs";
    string ModelNotifyClassName      = GetModelNotifyName(Model);
    string ModelNotifyNameSpace      = GetModelNameSpace(Model, ModelNotifyFolder);

    string PermissionNotifyInterfaceFolder      = "01114-PermissionNotifyInterface.cs";
    string PermissionNotifyInterfaceClassName   = GetModelPermissionNotifyInterfaceName(Model);
    string PermissionNotifyInterfaceNameSpace   = GetModelNameSpace(Model, PermissionNotifyInterfaceFolder);

    string PermissionNotifyFolder         = "01116-PermissionNotify.cs";
    string PermissionNotifyClassName      = GetModelPermissionNotifyName(Model);
    string PermissionNotifyNameSpace      = GetModelNameSpace(Model, PermissionNotifyFolder);


    string AddPrmPropertyName                    = "AddPrm";
    string UpdPrmPropertyName                    = "UpdPrm";
    string DelPrmPropertyName                    = "DelPrm";
    string SelPrmPropertyName                    = "SelPrm";

    List<string> nmSpaces = new List<string>();
    if ((PermissionNotifyNameSpace != PermissionNotifyInterfaceNameSpace) && (nmSpaces.IndexOf(PermissionNotifyInterfaceNameSpace) < 0)) 
        nmSpaces.Add(PermissionNotifyInterfaceNameSpace);
    if ((PermissionNotifyNameSpace != ModelNotifyNameSpace) && (nmSpaces.IndexOf(ModelNotifyNameSpace) < 0)) 
        nmSpaces.Add(ModelNotifyNameSpace);

    
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

namespace <#= PermissionNotifyNameSpace #> {
    public class <#= PermissionNotifyClassName #>: <#= ModelNotifyClassName #>, <#= PermissionNotifyInterfaceClassName #>
    {
        protected bool  _<#= AddPrmPropertyName #>;
        public bool  <#= AddPrmPropertyName #> { 
            get { return _<#= AddPrmPropertyName #>; }
            set { if(_<#= AddPrmPropertyName #> != value) { _<#= AddPrmPropertyName #> = value; OnPropertyChanged(); } }
        }

        protected bool  _<#= UpdPrmPropertyName #>;
        public bool  <#= UpdPrmPropertyName #> { 
            get { return _<#= UpdPrmPropertyName #>; }
            set { if(_<#= UpdPrmPropertyName #> != value) { _<#= UpdPrmPropertyName #> = value; OnPropertyChanged(); } }
        }

        protected bool  _<#= DelPrmPropertyName #>;
        public bool  <#= DelPrmPropertyName #> { 
            get { return _<#= DelPrmPropertyName #>; }
            set { if(_<#= DelPrmPropertyName #> != value) { _<#= DelPrmPropertyName #> = value; OnPropertyChanged(); } }
        }

        protected bool  _<#= SelPrmPropertyName #>;
        public bool  <#= SelPrmPropertyName #> { 
            get { return _<#= SelPrmPropertyName #>; }
            set { if(_<#= SelPrmPropertyName #> != value) { _<#= SelPrmPropertyName #> = value; OnPropertyChanged(); } }
        }

    }
}

<#+

    string GetModelPermissionNotifyInterfaceName(ModelViewSerializable model) {
        return "I"+ GetModelPermissionNotifyName(model);
    }
    string GetModelPermissionNotifyName(ModelViewSerializable model) {
        return GetModelName(model) + "PermissionNotify";
    }

    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }
    string GetModelNotifyName(ModelViewSerializable model) {
        return GetModelName(model) + "Notify";
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+ GetModelName(model);
    }
    string GetNotifyInterfaceName(ModelViewSerializable model) {
        return GetInterfaceName(model) + "Notify";
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string AttribToString(ModelViewAttributeSerializable attr) {
        if(attr == null) return "";
        string result= "[" + attr.AttrName; 
        if (attr.VaueProperties == null) {
            return result + "]";
        }
        if (attr.VaueProperties.Count < 1) {
            return result + "]";
        }
        result = result + "(";
        bool insComma= false;
        foreach(ModelViewAttributePropertySerializable valProp in attr.VaueProperties) {
            if (insComma) {
                result =  result + ",";
            } else {
                insComma = true;
            }
            if(! string.IsNullOrEmpty(valProp.PropName) ) {
                if (! valProp.PropName.Contains("...") ) {
                    result =  result + valProp.PropName + "=";
                }
            }
            result =  result + valProp.PropValue;
        }
        return result + ")]";
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }

#>