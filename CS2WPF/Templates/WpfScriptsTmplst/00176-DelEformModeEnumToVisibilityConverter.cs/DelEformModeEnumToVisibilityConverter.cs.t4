<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using System.Windows.Data;
using System.Windows;
<#

    string EformModeEnumFolder      = "00026-EformModeEnum.cs";
    string EformModeEnumClassName   = GetModelClassName(Model, EformModeEnumFolder);
    string EformModeEnumNameSpace   = GetModelNameSpace(Model, EformModeEnumFolder);

    string DelEformModeEnumToVisibilityConverterFolder      = "00176-DelEformModeEnumToVisibilityConverter.cs";
    string DelEformModeEnumToVisibilityConverterClassName   = GetModelClassName(Model, DelEformModeEnumToVisibilityConverterFolder);
    string DelEformModeEnumToVisibilityConverterNameSpace   = GetModelNameSpace(Model, DelEformModeEnumToVisibilityConverterFolder);
    
#>
<#
    if(DelEformModeEnumToVisibilityConverterNameSpace != EformModeEnumNameSpace)
    {
#>
using <#= EformModeEnumNameSpace #>;
<#
    }
#>

namespace <#= DelEformModeEnumToVisibilityConverterNameSpace #> {
    [ValueConversion(typeof(<#= EformModeEnumClassName #>), typeof(Visibility))]
    public class <#= DelEformModeEnumToVisibilityConverterClassName #>: IValueConverter
    {
        #region IValueConverter Members
        public object Convert(object value, Type targetType, object parameter,
            System.Globalization.CultureInfo culture)
        {
            if (targetType != typeof(Visibility))
                throw new InvalidOperationException("The target must be a Visibility");
            if (value == null) return Visibility.Collapsed;
            if (!(value is <#= EformModeEnumClassName #>))
                throw new InvalidOperationException("The source must be a <#= EformModeEnumClassName #>");
            if((<#= EformModeEnumClassName #>)value == <#= EformModeEnumClassName #>.DeleteMode) {
                return Visibility.Visible;
            } else {
                return Visibility.Collapsed;
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter,
            System.Globalization.CultureInfo culture)
        {
            throw new NotSupportedException();
        }

        #endregion
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>